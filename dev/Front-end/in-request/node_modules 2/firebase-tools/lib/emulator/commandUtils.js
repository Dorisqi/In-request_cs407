"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const clc = require("cli-color");
const controller = require("../emulator/controller");
const Config = require("../config");
const utils = require("../utils");
const logger = require("../logger");
const requireAuth = require("../requireAuth");
const requireConfig = require("../requireConfig");
const types_1 = require("../emulator/types");
const error_1 = require("../error");
exports.FLAG_ONLY = "--only <emulators>";
exports.DESC_ONLY = "only specific emulators. " +
    "This is a comma separated list of emulator names. " +
    "Valid options are: " +
    JSON.stringify(types_1.ALL_SERVICE_EMULATORS);
exports.FLAG_INSPECT_FUNCTIONS = "--inspect-functions [port]";
exports.DESC_INSPECT_FUNCTIONS = "emulate Cloud Functions in debug mode with the node inspector on the given port (9229 if not specified)";
exports.FLAG_IMPORT = "--import [dir]";
exports.DESC_IMPORT = "import emulator data from a previous export (see emulators:export)";
const DEFAULT_CONFIG = new Config({ database: {}, firestore: {}, functions: {}, hosting: {} }, {});
function beforeEmulatorCommand(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const optionsWithDefaultConfig = Object.assign(Object.assign({}, options), { config: DEFAULT_CONFIG });
        const optionsWithConfig = options.config ? options : optionsWithDefaultConfig;
        const canStartWithoutConfig = options.only &&
            !controller.shouldStart(optionsWithConfig, types_1.Emulators.FUNCTIONS) &&
            !controller.shouldStart(optionsWithConfig, types_1.Emulators.HOSTING);
        try {
            yield requireAuth(options);
        }
        catch (e) {
            logger.debug(e);
            utils.logLabeledWarning("emulators", `You are not currently authenticated so some features may not work correctly. Please run ${clc.bold("firebase login")} to authenticate the CLI.`);
        }
        if (canStartWithoutConfig && !options.config) {
            utils.logWarning("Could not find config (firebase.json) so using defaults.");
            options.config = DEFAULT_CONFIG;
        }
        else {
            yield requireConfig(options);
        }
    });
}
exports.beforeEmulatorCommand = beforeEmulatorCommand;
function parseInspectionPort(options) {
    let port = options.inspectFunctions;
    if (port === true) {
        port = "9229";
    }
    const parsed = Number(port);
    if (isNaN(parsed) || parsed < 1024 || parsed > 65535) {
        throw new error_1.FirebaseError(`"${port}" is not a valid port for debugging, please pass an integer between 1024 and 65535.`);
    }
    return parsed;
}
exports.parseInspectionPort = parseInspectionPort;
