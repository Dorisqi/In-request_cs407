{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { backgroundDoc, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Grommet) {\n  var DocumentedGrommet = describe(Grommet).availableAt(getAvailableAtBadge('Grommet')).description('The top level Grommet container.').usage(\"import { Grommet } from 'grommet';\\n<Grommet>...</Grommet>\").intrinsicElement('div');\n  DocumentedGrommet.propTypes = {\n    background: backgroundDoc,\n    dir: PropTypes.oneOf(['rtl']).description('Layout direction for right to left contexts'),\n    full: PropTypes.bool.description('Whether to take the whole viewport.').defaultValue(false),\n    plain: PropTypes.bool.description(\"Whether or not Grommet should apply a global font-family, font-size, \\n        and line-height.\").defaultValue(false),\n    cssVars: PropTypes.bool.description('Whether to expose the css variables.').defaultValue(false),\n    theme: PropTypes.object.description('Custom styles for Grommet app component.'),\n    themeMode: PropTypes.oneOf(['dark', 'light']).description(\"Dark vs. light theme variation. Default is unspecified and left to\\n      theme.\"),\n    userAgent: PropTypes.string.description(\"User agent used to detect the device width for setting the initial \\n      breakpoint.\")\n  };\n  return DocumentedGrommet;\n};\nexport var themeDoc = {\n  'grommet.extend': {\n    description: 'Any additional style for Grommet.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'global.font.face': {\n    description: 'Custom font face declaration',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/Grommet/doc.js"],"names":["describe","PropTypes","backgroundDoc","getAvailableAtBadge","doc","Grommet","DocumentedGrommet","availableAt","description","usage","intrinsicElement","propTypes","background","dir","oneOf","full","bool","defaultValue","plain","cssVars","theme","object","themeMode","userAgent","string","themeDoc","type","undefined"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,YAApC;AACA,SAASC,aAAT,EAAwBC,mBAAxB,QAAmD,aAAnD;AACA,OAAO,IAAIC,GAAG,GAAG,SAASA,GAAT,CAAaC,OAAb,EAAsB;AACrC,MAAIC,iBAAiB,GAAGN,QAAQ,CAACK,OAAD,CAAR,CAAkBE,WAAlB,CAA8BJ,mBAAmB,CAAC,SAAD,CAAjD,EAA8DK,WAA9D,CAA0E,kCAA1E,EAA8GC,KAA9G,CAAoH,4DAApH,EAAkLC,gBAAlL,CAAmM,KAAnM,CAAxB;AACAJ,EAAAA,iBAAiB,CAACK,SAAlB,GAA8B;AAC5BC,IAAAA,UAAU,EAAEV,aADgB;AAE5BW,IAAAA,GAAG,EAAEZ,SAAS,CAACa,KAAV,CAAgB,CAAC,KAAD,CAAhB,EAAyBN,WAAzB,CAAqC,6CAArC,CAFuB;AAG5BO,IAAAA,IAAI,EAAEd,SAAS,CAACe,IAAV,CAAeR,WAAf,CAA2B,qCAA3B,EAAkES,YAAlE,CAA+E,KAA/E,CAHsB;AAI5BC,IAAAA,KAAK,EAAEjB,SAAS,CAACe,IAAV,CAAeR,WAAf,CAA2B,iGAA3B,EAA8HS,YAA9H,CAA2I,KAA3I,CAJqB;AAK5BE,IAAAA,OAAO,EAAElB,SAAS,CAACe,IAAV,CAAeR,WAAf,CAA2B,sCAA3B,EAAmES,YAAnE,CAAgF,KAAhF,CALmB;AAM5BG,IAAAA,KAAK,EAAEnB,SAAS,CAACoB,MAAV,CAAiBb,WAAjB,CAA6B,0CAA7B,CANqB;AAO5Bc,IAAAA,SAAS,EAAErB,SAAS,CAACa,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,EAAmCN,WAAnC,CAA+C,kFAA/C,CAPiB;AAQ5Be,IAAAA,SAAS,EAAEtB,SAAS,CAACuB,MAAV,CAAiBhB,WAAjB,CAA6B,wFAA7B;AARiB,GAA9B;AAUA,SAAOF,iBAAP;AACD,CAbM;AAcP,OAAO,IAAImB,QAAQ,GAAG;AACpB,oBAAkB;AAChBjB,IAAAA,WAAW,EAAE,mCADG;AAEhBkB,IAAAA,IAAI,EAAE,wBAFU;AAGhBT,IAAAA,YAAY,EAAEU;AAHE,GADE;AAMpB,sBAAoB;AAClBnB,IAAAA,WAAW,EAAE,8BADK;AAElBkB,IAAAA,IAAI,EAAE,wBAFY;AAGlBT,IAAAA,YAAY,EAAEU;AAHI;AANA,CAAf","sourcesContent":["import { describe, PropTypes } from 'react-desc';\nimport { backgroundDoc, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Grommet) {\n  var DocumentedGrommet = describe(Grommet).availableAt(getAvailableAtBadge('Grommet')).description('The top level Grommet container.').usage(\"import { Grommet } from 'grommet';\\n<Grommet>...</Grommet>\").intrinsicElement('div');\n  DocumentedGrommet.propTypes = {\n    background: backgroundDoc,\n    dir: PropTypes.oneOf(['rtl']).description('Layout direction for right to left contexts'),\n    full: PropTypes.bool.description('Whether to take the whole viewport.').defaultValue(false),\n    plain: PropTypes.bool.description(\"Whether or not Grommet should apply a global font-family, font-size, \\n        and line-height.\").defaultValue(false),\n    cssVars: PropTypes.bool.description('Whether to expose the css variables.').defaultValue(false),\n    theme: PropTypes.object.description('Custom styles for Grommet app component.'),\n    themeMode: PropTypes.oneOf(['dark', 'light']).description(\"Dark vs. light theme variation. Default is unspecified and left to\\n      theme.\"),\n    userAgent: PropTypes.string.description(\"User agent used to detect the device width for setting the initial \\n      breakpoint.\")\n  };\n  return DocumentedGrommet;\n};\nexport var themeDoc = {\n  'grommet.extend': {\n    description: 'Any additional style for Grommet.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'global.font.face': {\n    description: 'Custom font face declaration',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n};"]},"metadata":{},"sourceType":"module"}