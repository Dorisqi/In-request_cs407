{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge, themeDocUtils } from '../../utils';\nexport var doc = function doc(RangeInput) {\n  var DocumentedRangeInput = describe(RangeInput).availableAt(getAvailableAtBadge('RangeInput')).description('A slider control to input a value within a fixed range.').usage(\"import { RangeInput } from 'grommet';\\n<RangeInput />\").intrinsicElement('input');\n  DocumentedRangeInput.propTypes = {\n    id: PropTypes.string.description('The id attribute of the range input.'),\n    min: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).description('The minimum value permitted.'),\n    max: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).description('The maximum value permitted.'),\n    name: PropTypes.string.description('The name attribute of the range input.'),\n    onChange: PropTypes.func.description(\"Function that will be called when the user changes the value. It will\\n      be passed an event object. The new input value will be available\\n      via 'event.target.value'.\"),\n    step: PropTypes.number.description('The step interval between values.'),\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).description('The current value.')\n  };\n  return DocumentedRangeInput;\n};\nexport var themeDoc = _extends({}, themeDocUtils.focusStyle, {\n  'global.spacing': {\n    description: 'The height, width and border-radius of the range thumb.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'rangeInput.extend': {\n    description: 'Any additional style for the RangeInput.',\n    type: \"string | (props) => `\\n      any CSS styling;\\n    `\",\n    defaultValue: undefined\n  },\n  'rangeInput.thumb.color': {\n    description: 'The color of the thumb.',\n    type: 'string | { dark: undefined, light: undefined }',\n    defaultValue: undefined\n  },\n  'rangeInput.thumb.extend': {\n    description: 'Any additional style for the thumb.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'rangeInput.track.color': {\n    description: 'The color of the track.',\n    type: 'string',\n    defaultValue: '{ dark: rgba(255, 255, 255, 0.33), light: rgba(0, 0, 0, 0.33) }'\n  },\n  'rangeInput.track.extend': {\n    description: 'Any additional style for the track.',\n    type: \"string | (props) => `\\n      any CSS styling;\\n    `\",\n    defaultValue: undefined\n  },\n  'rangeInput.track.height': {\n    description: 'The height of the track.',\n    type: 'string',\n    defaultValue: '4px'\n  }\n});","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/RangeInput/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","getAvailableAtBadge","themeDocUtils","doc","RangeInput","DocumentedRangeInput","availableAt","description","usage","intrinsicElement","propTypes","id","string","min","oneOfType","number","max","name","onChange","func","step","value","themeDoc","focusStyle","type","defaultValue","undefined"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge, themeDocUtils } from '../../utils';\nexport var doc = function doc(RangeInput) {\n  var DocumentedRangeInput = describe(RangeInput).availableAt(getAvailableAtBadge('RangeInput')).description('A slider control to input a value within a fixed range.').usage(\"import { RangeInput } from 'grommet';\\n<RangeInput />\").intrinsicElement('input');\n  DocumentedRangeInput.propTypes = {\n    id: PropTypes.string.description('The id attribute of the range input.'),\n    min: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).description('The minimum value permitted.'),\n    max: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).description('The maximum value permitted.'),\n    name: PropTypes.string.description('The name attribute of the range input.'),\n    onChange: PropTypes.func.description(\"Function that will be called when the user changes the value. It will\\n      be passed an event object. The new input value will be available\\n      via 'event.target.value'.\"),\n    step: PropTypes.number.description('The step interval between values.'),\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).description('The current value.')\n  };\n  return DocumentedRangeInput;\n};\nexport var themeDoc = _extends({}, themeDocUtils.focusStyle, {\n  'global.spacing': {\n    description: 'The height, width and border-radius of the range thumb.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'rangeInput.extend': {\n    description: 'Any additional style for the RangeInput.',\n    type: \"string | (props) => `\\n      any CSS styling;\\n    `\",\n    defaultValue: undefined\n  },\n  'rangeInput.thumb.color': {\n    description: 'The color of the thumb.',\n    type: 'string | { dark: undefined, light: undefined }',\n    defaultValue: undefined\n  },\n  'rangeInput.thumb.extend': {\n    description: 'Any additional style for the thumb.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'rangeInput.track.color': {\n    description: 'The color of the track.',\n    type: 'string',\n    defaultValue: '{ dark: rgba(255, 255, 255, 0.33), light: rgba(0, 0, 0, 0.33) }'\n  },\n  'rangeInput.track.extend': {\n    description: 'Any additional style for the track.',\n    type: \"string | (props) => `\\n      any CSS styling;\\n    `\",\n    defaultValue: undefined\n  },\n  'rangeInput.track.height': {\n    description: 'The height of the track.',\n    type: 'string',\n    defaultValue: '4px'\n  }\n});"]},"metadata":{},"sourceType":"module"}