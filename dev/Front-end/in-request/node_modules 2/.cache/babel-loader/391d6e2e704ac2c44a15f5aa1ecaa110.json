{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst constants_1 = require(\"./constants\");\n\nlet _logger = console;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\n\nif (process.env.GRPC_VERBOSITY) {\n  switch (process.env.GRPC_VERBOSITY) {\n    case 'DEBUG':\n      _logVerbosity = constants_1.LogVerbosity.DEBUG;\n      break;\n\n    case 'INFO':\n      _logVerbosity = constants_1.LogVerbosity.INFO;\n      break;\n\n    case 'ERROR':\n      _logVerbosity = constants_1.LogVerbosity.ERROR;\n      break;\n\n    default: // Ignore any other values\n\n  }\n}\n\nexports.getLogger = () => {\n  return _logger;\n};\n\nexports.setLogger = logger => {\n  _logger = logger;\n};\n\nexports.setLoggerVerbosity = verbosity => {\n  _logVerbosity = verbosity;\n}; // tslint:disable-next-line no-any\n\n\nexports.log = (severity, ...args) => {\n  if (severity >= _logVerbosity && typeof _logger.error === 'function') {\n    _logger.error(...args);\n  }\n};\n\nconst enabledTracers = process.env.GRPC_TRACE ? process.env.GRPC_TRACE.split(',') : [];\nconst allEnabled = enabledTracers.includes('all');\n\nfunction trace(severity, tracer, text) {\n  if (allEnabled || enabledTracers.includes(tracer)) {\n    exports.log(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n  }\n}\n\nexports.trace = trace;","map":{"version":3,"sources":["../../src/logging.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAiBA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,IAAI,OAAO,GAAqB,OAAhC;AACA,IAAI,aAAa,GAAiB,WAAA,CAAA,YAAA,CAAa,KAA/C;;AAEA,IAAI,OAAO,CAAC,GAAR,CAAY,cAAhB,EAAgC;AAC9B,UAAQ,OAAO,CAAC,GAAR,CAAY,cAApB;AACE,SAAK,OAAL;AACE,MAAA,aAAa,GAAG,WAAA,CAAA,YAAA,CAAa,KAA7B;AACA;;AACF,SAAK,MAAL;AACE,MAAA,aAAa,GAAG,WAAA,CAAA,YAAA,CAAa,IAA7B;AACA;;AACF,SAAK,OAAL;AACE,MAAA,aAAa,GAAG,WAAA,CAAA,YAAA,CAAa,KAA7B;AACA;;AACF,YAVF,CAWE;;AAXF;AAaD;;AAEY,OAAA,CAAA,SAAA,GAAY,MAAuB;AAC9C,SAAO,OAAP;AACD,CAFY;;AAIA,OAAA,CAAA,SAAA,GAAa,MAAD,IAAmC;AAC1D,EAAA,OAAO,GAAG,MAAV;AACD,CAFY;;AAIA,OAAA,CAAA,kBAAA,GAAsB,SAAD,IAAkC;AAClE,EAAA,aAAa,GAAG,SAAhB;AACD,CAFY,C,CAIb;;;AACa,OAAA,CAAA,GAAA,GAAM,CAAC,QAAD,EAAyB,GAAG,IAA5B,KAAiD;AAClE,MAAI,QAAQ,IAAI,aAAZ,IAA6B,OAAO,OAAO,CAAC,KAAf,KAAyB,UAA1D,EAAsE;AACpE,IAAA,OAAO,CAAC,KAAR,CAAc,GAAG,IAAjB;AACD;AACF,CAJY;;AAMb,MAAM,cAAc,GAAG,OAAO,CAAC,GAAR,CAAY,UAAZ,GACnB,OAAO,CAAC,GAAR,CAAY,UAAZ,CAAuB,KAAvB,CAA6B,GAA7B,CADmB,GAEnB,EAFJ;AAGA,MAAM,UAAU,GAAG,cAAc,CAAC,QAAf,CAAwB,KAAxB,CAAnB;;AAEA,SAAgB,KAAhB,CACE,QADF,EAEE,MAFF,EAGE,IAHF,EAGc;AAEZ,MAAI,UAAU,IAAI,cAAc,CAAC,QAAf,CAAwB,MAAxB,CAAlB,EAAmD;AACjD,IAAA,OAAA,CAAA,GAAA,CAAI,QAAJ,EAAc,IAAI,IAAJ,GAAW,WAAX,KAA2B,KAA3B,GAAmC,MAAnC,GAA4C,KAA5C,GAAoD,IAAlE;AACD;AACF;;AARD,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"./constants\");\nlet _logger = console;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\nif (process.env.GRPC_VERBOSITY) {\n    switch (process.env.GRPC_VERBOSITY) {\n        case 'DEBUG':\n            _logVerbosity = constants_1.LogVerbosity.DEBUG;\n            break;\n        case 'INFO':\n            _logVerbosity = constants_1.LogVerbosity.INFO;\n            break;\n        case 'ERROR':\n            _logVerbosity = constants_1.LogVerbosity.ERROR;\n            break;\n        default:\n        // Ignore any other values\n    }\n}\nexports.getLogger = () => {\n    return _logger;\n};\nexports.setLogger = (logger) => {\n    _logger = logger;\n};\nexports.setLoggerVerbosity = (verbosity) => {\n    _logVerbosity = verbosity;\n};\n// tslint:disable-next-line no-any\nexports.log = (severity, ...args) => {\n    if (severity >= _logVerbosity && typeof _logger.error === 'function') {\n        _logger.error(...args);\n    }\n};\nconst enabledTracers = process.env.GRPC_TRACE\n    ? process.env.GRPC_TRACE.split(',')\n    : [];\nconst allEnabled = enabledTracers.includes('all');\nfunction trace(severity, tracer, text) {\n    if (allEnabled || enabledTracers.includes(tracer)) {\n        exports.log(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n    }\n}\nexports.trace = trace;\n//# sourceMappingURL=logging.js.map"]},"metadata":{},"sourceType":"script"}