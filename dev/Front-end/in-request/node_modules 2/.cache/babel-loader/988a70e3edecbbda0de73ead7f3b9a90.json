{"ast":null,"code":"\"use strict\"; // Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst jws = require(\"jws\");\n\nconst LRU = require(\"lru-cache\");\n\nconst messages = require(\"../messages\");\n\nconst DEFAULT_HEADER = {\n  alg: 'RS256',\n  typ: 'JWT'\n};\n\nclass JWTAccess {\n  /**\n   * JWTAccess service account credentials.\n   *\n   * Create a new access token by using the credential to create a new JWT token\n   * that's recognized as the access token.\n   *\n   * @param email the service account email address.\n   * @param key the private key that will be used to sign the token.\n   * @param keyId the ID of the private key used to sign the token.\n   */\n  constructor(email, key, keyId) {\n    this.cache = new LRU({\n      max: 500,\n      maxAge: 60 * 60 * 1000\n    });\n    this.email = email;\n    this.key = key;\n    this.keyId = keyId;\n  }\n  /**\n   * Indicates whether the credential requires scopes to be created by calling\n   * createdScoped before use.\n   * @deprecated\n   * @return always false\n   */\n\n\n  createScopedRequired() {\n    // JWT Header authentication does not use scopes.\n    messages.warn(messages.JWT_ACCESS_CREATE_SCOPED_DEPRECATED);\n    return false;\n  }\n  /**\n   * Get a non-expired access token, after refreshing if necessary.\n   *\n   * @param authURI The URI being authorized.\n   * @param additionalClaims An object with a set of additional claims to\n   * include in the payload.\n   * @deprecated Please use `getRequestHeaders` instead.\n   * @returns An object that includes the authorization header.\n   */\n\n\n  getRequestMetadata(url, additionalClaims) {\n    messages.warn(messages.JWT_ACCESS_GET_REQUEST_METADATA_DEPRECATED);\n    return {\n      headers: this.getRequestHeaders(url, additionalClaims)\n    };\n  }\n  /**\n   * Get a non-expired access token, after refreshing if necessary.\n   *\n   * @param url The URI being authorized.\n   * @param additionalClaims An object with a set of additional claims to\n   * include in the payload.\n   * @returns An object that includes the authorization header.\n   */\n\n\n  getRequestHeaders(url, additionalClaims) {\n    const cachedToken = this.cache.get(url);\n\n    if (cachedToken) {\n      return cachedToken;\n    }\n\n    const iat = Math.floor(new Date().getTime() / 1000);\n    const exp = iat + 3600; // 3600 seconds = 1 hour\n    // The payload used for signed JWT headers has:\n    // iss == sub == <client email>\n    // aud == <the authorization uri>\n\n    const defaultClaims = {\n      iss: this.email,\n      sub: this.email,\n      aud: url,\n      exp,\n      iat\n    }; // if additionalClaims are provided, ensure they do not collide with\n    // other required claims.\n\n    if (additionalClaims) {\n      for (const claim in defaultClaims) {\n        if (additionalClaims[claim]) {\n          throw new Error(`The '${claim}' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.`);\n        }\n      }\n    }\n\n    const header = this.keyId ? Object.assign(Object.assign({}, DEFAULT_HEADER), {\n      kid: this.keyId\n    }) : DEFAULT_HEADER;\n    const payload = Object.assign(defaultClaims, additionalClaims); // Sign the jwt and add it to the cache\n\n    const signedJWT = jws.sign({\n      header,\n      payload,\n      secret: this.key\n    });\n    const headers = {\n      Authorization: `Bearer ${signedJWT}`\n    };\n    this.cache.set(url, headers);\n    return headers;\n  }\n  /**\n   * Create a JWTAccess credentials instance using the given input options.\n   * @param json The input object.\n   */\n\n\n  fromJSON(json) {\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the service account auth settings.');\n    }\n\n    if (!json.client_email) {\n      throw new Error('The incoming JSON object does not contain a client_email field');\n    }\n\n    if (!json.private_key) {\n      throw new Error('The incoming JSON object does not contain a private_key field');\n    } // Extract the relevant information from the json key file.\n\n\n    this.email = json.client_email;\n    this.key = json.private_key;\n    this.keyId = json.private_key_id;\n    this.projectId = json.project_id;\n  }\n\n  fromStream(inputStream, callback) {\n    if (callback) {\n      this.fromStreamAsync(inputStream).then(r => callback(), callback);\n    } else {\n      return this.fromStreamAsync(inputStream);\n    }\n  }\n\n  fromStreamAsync(inputStream) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        reject(new Error('Must pass in a stream containing the service account auth settings.'));\n      }\n\n      let s = '';\n      inputStream.setEncoding('utf8').on('data', chunk => s += chunk).on('error', reject).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          this.fromJSON(data);\n          resolve();\n        } catch (err) {\n          reject(err);\n        }\n      });\n    });\n  }\n\n}\n\nexports.JWTAccess = JWTAccess;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/google-auth-library/build/src/auth/jwtaccess.js"],"names":["Object","defineProperty","exports","value","jws","require","LRU","messages","DEFAULT_HEADER","alg","typ","JWTAccess","constructor","email","key","keyId","cache","max","maxAge","createScopedRequired","warn","JWT_ACCESS_CREATE_SCOPED_DEPRECATED","getRequestMetadata","url","additionalClaims","JWT_ACCESS_GET_REQUEST_METADATA_DEPRECATED","headers","getRequestHeaders","cachedToken","get","iat","Math","floor","Date","getTime","exp","defaultClaims","iss","sub","aud","claim","Error","header","assign","kid","payload","signedJWT","sign","secret","Authorization","set","fromJSON","json","client_email","private_key","private_key_id","projectId","project_id","fromStream","inputStream","callback","fromStreamAsync","then","r","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","err"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jws = require(\"jws\");\nconst LRU = require(\"lru-cache\");\nconst messages = require(\"../messages\");\nconst DEFAULT_HEADER = {\n    alg: 'RS256',\n    typ: 'JWT',\n};\nclass JWTAccess {\n    /**\n     * JWTAccess service account credentials.\n     *\n     * Create a new access token by using the credential to create a new JWT token\n     * that's recognized as the access token.\n     *\n     * @param email the service account email address.\n     * @param key the private key that will be used to sign the token.\n     * @param keyId the ID of the private key used to sign the token.\n     */\n    constructor(email, key, keyId) {\n        this.cache = new LRU({ max: 500, maxAge: 60 * 60 * 1000 });\n        this.email = email;\n        this.key = key;\n        this.keyId = keyId;\n    }\n    /**\n     * Indicates whether the credential requires scopes to be created by calling\n     * createdScoped before use.\n     * @deprecated\n     * @return always false\n     */\n    createScopedRequired() {\n        // JWT Header authentication does not use scopes.\n        messages.warn(messages.JWT_ACCESS_CREATE_SCOPED_DEPRECATED);\n        return false;\n    }\n    /**\n     * Get a non-expired access token, after refreshing if necessary.\n     *\n     * @param authURI The URI being authorized.\n     * @param additionalClaims An object with a set of additional claims to\n     * include in the payload.\n     * @deprecated Please use `getRequestHeaders` instead.\n     * @returns An object that includes the authorization header.\n     */\n    getRequestMetadata(url, additionalClaims) {\n        messages.warn(messages.JWT_ACCESS_GET_REQUEST_METADATA_DEPRECATED);\n        return { headers: this.getRequestHeaders(url, additionalClaims) };\n    }\n    /**\n     * Get a non-expired access token, after refreshing if necessary.\n     *\n     * @param url The URI being authorized.\n     * @param additionalClaims An object with a set of additional claims to\n     * include in the payload.\n     * @returns An object that includes the authorization header.\n     */\n    getRequestHeaders(url, additionalClaims) {\n        const cachedToken = this.cache.get(url);\n        if (cachedToken) {\n            return cachedToken;\n        }\n        const iat = Math.floor(new Date().getTime() / 1000);\n        const exp = iat + 3600; // 3600 seconds = 1 hour\n        // The payload used for signed JWT headers has:\n        // iss == sub == <client email>\n        // aud == <the authorization uri>\n        const defaultClaims = {\n            iss: this.email,\n            sub: this.email,\n            aud: url,\n            exp,\n            iat,\n        };\n        // if additionalClaims are provided, ensure they do not collide with\n        // other required claims.\n        if (additionalClaims) {\n            for (const claim in defaultClaims) {\n                if (additionalClaims[claim]) {\n                    throw new Error(`The '${claim}' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.`);\n                }\n            }\n        }\n        const header = this.keyId\n            ? Object.assign(Object.assign({}, DEFAULT_HEADER), { kid: this.keyId }) : DEFAULT_HEADER;\n        const payload = Object.assign(defaultClaims, additionalClaims);\n        // Sign the jwt and add it to the cache\n        const signedJWT = jws.sign({ header, payload, secret: this.key });\n        const headers = { Authorization: `Bearer ${signedJWT}` };\n        this.cache.set(url, headers);\n        return headers;\n    }\n    /**\n     * Create a JWTAccess credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(r => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                reject(new Error('Must pass in a stream containing the service account auth settings.'));\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('data', chunk => (s += chunk))\n                .on('error', reject)\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (err) {\n                    reject(err);\n                }\n            });\n        });\n    }\n}\nexports.JWTAccess = JWTAccess;\n//# sourceMappingURL=jwtaccess.js.map"]},"metadata":{},"sourceType":"script"}