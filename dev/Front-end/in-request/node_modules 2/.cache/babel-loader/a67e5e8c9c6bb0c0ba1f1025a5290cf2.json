{"ast":null,"code":"/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n\nvar project_management_api_request_1 = require(\"./project-management-api-request\");\n\nvar app_metadata_1 = require(\"./app-metadata\");\n\nvar IosApp =\n/** @class */\nfunction () {\n  function IosApp(appId, requestHandler) {\n    this.appId = appId;\n    this.requestHandler = requestHandler;\n\n    if (!validator.isNonEmptyString(appId)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'appId must be a non-empty string.');\n    }\n\n    this.resourceName = \"projects/-/iosApps/\" + appId;\n  }\n\n  IosApp.prototype.getMetadata = function () {\n    return this.requestHandler.getResource(this.resourceName).then(function (responseData) {\n      project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getMetadata()\\'s responseData must be a non-null object.');\n      var requiredFieldsList = ['name', 'appId', 'projectId', 'bundleId'];\n      requiredFieldsList.forEach(function (requiredField) {\n        project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(responseData[requiredField]), responseData, \"getMetadata()'s responseData.\" + requiredField + \" must be a non-empty string.\");\n      });\n      var metadata = {\n        platform: app_metadata_1.AppPlatform.IOS,\n        resourceName: responseData.name,\n        appId: responseData.appId,\n        displayName: responseData.displayName || null,\n        projectId: responseData.projectId,\n        bundleId: responseData.bundleId\n      };\n      return metadata;\n    });\n  };\n\n  IosApp.prototype.setDisplayName = function (newDisplayName) {\n    return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n  };\n  /**\n   * @return {Promise<string>} A promise that resolves to a UTF-8 XML string, typically intended to\n   *     be written to a plist file.\n   */\n\n\n  IosApp.prototype.getConfig = function () {\n    return this.requestHandler.getConfig(this.resourceName).then(function (responseData) {\n      project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getConfig()\\'s responseData must be a non-null object.');\n      var base64ConfigFileContents = responseData.configFileContents;\n      project_management_api_request_1.assertServerResponse(validator.isBase64String(base64ConfigFileContents), responseData, \"getConfig()'s responseData.configFileContents must be a base64 string.\");\n      return Buffer.from(base64ConfigFileContents, 'base64').toString('utf8');\n    });\n  };\n\n  return IosApp;\n}();\n\nexports.IosApp = IosApp;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/firebase-admin/lib/project-management/ios-app.js"],"names":["Object","defineProperty","exports","value","error_1","require","validator","project_management_api_request_1","app_metadata_1","IosApp","appId","requestHandler","isNonEmptyString","FirebaseProjectManagementError","resourceName","prototype","getMetadata","getResource","then","responseData","assertServerResponse","isNonNullObject","requiredFieldsList","forEach","requiredField","metadata","platform","AppPlatform","IOS","name","displayName","projectId","bundleId","setDisplayName","newDisplayName","getConfig","base64ConfigFileContents","configFileContents","isBase64String","Buffer","from","toString"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar error_1 = require(\"../utils/error\");\nvar validator = require(\"../utils/validator\");\nvar project_management_api_request_1 = require(\"./project-management-api-request\");\nvar app_metadata_1 = require(\"./app-metadata\");\nvar IosApp = /** @class */ (function () {\n    function IosApp(appId, requestHandler) {\n        this.appId = appId;\n        this.requestHandler = requestHandler;\n        if (!validator.isNonEmptyString(appId)) {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'appId must be a non-empty string.');\n        }\n        this.resourceName = \"projects/-/iosApps/\" + appId;\n    }\n    IosApp.prototype.getMetadata = function () {\n        return this.requestHandler.getResource(this.resourceName)\n            .then(function (responseData) {\n            project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getMetadata()\\'s responseData must be a non-null object.');\n            var requiredFieldsList = ['name', 'appId', 'projectId', 'bundleId'];\n            requiredFieldsList.forEach(function (requiredField) {\n                project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(responseData[requiredField]), responseData, \"getMetadata()'s responseData.\" + requiredField + \" must be a non-empty string.\");\n            });\n            var metadata = {\n                platform: app_metadata_1.AppPlatform.IOS,\n                resourceName: responseData.name,\n                appId: responseData.appId,\n                displayName: responseData.displayName || null,\n                projectId: responseData.projectId,\n                bundleId: responseData.bundleId,\n            };\n            return metadata;\n        });\n    };\n    IosApp.prototype.setDisplayName = function (newDisplayName) {\n        return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n    };\n    /**\n     * @return {Promise<string>} A promise that resolves to a UTF-8 XML string, typically intended to\n     *     be written to a plist file.\n     */\n    IosApp.prototype.getConfig = function () {\n        return this.requestHandler.getConfig(this.resourceName)\n            .then(function (responseData) {\n            project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getConfig()\\'s responseData must be a non-null object.');\n            var base64ConfigFileContents = responseData.configFileContents;\n            project_management_api_request_1.assertServerResponse(validator.isBase64String(base64ConfigFileContents), responseData, \"getConfig()'s responseData.configFileContents must be a base64 string.\");\n            return Buffer.from(base64ConfigFileContents, 'base64').toString('utf8');\n        });\n    };\n    return IosApp;\n}());\nexports.IosApp = IosApp;\n"]},"metadata":{},"sourceType":"script"}