{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Provides behavior that supports request bundling.\n */\n\nconst at = require(\"lodash.at\");\n/**\n * Compute the identifier of the `obj`. The objects of the same ID\n * will be bundled together.\n *\n * @param {RequestType} obj - The request object.\n * @param {String[]} discriminatorFields - The array of field names.\n *   A field name may include '.' as a separator, which is used to\n *   indicate object traversal.\n * @return {String|undefined} - the identifier string, or undefined if any\n *   discriminator fields do not exist.\n */\n\n\nfunction computeBundleId(obj, discriminatorFields) {\n  const ids = [];\n  let hasIds = false;\n\n  for (let i = 0; i < discriminatorFields.length; ++i) {\n    const id = at(obj, discriminatorFields[i])[0];\n\n    if (id === undefined) {\n      ids.push(null);\n    } else {\n      hasIds = true;\n      ids.push(id);\n    }\n  }\n\n  if (!hasIds) {\n    return undefined;\n  }\n\n  return JSON.stringify(ids);\n}\n\nexports.computeBundleId = computeBundleId;","map":{"version":3,"sources":["../../../src/bundlingCalls/bundlingUtils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;AAgBA;;;;AAIA,MAAA,EAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAIA;;;;;;;;;;;;;AAWA,SAAgB,eAAhB,CACE,GADF,EAEE,mBAFF,EAE+B;AAE7B,QAAM,GAAG,GAAc,EAAvB;AACA,MAAI,MAAM,GAAG,KAAb;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,mBAAmB,CAAC,MAAxC,EAAgD,EAAE,CAAlD,EAAqD;AACnD,UAAM,EAAE,GAAG,EAAE,CAAC,GAAD,EAA6B,mBAAmB,CAAC,CAAD,CAAhD,CAAF,CAAuD,CAAvD,CAAX;;AACA,QAAI,EAAE,KAAK,SAAX,EAAsB;AACpB,MAAA,GAAG,CAAC,IAAJ,CAAS,IAAT;AACD,KAFD,MAEO;AACL,MAAA,MAAM,GAAG,IAAT;AACA,MAAA,GAAG,CAAC,IAAJ,CAAS,EAAT;AACD;AACF;;AACD,MAAI,CAAC,MAAL,EAAa;AACX,WAAO,SAAP;AACD;;AACD,SAAO,IAAI,CAAC,SAAL,CAAe,GAAf,CAAP;AACD;;AAnBD,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Provides behavior that supports request bundling.\n */\nconst at = require(\"lodash.at\");\n/**\n * Compute the identifier of the `obj`. The objects of the same ID\n * will be bundled together.\n *\n * @param {RequestType} obj - The request object.\n * @param {String[]} discriminatorFields - The array of field names.\n *   A field name may include '.' as a separator, which is used to\n *   indicate object traversal.\n * @return {String|undefined} - the identifier string, or undefined if any\n *   discriminator fields do not exist.\n */\nfunction computeBundleId(obj, discriminatorFields) {\n    const ids = [];\n    let hasIds = false;\n    for (let i = 0; i < discriminatorFields.length; ++i) {\n        const id = at(obj, discriminatorFields[i])[0];\n        if (id === undefined) {\n            ids.push(null);\n        }\n        else {\n            hasIds = true;\n            ids.push(id);\n        }\n    }\n    if (!hasIds) {\n        return undefined;\n    }\n    return JSON.stringify(ids);\n}\nexports.computeBundleId = computeBundleId;\n//# sourceMappingURL=bundlingUtils.js.map"]},"metadata":{},"sourceType":"script"}