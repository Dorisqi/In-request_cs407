{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { colorPropType, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(RangeSelector) {\n  var DocumentedRangeSelector = describe(RangeSelector).availableAt(getAvailableAtBadge('RangeSelector')).description('A control to input a range of values.').usage(\"import { RangeSelector } from 'grommet';\\n<RangeSelector />\").intrinsicElement('div');\n  DocumentedRangeSelector.propTypes = {\n    color: colorPropType.description('What color to use to indicate the selection.'),\n    direction: PropTypes.oneOf(['horizontal', 'vertical']).description('').defaultValue('horizontal'),\n    invert: PropTypes.bool.description('Whether to indicate what has not been selected.'),\n    max: PropTypes.number.description('The maximum value permitted.').defaultValue(100),\n    messages: PropTypes.shape({\n      lower: PropTypes.string,\n      upper: PropTypes.string\n    }).description('Custom messages used by screen readers for accessibility.'),\n    min: PropTypes.number.description('The minimum value permitted.').defaultValue(0),\n    onChange: PropTypes.func.description(\"Function that will be called when the user changes one of the\\n      values. It will be passed an array of two numbers indicating\\n      the new values selected.\"),\n    opacity: PropTypes.oneOfType([PropTypes.oneOf(['weak', 'medium', 'strong']), PropTypes.string, PropTypes.bool]).description('Transparency of the selection indicator.').defaultValue('medium'),\n    round: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'full']), PropTypes.string]).description('How much to round the corners.'),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xxsmall', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'full']), PropTypes.string]).description('How thick to make the selection indicator.').defaultValue('medium'),\n    step: PropTypes.number.description('The step interval between values.').defaultValue(1),\n    values: PropTypes.arrayOf(PropTypes.number).description('The current values.').isRequired\n  };\n  return DocumentedRangeSelector;\n};\nexport var themeDoc = {\n  'global.borderSize': {\n    description: 'The size of the border.',\n    type: 'string',\n    defaultValue: \"{\\n      xsmall: '1px',\\n      small: '2px',\\n      medium: '4px',\\n      large: '12px',\\n      xlarge: '24px,\\n    }\"\n  },\n  'global.colors.border': {\n    description: 'The color for the border.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: {\n      dark: 'rgba(255, 255, 255, 0.33)',\n      light: 'rgba(0, 0, 0, 0.33)'\n    }\n  },\n  'global.colors.control': {\n    description: 'The color for the edge controls.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: '{dark: accent-1, light: brand}'\n  },\n  'global.colors.focus': {\n    description: 'The color of the focus.',\n    type: 'string',\n    defaultValue: 'accent-1'\n  },\n  'global.edgeSize.small': {\n    description: 'The possible sizes for the margin, padding and gap.',\n    type: 'string',\n    defaultValue: '6px'\n  },\n  'rangeSelector.background.invert.color': {\n    description: 'The background color on an invert display.',\n    type: 'string',\n    defaultValue: 'light-4'\n  },\n  'rangeSelector.edge.type': {\n    description: 'The edge control type.',\n    type: \"'bar' | 'disc' | node\",\n    defaultValue: undefined\n  },\n  'global.spacing': {\n    description: 'The size of the edge controls thumb.',\n    type: 'string',\n    defaultValue: '24px'\n  }\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/RangeSelector/doc.js"],"names":["describe","PropTypes","colorPropType","getAvailableAtBadge","doc","RangeSelector","DocumentedRangeSelector","availableAt","description","usage","intrinsicElement","propTypes","color","direction","oneOf","defaultValue","invert","bool","max","number","messages","shape","lower","string","upper","min","onChange","func","opacity","oneOfType","round","size","step","values","arrayOf","isRequired","themeDoc","type","dark","light","undefined"],"mappings":"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","sourcesContent":["import { describe, PropTypes } from 'react-desc';\nimport { colorPropType, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(RangeSelector) {\n  var DocumentedRangeSelector = describe(RangeSelector).availableAt(getAvailableAtBadge('RangeSelector')).description('A control to input a range of values.').usage(\"import { RangeSelector } from 'grommet';\\n<RangeSelector />\").intrinsicElement('div');\n  DocumentedRangeSelector.propTypes = {\n    color: colorPropType.description('What color to use to indicate the selection.'),\n    direction: PropTypes.oneOf(['horizontal', 'vertical']).description('').defaultValue('horizontal'),\n    invert: PropTypes.bool.description('Whether to indicate what has not been selected.'),\n    max: PropTypes.number.description('The maximum value permitted.').defaultValue(100),\n    messages: PropTypes.shape({\n      lower: PropTypes.string,\n      upper: PropTypes.string\n    }).description('Custom messages used by screen readers for accessibility.'),\n    min: PropTypes.number.description('The minimum value permitted.').defaultValue(0),\n    onChange: PropTypes.func.description(\"Function that will be called when the user changes one of the\\n      values. It will be passed an array of two numbers indicating\\n      the new values selected.\"),\n    opacity: PropTypes.oneOfType([PropTypes.oneOf(['weak', 'medium', 'strong']), PropTypes.string, PropTypes.bool]).description('Transparency of the selection indicator.').defaultValue('medium'),\n    round: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'full']), PropTypes.string]).description('How much to round the corners.'),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xxsmall', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'full']), PropTypes.string]).description('How thick to make the selection indicator.').defaultValue('medium'),\n    step: PropTypes.number.description('The step interval between values.').defaultValue(1),\n    values: PropTypes.arrayOf(PropTypes.number).description('The current values.').isRequired\n  };\n  return DocumentedRangeSelector;\n};\nexport var themeDoc = {\n  'global.borderSize': {\n    description: 'The size of the border.',\n    type: 'string',\n    defaultValue: \"{\\n      xsmall: '1px',\\n      small: '2px',\\n      medium: '4px',\\n      large: '12px',\\n      xlarge: '24px,\\n    }\"\n  },\n  'global.colors.border': {\n    description: 'The color for the border.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: {\n      dark: 'rgba(255, 255, 255, 0.33)',\n      light: 'rgba(0, 0, 0, 0.33)'\n    }\n  },\n  'global.colors.control': {\n    description: 'The color for the edge controls.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: '{dark: accent-1, light: brand}'\n  },\n  'global.colors.focus': {\n    description: 'The color of the focus.',\n    type: 'string',\n    defaultValue: 'accent-1'\n  },\n  'global.edgeSize.small': {\n    description: 'The possible sizes for the margin, padding and gap.',\n    type: 'string',\n    defaultValue: '6px'\n  },\n  'rangeSelector.background.invert.color': {\n    description: 'The background color on an invert display.',\n    type: 'string',\n    defaultValue: 'light-4'\n  },\n  'rangeSelector.edge.type': {\n    description: 'The edge control type.',\n    type: \"'bar' | 'disc' | node\",\n    defaultValue: undefined\n  },\n  'global.spacing': {\n    description: 'The size of the edge controls thumb.',\n    type: 'string',\n    defaultValue: '24px'\n  }\n};"]},"metadata":{},"sourceType":"module"}