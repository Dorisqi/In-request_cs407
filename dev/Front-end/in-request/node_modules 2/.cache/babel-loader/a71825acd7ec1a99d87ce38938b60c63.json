{"ast":null,"code":"/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs = require(\"fs\");\n\nvar deep_copy_1 = require(\"./utils/deep-copy\");\n\nvar error_1 = require(\"./utils/error\");\n\nvar firebase_app_1 = require(\"./firebase-app\");\n\nvar credential_1 = require(\"./auth/credential\");\n\nvar validator = require(\"./utils/validator\");\n\nvar DEFAULT_APP_NAME = '[DEFAULT]';\n/**\n * Constant holding the environment variable name with the default config.\n * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n * otherwise it will be assumed to be pointing to a file.\n */\n\nexports.FIREBASE_CONFIG_VAR = 'FIREBASE_CONFIG';\nvar globalAppDefaultCred;\nvar globalCertCreds = {};\nvar globalRefreshTokenCreds = {};\n/**\n * Internals of a FirebaseNamespace instance.\n */\n\nvar FirebaseNamespaceInternals =\n/** @class */\nfunction () {\n  function FirebaseNamespaceInternals(firebase_) {\n    this.firebase_ = firebase_;\n    this.serviceFactories = {};\n    this.apps_ = {};\n    this.appHooks_ = {};\n  }\n  /**\n   * Initializes the FirebaseApp instance.\n   *\n   * @param {FirebaseAppOptions} options Optional options for the FirebaseApp instance. If none present\n   *                             will try to initialize from the FIREBASE_CONFIG environment variable.\n   *                             If the environment variable contains a string that starts with '{'\n   *                             it will be parsed as JSON,\n   *                             otherwise it will be assumed to be pointing to a file.\n   * @param {string} [appName] Optional name of the FirebaseApp instance.\n   *\n   * @return {FirebaseApp} A new FirebaseApp instance.\n   */\n\n\n  FirebaseNamespaceInternals.prototype.initializeApp = function (options, appName) {\n    if (appName === void 0) {\n      appName = DEFAULT_APP_NAME;\n    }\n\n    if (typeof options === 'undefined') {\n      options = this.loadOptionsFromEnvVar();\n      options.credential = credential_1.getApplicationDefault();\n    }\n\n    if (typeof appName !== 'string' || appName === '') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\n    } else if (appName in this.apps_) {\n      if (appName === DEFAULT_APP_NAME) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, 'The default Firebase app already exists. This means you called initializeApp() ' + 'more than once without providing an app name as the second argument. In most cases ' + 'you only need to call initializeApp() once. But if you do want to initialize ' + 'multiple apps, pass a second argument to initializeApp() to give each app a unique ' + 'name.');\n      } else {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, \"Firebase app named \\\"\" + appName + \"\\\" already exists. This means you called initializeApp() \" + 'more than once with the same app name as the second argument. Make sure you provide a ' + 'unique name every time you call initializeApp().');\n      }\n    }\n\n    var app = new firebase_app_1.FirebaseApp(options, appName, this);\n    this.apps_[appName] = app;\n    this.callAppHooks_(app, 'create');\n    return app;\n  };\n  /**\n   * Returns the FirebaseApp instance with the provided name (or the default FirebaseApp instance\n   * if no name is provided).\n   *\n   * @param {string} [appName=DEFAULT_APP_NAME] Optional name of the FirebaseApp instance to return.\n   * @return {FirebaseApp} The FirebaseApp instance which has the provided name.\n   */\n\n\n  FirebaseNamespaceInternals.prototype.app = function (appName) {\n    if (appName === void 0) {\n      appName = DEFAULT_APP_NAME;\n    }\n\n    if (typeof appName !== 'string' || appName === '') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\n    } else if (!(appName in this.apps_)) {\n      var errorMessage = appName === DEFAULT_APP_NAME ? 'The default Firebase app does not exist. ' : \"Firebase app named \\\"\" + appName + \"\\\" does not exist. \";\n      errorMessage += 'Make sure you call initializeApp() before using any of the Firebase services.';\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NO_APP, errorMessage);\n    }\n\n    return this.apps_[appName];\n  };\n\n  Object.defineProperty(FirebaseNamespaceInternals.prototype, \"apps\", {\n    /*\n     * Returns an array of all the non-deleted FirebaseApp instances.\n     *\n     * @return {Array<FirebaseApp>} An array of all the non-deleted FirebaseApp instances\n     */\n    get: function () {\n      var _this = this; // Return a copy so the caller cannot mutate the array\n\n\n      return Object.keys(this.apps_).map(function (appName) {\n        return _this.apps_[appName];\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /*\n   * Removes the specified FirebaseApp instance.\n   *\n   * @param {string} appName The name of the FirebaseApp instance to remove.\n   */\n\n  FirebaseNamespaceInternals.prototype.removeApp = function (appName) {\n    if (typeof appName === 'undefined') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"No Firebase app name provided. App name must be a non-empty string.\");\n    }\n\n    var appToRemove = this.app(appName);\n    this.callAppHooks_(appToRemove, 'delete');\n    delete this.apps_[appName];\n  };\n  /*\n   * Registers a new service on this Firebase namespace.\n   *\n   * @param {string} serviceName The name of the Firebase service to register.\n   * @param {FirebaseServiceFactory} createService A factory method to generate an instance of the Firebase service.\n   * @param {object} [serviceProperties] Optional properties to extend this Firebase namespace with.\n   * @param {AppHook} [appHook] Optional callback that handles app-related events like app creation and deletion.\n   * @return {FirebaseServiceNamespace<FirebaseServiceInterface>} The Firebase service's namespace.\n   */\n\n\n  FirebaseNamespaceInternals.prototype.registerService = function (serviceName, createService, serviceProperties, appHook) {\n    var _this = this;\n\n    var errorMessage;\n\n    if (typeof serviceName === 'undefined') {\n      errorMessage = \"No service name provided. Service name must be a non-empty string.\";\n    } else if (typeof serviceName !== 'string' || serviceName === '') {\n      errorMessage = \"Invalid service name \\\"\" + serviceName + \"\\\" provided. Service name must be a non-empty string.\";\n    } else if (serviceName in this.serviceFactories) {\n      errorMessage = \"Firebase service named \\\"\" + serviceName + \"\\\" has already been registered.\";\n    }\n\n    if (typeof errorMessage !== 'undefined') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, \"INTERNAL ASSERT FAILED: \" + errorMessage);\n    }\n\n    this.serviceFactories[serviceName] = createService;\n\n    if (appHook) {\n      this.appHooks_[serviceName] = appHook;\n    }\n\n    var serviceNamespace; // The service namespace is an accessor function which takes a FirebaseApp instance\n    // or uses the default app if no FirebaseApp instance is provided\n\n    serviceNamespace = function (appArg) {\n      if (typeof appArg === 'undefined') {\n        appArg = _this.app();\n      } // Forward service instance lookup to the FirebaseApp\n\n\n      return appArg[serviceName]();\n    }; // ... and a container for service-level properties.\n\n\n    if (serviceProperties !== undefined) {\n      deep_copy_1.deepExtend(serviceNamespace, serviceProperties);\n    } // Monkey-patch the service namespace onto the Firebase namespace\n\n\n    this.firebase_[serviceName] = serviceNamespace;\n    return serviceNamespace;\n  };\n  /**\n   * Calls the app hooks corresponding to the provided event name for each service within the\n   * provided FirebaseApp instance.\n   *\n   * @param {FirebaseApp} app The FirebaseApp instance whose app hooks to call.\n   * @param {string} eventName The event name representing which app hooks to call.\n   */\n\n\n  FirebaseNamespaceInternals.prototype.callAppHooks_ = function (app, eventName) {\n    var _this = this;\n\n    Object.keys(this.serviceFactories).forEach(function (serviceName) {\n      if (_this.appHooks_[serviceName]) {\n        _this.appHooks_[serviceName](eventName, app);\n      }\n    });\n  };\n  /**\n   * Parse the file pointed to by the FIREBASE_CONFIG_VAR, if it exists.\n   * Or if the FIREBASE_CONFIG_ENV contains a valid JSON object, parse it directly.\n   * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n   * otherwise it will be assumed to be pointing to a file.\n   */\n\n\n  FirebaseNamespaceInternals.prototype.loadOptionsFromEnvVar = function () {\n    var config = process.env[exports.FIREBASE_CONFIG_VAR];\n\n    if (!validator.isNonEmptyString(config)) {\n      return {};\n    }\n\n    try {\n      var contents = config.startsWith('{') ? config : fs.readFileSync(config, 'utf8');\n      return JSON.parse(contents);\n    } catch (error) {\n      // Throw a nicely formed error message if the file contents cannot be parsed\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, 'Failed to parse app options file: ' + error);\n    }\n  };\n\n  return FirebaseNamespaceInternals;\n}();\n\nexports.FirebaseNamespaceInternals = FirebaseNamespaceInternals;\nvar firebaseCredential = {\n  cert: function (serviceAccountPathOrObject, httpAgent) {\n    var stringifiedServiceAccount = JSON.stringify(serviceAccountPathOrObject);\n\n    if (!(stringifiedServiceAccount in globalCertCreds)) {\n      globalCertCreds[stringifiedServiceAccount] = new credential_1.ServiceAccountCredential(serviceAccountPathOrObject, httpAgent);\n    }\n\n    return globalCertCreds[stringifiedServiceAccount];\n  },\n  refreshToken: function (refreshTokenPathOrObject, httpAgent) {\n    var stringifiedRefreshToken = JSON.stringify(refreshTokenPathOrObject);\n\n    if (!(stringifiedRefreshToken in globalRefreshTokenCreds)) {\n      globalRefreshTokenCreds[stringifiedRefreshToken] = new credential_1.RefreshTokenCredential(refreshTokenPathOrObject, httpAgent);\n    }\n\n    return globalRefreshTokenCreds[stringifiedRefreshToken];\n  },\n  applicationDefault: function (httpAgent) {\n    if (typeof globalAppDefaultCred === 'undefined') {\n      globalAppDefaultCred = credential_1.getApplicationDefault(httpAgent);\n    }\n\n    return globalAppDefaultCred;\n  }\n};\n/**\n * Global Firebase context object.\n */\n\nvar FirebaseNamespace =\n/** @class */\nfunction () {\n  /* tslint:enable */\n  function FirebaseNamespace() {\n    // Hack to prevent Babel from modifying the object returned as the default admin namespace.\n\n    /* tslint:disable:variable-name */\n    this.__esModule = true;\n    /* tslint:enable:variable-name */\n\n    this.credential = firebaseCredential;\n    this.SDK_VERSION = '8.9.2';\n    /* tslint:disable */\n    // TODO(jwenger): Database is the only consumer of firebase.Promise. We should update it to use\n    // use the native Promise and then remove this.\n\n    this.Promise = Promise;\n    this.INTERNAL = new FirebaseNamespaceInternals(this);\n  }\n\n  Object.defineProperty(FirebaseNamespace.prototype, \"auth\", {\n    /**\n     * Gets the `Auth` service namespace. The returned namespace can be used to get the\n     * `Auth` service for the default app or an explicitly specified app.\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).auth();\n      };\n\n      var auth = require('./auth/auth').Auth;\n\n      return Object.assign(fn, {\n        Auth: auth\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"database\", {\n    /**\n     * Gets the `Database` service namespace. The returned namespace can be used to get the\n     * `Database` service for the default app or an explicitly specified app.\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).database();\n      };\n\n      return Object.assign(fn, require('@firebase/database'));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"messaging\", {\n    /**\n     * Gets the `Messaging` service namespace. The returned namespace can be used to get the\n     * `Messaging` service for the default app or an explicitly specified app.\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).messaging();\n      };\n\n      var messaging = require('./messaging/messaging').Messaging;\n\n      return Object.assign(fn, {\n        Messaging: messaging\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"storage\", {\n    /**\n     * Gets the `Storage` service namespace. The returned namespace can be used to get the\n     * `Storage` service for the default app or an explicitly specified app.\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).storage();\n      };\n\n      var storage = require('./storage/storage').Storage;\n\n      return Object.assign(fn, {\n        Storage: storage\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"firestore\", {\n    /**\n     * Gets the `Firestore` service namespace. The returned namespace can be used to get the\n     * `Firestore` service for the default app or an explicitly specified app.\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).firestore();\n      };\n\n      var firestore = require('@google-cloud/firestore');\n\n      fn = Object.assign(fn, firestore.Firestore); // `v1beta1` and `v1` are lazy-loaded in the Firestore SDK. We use the same trick here\n      // to avoid triggering this lazy-loading upon initialization.\n\n      Object.defineProperty(fn, 'v1beta1', {\n        get: function () {\n          return firestore.v1beta1;\n        }\n      });\n      Object.defineProperty(fn, 'v1', {\n        get: function () {\n          return firestore.v1;\n        }\n      });\n      return fn;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"instanceId\", {\n    /**\n     * Gets the `InstanceId` service namespace. The returned namespace can be used to get the\n     * `Instance` service for the default app or an explicitly specified app.\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).instanceId();\n      };\n\n      var instanceId = require('./instance-id/instance-id').InstanceId;\n\n      return Object.assign(fn, {\n        InstanceId: instanceId\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"projectManagement\", {\n    /**\n     * Gets the `ProjectManagement` service namespace. The returned namespace can be used to get the\n     * `ProjectManagement` service for the default app or an explicitly specified app.\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).projectManagement();\n      };\n\n      var projectManagement = require('./project-management/project-management').ProjectManagement;\n\n      return Object.assign(fn, {\n        ProjectManagement: projectManagement\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"securityRules\", {\n    /**\n     * Gets the `SecurityRules` service namespace. The returned namespace can be used to get the\n     * `SecurityRules` service for the default app or an explicitly specified app.\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).securityRules();\n      };\n\n      var securityRules = require('./security-rules/security-rules').SecurityRules;\n\n      return Object.assign(fn, {\n        SecurityRules: securityRules\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Initializes the FirebaseApp instance.\n   *\n   * @param {FirebaseAppOptions} [options] Optional options for the FirebaseApp instance.\n   *   If none present will try to initialize from the FIREBASE_CONFIG environment variable.\n   *   If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n   *   otherwise it will be assumed to be pointing to a file.\n   * @param {string} [appName] Optional name of the FirebaseApp instance.\n   *\n   * @return {FirebaseApp} A new FirebaseApp instance.\n   */\n\n  FirebaseNamespace.prototype.initializeApp = function (options, appName) {\n    return this.INTERNAL.initializeApp(options, appName);\n  };\n  /**\n   * Returns the FirebaseApp instance with the provided name (or the default FirebaseApp instance\n   * if no name is provided).\n   *\n   * @param {string} [appName] Optional name of the FirebaseApp instance to return.\n   * @return {FirebaseApp} The FirebaseApp instance which has the provided name.\n   */\n\n\n  FirebaseNamespace.prototype.app = function (appName) {\n    return this.INTERNAL.app(appName);\n  };\n\n  Object.defineProperty(FirebaseNamespace.prototype, \"apps\", {\n    /*\n     * Returns an array of all the non-deleted FirebaseApp instances.\n     *\n     * @return {Array<FirebaseApp>} An array of all the non-deleted FirebaseApp instances\n     */\n    get: function () {\n      return this.INTERNAL.apps;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  FirebaseNamespace.prototype.ensureApp = function (app) {\n    if (typeof app === 'undefined') {\n      app = this.app();\n    }\n\n    return app;\n  };\n\n  return FirebaseNamespace;\n}();\n\nexports.FirebaseNamespace = FirebaseNamespace;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/firebase-admin/lib/firebase-namespace.js"],"names":["Object","defineProperty","exports","value","fs","require","deep_copy_1","error_1","firebase_app_1","credential_1","validator","DEFAULT_APP_NAME","FIREBASE_CONFIG_VAR","globalAppDefaultCred","globalCertCreds","globalRefreshTokenCreds","FirebaseNamespaceInternals","firebase_","serviceFactories","apps_","appHooks_","prototype","initializeApp","options","appName","loadOptionsFromEnvVar","credential","getApplicationDefault","FirebaseAppError","AppErrorCodes","INVALID_APP_NAME","DUPLICATE_APP","app","FirebaseApp","callAppHooks_","errorMessage","NO_APP","get","_this","keys","map","enumerable","configurable","removeApp","appToRemove","registerService","serviceName","createService","serviceProperties","appHook","INTERNAL_ERROR","serviceNamespace","appArg","undefined","deepExtend","eventName","forEach","config","process","env","isNonEmptyString","contents","startsWith","readFileSync","JSON","parse","error","INVALID_APP_OPTIONS","firebaseCredential","cert","serviceAccountPathOrObject","httpAgent","stringifiedServiceAccount","stringify","ServiceAccountCredential","refreshToken","refreshTokenPathOrObject","stringifiedRefreshToken","RefreshTokenCredential","applicationDefault","FirebaseNamespace","__esModule","SDK_VERSION","Promise","INTERNAL","fn","ensureApp","auth","Auth","assign","database","messaging","Messaging","storage","Storage","firestore","Firestore","v1beta1","v1","instanceId","InstanceId","projectManagement","ProjectManagement","securityRules","SecurityRules","apps"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs = require(\"fs\");\nvar deep_copy_1 = require(\"./utils/deep-copy\");\nvar error_1 = require(\"./utils/error\");\nvar firebase_app_1 = require(\"./firebase-app\");\nvar credential_1 = require(\"./auth/credential\");\nvar validator = require(\"./utils/validator\");\nvar DEFAULT_APP_NAME = '[DEFAULT]';\n/**\n * Constant holding the environment variable name with the default config.\n * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n * otherwise it will be assumed to be pointing to a file.\n */\nexports.FIREBASE_CONFIG_VAR = 'FIREBASE_CONFIG';\nvar globalAppDefaultCred;\nvar globalCertCreds = {};\nvar globalRefreshTokenCreds = {};\n/**\n * Internals of a FirebaseNamespace instance.\n */\nvar FirebaseNamespaceInternals = /** @class */ (function () {\n    function FirebaseNamespaceInternals(firebase_) {\n        this.firebase_ = firebase_;\n        this.serviceFactories = {};\n        this.apps_ = {};\n        this.appHooks_ = {};\n    }\n    /**\n     * Initializes the FirebaseApp instance.\n     *\n     * @param {FirebaseAppOptions} options Optional options for the FirebaseApp instance. If none present\n     *                             will try to initialize from the FIREBASE_CONFIG environment variable.\n     *                             If the environment variable contains a string that starts with '{'\n     *                             it will be parsed as JSON,\n     *                             otherwise it will be assumed to be pointing to a file.\n     * @param {string} [appName] Optional name of the FirebaseApp instance.\n     *\n     * @return {FirebaseApp} A new FirebaseApp instance.\n     */\n    FirebaseNamespaceInternals.prototype.initializeApp = function (options, appName) {\n        if (appName === void 0) { appName = DEFAULT_APP_NAME; }\n        if (typeof options === 'undefined') {\n            options = this.loadOptionsFromEnvVar();\n            options.credential = credential_1.getApplicationDefault();\n        }\n        if (typeof appName !== 'string' || appName === '') {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\n        }\n        else if (appName in this.apps_) {\n            if (appName === DEFAULT_APP_NAME) {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, 'The default Firebase app already exists. This means you called initializeApp() ' +\n                    'more than once without providing an app name as the second argument. In most cases ' +\n                    'you only need to call initializeApp() once. But if you do want to initialize ' +\n                    'multiple apps, pass a second argument to initializeApp() to give each app a unique ' +\n                    'name.');\n            }\n            else {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, \"Firebase app named \\\"\" + appName + \"\\\" already exists. This means you called initializeApp() \" +\n                    'more than once with the same app name as the second argument. Make sure you provide a ' +\n                    'unique name every time you call initializeApp().');\n            }\n        }\n        var app = new firebase_app_1.FirebaseApp(options, appName, this);\n        this.apps_[appName] = app;\n        this.callAppHooks_(app, 'create');\n        return app;\n    };\n    /**\n     * Returns the FirebaseApp instance with the provided name (or the default FirebaseApp instance\n     * if no name is provided).\n     *\n     * @param {string} [appName=DEFAULT_APP_NAME] Optional name of the FirebaseApp instance to return.\n     * @return {FirebaseApp} The FirebaseApp instance which has the provided name.\n     */\n    FirebaseNamespaceInternals.prototype.app = function (appName) {\n        if (appName === void 0) { appName = DEFAULT_APP_NAME; }\n        if (typeof appName !== 'string' || appName === '') {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\n        }\n        else if (!(appName in this.apps_)) {\n            var errorMessage = (appName === DEFAULT_APP_NAME)\n                ? 'The default Firebase app does not exist. ' : \"Firebase app named \\\"\" + appName + \"\\\" does not exist. \";\n            errorMessage += 'Make sure you call initializeApp() before using any of the Firebase services.';\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NO_APP, errorMessage);\n        }\n        return this.apps_[appName];\n    };\n    Object.defineProperty(FirebaseNamespaceInternals.prototype, \"apps\", {\n        /*\n         * Returns an array of all the non-deleted FirebaseApp instances.\n         *\n         * @return {Array<FirebaseApp>} An array of all the non-deleted FirebaseApp instances\n         */\n        get: function () {\n            var _this = this;\n            // Return a copy so the caller cannot mutate the array\n            return Object.keys(this.apps_).map(function (appName) { return _this.apps_[appName]; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /*\n     * Removes the specified FirebaseApp instance.\n     *\n     * @param {string} appName The name of the FirebaseApp instance to remove.\n     */\n    FirebaseNamespaceInternals.prototype.removeApp = function (appName) {\n        if (typeof appName === 'undefined') {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"No Firebase app name provided. App name must be a non-empty string.\");\n        }\n        var appToRemove = this.app(appName);\n        this.callAppHooks_(appToRemove, 'delete');\n        delete this.apps_[appName];\n    };\n    /*\n     * Registers a new service on this Firebase namespace.\n     *\n     * @param {string} serviceName The name of the Firebase service to register.\n     * @param {FirebaseServiceFactory} createService A factory method to generate an instance of the Firebase service.\n     * @param {object} [serviceProperties] Optional properties to extend this Firebase namespace with.\n     * @param {AppHook} [appHook] Optional callback that handles app-related events like app creation and deletion.\n     * @return {FirebaseServiceNamespace<FirebaseServiceInterface>} The Firebase service's namespace.\n     */\n    FirebaseNamespaceInternals.prototype.registerService = function (serviceName, createService, serviceProperties, appHook) {\n        var _this = this;\n        var errorMessage;\n        if (typeof serviceName === 'undefined') {\n            errorMessage = \"No service name provided. Service name must be a non-empty string.\";\n        }\n        else if (typeof serviceName !== 'string' || serviceName === '') {\n            errorMessage = \"Invalid service name \\\"\" + serviceName + \"\\\" provided. Service name must be a non-empty string.\";\n        }\n        else if (serviceName in this.serviceFactories) {\n            errorMessage = \"Firebase service named \\\"\" + serviceName + \"\\\" has already been registered.\";\n        }\n        if (typeof errorMessage !== 'undefined') {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, \"INTERNAL ASSERT FAILED: \" + errorMessage);\n        }\n        this.serviceFactories[serviceName] = createService;\n        if (appHook) {\n            this.appHooks_[serviceName] = appHook;\n        }\n        var serviceNamespace;\n        // The service namespace is an accessor function which takes a FirebaseApp instance\n        // or uses the default app if no FirebaseApp instance is provided\n        serviceNamespace = function (appArg) {\n            if (typeof appArg === 'undefined') {\n                appArg = _this.app();\n            }\n            // Forward service instance lookup to the FirebaseApp\n            return appArg[serviceName]();\n        };\n        // ... and a container for service-level properties.\n        if (serviceProperties !== undefined) {\n            deep_copy_1.deepExtend(serviceNamespace, serviceProperties);\n        }\n        // Monkey-patch the service namespace onto the Firebase namespace\n        this.firebase_[serviceName] = serviceNamespace;\n        return serviceNamespace;\n    };\n    /**\n     * Calls the app hooks corresponding to the provided event name for each service within the\n     * provided FirebaseApp instance.\n     *\n     * @param {FirebaseApp} app The FirebaseApp instance whose app hooks to call.\n     * @param {string} eventName The event name representing which app hooks to call.\n     */\n    FirebaseNamespaceInternals.prototype.callAppHooks_ = function (app, eventName) {\n        var _this = this;\n        Object.keys(this.serviceFactories).forEach(function (serviceName) {\n            if (_this.appHooks_[serviceName]) {\n                _this.appHooks_[serviceName](eventName, app);\n            }\n        });\n    };\n    /**\n     * Parse the file pointed to by the FIREBASE_CONFIG_VAR, if it exists.\n     * Or if the FIREBASE_CONFIG_ENV contains a valid JSON object, parse it directly.\n     * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n     * otherwise it will be assumed to be pointing to a file.\n     */\n    FirebaseNamespaceInternals.prototype.loadOptionsFromEnvVar = function () {\n        var config = process.env[exports.FIREBASE_CONFIG_VAR];\n        if (!validator.isNonEmptyString(config)) {\n            return {};\n        }\n        try {\n            var contents = config.startsWith('{') ? config : fs.readFileSync(config, 'utf8');\n            return JSON.parse(contents);\n        }\n        catch (error) {\n            // Throw a nicely formed error message if the file contents cannot be parsed\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, 'Failed to parse app options file: ' + error);\n        }\n    };\n    return FirebaseNamespaceInternals;\n}());\nexports.FirebaseNamespaceInternals = FirebaseNamespaceInternals;\nvar firebaseCredential = {\n    cert: function (serviceAccountPathOrObject, httpAgent) {\n        var stringifiedServiceAccount = JSON.stringify(serviceAccountPathOrObject);\n        if (!(stringifiedServiceAccount in globalCertCreds)) {\n            globalCertCreds[stringifiedServiceAccount] = new credential_1.ServiceAccountCredential(serviceAccountPathOrObject, httpAgent);\n        }\n        return globalCertCreds[stringifiedServiceAccount];\n    },\n    refreshToken: function (refreshTokenPathOrObject, httpAgent) {\n        var stringifiedRefreshToken = JSON.stringify(refreshTokenPathOrObject);\n        if (!(stringifiedRefreshToken in globalRefreshTokenCreds)) {\n            globalRefreshTokenCreds[stringifiedRefreshToken] = new credential_1.RefreshTokenCredential(refreshTokenPathOrObject, httpAgent);\n        }\n        return globalRefreshTokenCreds[stringifiedRefreshToken];\n    },\n    applicationDefault: function (httpAgent) {\n        if (typeof globalAppDefaultCred === 'undefined') {\n            globalAppDefaultCred = credential_1.getApplicationDefault(httpAgent);\n        }\n        return globalAppDefaultCred;\n    },\n};\n/**\n * Global Firebase context object.\n */\nvar FirebaseNamespace = /** @class */ (function () {\n    /* tslint:enable */\n    function FirebaseNamespace() {\n        // Hack to prevent Babel from modifying the object returned as the default admin namespace.\n        /* tslint:disable:variable-name */\n        this.__esModule = true;\n        /* tslint:enable:variable-name */\n        this.credential = firebaseCredential;\n        this.SDK_VERSION = '8.9.2';\n        /* tslint:disable */\n        // TODO(jwenger): Database is the only consumer of firebase.Promise. We should update it to use\n        // use the native Promise and then remove this.\n        this.Promise = Promise;\n        this.INTERNAL = new FirebaseNamespaceInternals(this);\n    }\n    Object.defineProperty(FirebaseNamespace.prototype, \"auth\", {\n        /**\n         * Gets the `Auth` service namespace. The returned namespace can be used to get the\n         * `Auth` service for the default app or an explicitly specified app.\n         */\n        get: function () {\n            var _this = this;\n            var fn = function (app) {\n                return _this.ensureApp(app).auth();\n            };\n            var auth = require('./auth/auth').Auth;\n            return Object.assign(fn, { Auth: auth });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FirebaseNamespace.prototype, \"database\", {\n        /**\n         * Gets the `Database` service namespace. The returned namespace can be used to get the\n         * `Database` service for the default app or an explicitly specified app.\n         */\n        get: function () {\n            var _this = this;\n            var fn = function (app) {\n                return _this.ensureApp(app).database();\n            };\n            return Object.assign(fn, require('@firebase/database'));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FirebaseNamespace.prototype, \"messaging\", {\n        /**\n         * Gets the `Messaging` service namespace. The returned namespace can be used to get the\n         * `Messaging` service for the default app or an explicitly specified app.\n         */\n        get: function () {\n            var _this = this;\n            var fn = function (app) {\n                return _this.ensureApp(app).messaging();\n            };\n            var messaging = require('./messaging/messaging').Messaging;\n            return Object.assign(fn, { Messaging: messaging });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FirebaseNamespace.prototype, \"storage\", {\n        /**\n         * Gets the `Storage` service namespace. The returned namespace can be used to get the\n         * `Storage` service for the default app or an explicitly specified app.\n         */\n        get: function () {\n            var _this = this;\n            var fn = function (app) {\n                return _this.ensureApp(app).storage();\n            };\n            var storage = require('./storage/storage').Storage;\n            return Object.assign(fn, { Storage: storage });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FirebaseNamespace.prototype, \"firestore\", {\n        /**\n         * Gets the `Firestore` service namespace. The returned namespace can be used to get the\n         * `Firestore` service for the default app or an explicitly specified app.\n         */\n        get: function () {\n            var _this = this;\n            var fn = function (app) {\n                return _this.ensureApp(app).firestore();\n            };\n            var firestore = require('@google-cloud/firestore');\n            fn = Object.assign(fn, firestore.Firestore);\n            // `v1beta1` and `v1` are lazy-loaded in the Firestore SDK. We use the same trick here\n            // to avoid triggering this lazy-loading upon initialization.\n            Object.defineProperty(fn, 'v1beta1', {\n                get: function () {\n                    return firestore.v1beta1;\n                },\n            });\n            Object.defineProperty(fn, 'v1', {\n                get: function () {\n                    return firestore.v1;\n                },\n            });\n            return fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FirebaseNamespace.prototype, \"instanceId\", {\n        /**\n         * Gets the `InstanceId` service namespace. The returned namespace can be used to get the\n         * `Instance` service for the default app or an explicitly specified app.\n         */\n        get: function () {\n            var _this = this;\n            var fn = function (app) {\n                return _this.ensureApp(app).instanceId();\n            };\n            var instanceId = require('./instance-id/instance-id').InstanceId;\n            return Object.assign(fn, { InstanceId: instanceId });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FirebaseNamespace.prototype, \"projectManagement\", {\n        /**\n         * Gets the `ProjectManagement` service namespace. The returned namespace can be used to get the\n         * `ProjectManagement` service for the default app or an explicitly specified app.\n         */\n        get: function () {\n            var _this = this;\n            var fn = function (app) {\n                return _this.ensureApp(app).projectManagement();\n            };\n            var projectManagement = require('./project-management/project-management').ProjectManagement;\n            return Object.assign(fn, { ProjectManagement: projectManagement });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FirebaseNamespace.prototype, \"securityRules\", {\n        /**\n         * Gets the `SecurityRules` service namespace. The returned namespace can be used to get the\n         * `SecurityRules` service for the default app or an explicitly specified app.\n         */\n        get: function () {\n            var _this = this;\n            var fn = function (app) {\n                return _this.ensureApp(app).securityRules();\n            };\n            var securityRules = require('./security-rules/security-rules').SecurityRules;\n            return Object.assign(fn, { SecurityRules: securityRules });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Initializes the FirebaseApp instance.\n     *\n     * @param {FirebaseAppOptions} [options] Optional options for the FirebaseApp instance.\n     *   If none present will try to initialize from the FIREBASE_CONFIG environment variable.\n     *   If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n     *   otherwise it will be assumed to be pointing to a file.\n     * @param {string} [appName] Optional name of the FirebaseApp instance.\n     *\n     * @return {FirebaseApp} A new FirebaseApp instance.\n     */\n    FirebaseNamespace.prototype.initializeApp = function (options, appName) {\n        return this.INTERNAL.initializeApp(options, appName);\n    };\n    /**\n     * Returns the FirebaseApp instance with the provided name (or the default FirebaseApp instance\n     * if no name is provided).\n     *\n     * @param {string} [appName] Optional name of the FirebaseApp instance to return.\n     * @return {FirebaseApp} The FirebaseApp instance which has the provided name.\n     */\n    FirebaseNamespace.prototype.app = function (appName) {\n        return this.INTERNAL.app(appName);\n    };\n    Object.defineProperty(FirebaseNamespace.prototype, \"apps\", {\n        /*\n         * Returns an array of all the non-deleted FirebaseApp instances.\n         *\n         * @return {Array<FirebaseApp>} An array of all the non-deleted FirebaseApp instances\n         */\n        get: function () {\n            return this.INTERNAL.apps;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FirebaseNamespace.prototype.ensureApp = function (app) {\n        if (typeof app === 'undefined') {\n            app = this.app();\n        }\n        return app;\n    };\n    return FirebaseNamespace;\n}());\nexports.FirebaseNamespace = FirebaseNamespace;\n"]},"metadata":{},"sourceType":"script"}