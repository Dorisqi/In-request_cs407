{"ast":null,"code":"/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar url = require(\"url\");\n/**\n * Validates that a value is a byte buffer.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is byte buffer or not.\n */\n\n\nfunction isBuffer(value) {\n  return value instanceof Buffer;\n}\n\nexports.isBuffer = isBuffer;\n/**\n * Validates that a value is an array.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is an array or not.\n */\n\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n\nexports.isArray = isArray;\n/**\n * Validates that a value is a non-empty array.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a non-empty array or not.\n */\n\nfunction isNonEmptyArray(value) {\n  return isArray(value) && value.length !== 0;\n}\n\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Validates that a value is a boolean.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a boolean or not.\n */\n\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\n\nexports.isBoolean = isBoolean;\n/**\n * Validates that a value is a number.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a number or not.\n */\n\nfunction isNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n\nexports.isNumber = isNumber;\n/**\n * Validates that a value is a string.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a string or not.\n */\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nexports.isString = isString;\n/**\n * Validates that a value is a base64 string.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a base64 string or not.\n */\n\nfunction isBase64String(value) {\n  if (!isString(value)) {\n    return false;\n  }\n\n  return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(value);\n}\n\nexports.isBase64String = isBase64String;\n/**\n * Validates that a value is a non-empty string.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a non-empty string or not.\n */\n\nfunction isNonEmptyString(value) {\n  return isString(value) && value !== '';\n}\n\nexports.isNonEmptyString = isNonEmptyString;\n/**\n * Validates that a value is a nullable object.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is an object or not.\n */\n\nfunction isObject(value) {\n  return typeof value === 'object' && !isArray(value);\n}\n\nexports.isObject = isObject;\n/**\n * Validates that a value is a non-null object.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a non-null object or not.\n */\n\nfunction isNonNullObject(value) {\n  return isObject(value) && value !== null;\n}\n\nexports.isNonNullObject = isNonNullObject;\n/**\n * Validates that a string is a valid Firebase Auth uid.\n *\n * @param {any} uid The string to validate.\n * @return {boolean} Whether the string is a valid Firebase Auth uid.\n */\n\nfunction isUid(uid) {\n  return typeof uid === 'string' && uid.length > 0 && uid.length <= 128;\n}\n\nexports.isUid = isUid;\n/**\n * Validates that a string is a valid Firebase Auth password.\n *\n * @param {any} password The password string to validate.\n * @return {boolean} Whether the string is a valid Firebase Auth password.\n */\n\nfunction isPassword(password) {\n  // A password must be a string of at least 6 characters.\n  return typeof password === 'string' && password.length >= 6;\n}\n\nexports.isPassword = isPassword;\n/**\n * Validates that a string is a valid email.\n *\n * @param {any} email The string to validate.\n * @return {boolean} Whether the string is valid email or not.\n */\n\nfunction isEmail(email) {\n  if (typeof email !== 'string') {\n    return false;\n  } // There must at least one character before the @ symbol and another after.\n\n\n  var re = /^[^@]+@[^@]+$/;\n  return re.test(email);\n}\n\nexports.isEmail = isEmail;\n/**\n * Validates that a string is a valid phone number.\n *\n * @param {any} phoneNumber The string to validate.\n * @return {boolean} Whether the string is a valid phone number or not.\n */\n\nfunction isPhoneNumber(phoneNumber) {\n  if (typeof phoneNumber !== 'string') {\n    return false;\n  } // Phone number validation is very lax here. Backend will enforce E.164\n  // spec compliance and will normalize accordingly.\n  // The phone number string must be non-empty and starts with a plus sign.\n\n\n  var re1 = /^\\+/; // The phone number string must contain at least one alphanumeric character.\n\n  var re2 = /[\\da-zA-Z]+/;\n  return re1.test(phoneNumber) && re2.test(phoneNumber);\n}\n\nexports.isPhoneNumber = isPhoneNumber;\n/**\n * Validates that a string is a valid web URL.\n *\n * @param {any} urlStr The string to validate.\n * @return {boolean} Whether the string is valid web URL or not.\n */\n\nfunction isURL(urlStr) {\n  if (typeof urlStr !== 'string') {\n    return false;\n  } // Lookup illegal characters.\n\n\n  var re = /[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i;\n\n  if (re.test(urlStr)) {\n    return false;\n  }\n\n  try {\n    var uri = url.parse(urlStr);\n    var scheme = uri.protocol;\n    var slashes = uri.slashes;\n    var hostname = uri.hostname;\n    var pathname = uri.pathname;\n\n    if (scheme !== 'http:' && scheme !== 'https:' || !slashes) {\n      return false;\n    } // Validate hostname: Can contain letters, numbers, underscore and dashes separated by a dot.\n    // Each zone must not start with a hyphen or underscore.\n\n\n    if (!hostname || !/^[a-zA-Z0-9]+[\\w\\-]*([\\.]?[a-zA-Z0-9]+[\\w\\-]*)*$/.test(hostname)) {\n      return false;\n    } // Allow for pathnames: (/chars+)*/?\n    // Where chars can be a combination of: a-z A-Z 0-9 - _ . ~ ! $ & ' ( ) * + , ; = : @ %\n\n\n    var pathnameRe = /^(\\/[\\w\\-\\.\\~\\!\\$\\'\\(\\)\\*\\+\\,\\;\\=\\:\\@\\%]+)*\\/?$/; // Validate pathname.\n\n    if (pathname && pathname !== '/' && !pathnameRe.test(pathname)) {\n      return false;\n    } // Allow any query string and hash as long as no invalid character is used.\n\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isURL = isURL;\n/**\n * Validates that the provided topic is a valid FCM topic name.\n *\n * @param {any} topic The topic to validate.\n * @return {boolean} Whether the provided topic is a valid FCM topic name.\n */\n\nfunction isTopic(topic) {\n  if (typeof topic !== 'string') {\n    return false;\n  }\n\n  var VALID_TOPIC_REGEX = /^(\\/topics\\/)?(private\\/)?[a-zA-Z0-9-_.~%]+$/;\n  return VALID_TOPIC_REGEX.test(topic);\n}\n\nexports.isTopic = isTopic;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/firebase-admin/lib/utils/validator.js"],"names":["Object","defineProperty","exports","value","url","require","isBuffer","Buffer","isArray","Array","isNonEmptyArray","length","isBoolean","isNumber","isNaN","isString","isBase64String","test","isNonEmptyString","isObject","isNonNullObject","isUid","uid","isPassword","password","isEmail","email","re","isPhoneNumber","phoneNumber","re1","re2","isURL","urlStr","uri","parse","scheme","protocol","slashes","hostname","pathname","pathnameRe","e","isTopic","topic","VALID_TOPIC_REGEX"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar url = require(\"url\");\n/**\n * Validates that a value is a byte buffer.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is byte buffer or not.\n */\nfunction isBuffer(value) {\n    return value instanceof Buffer;\n}\nexports.isBuffer = isBuffer;\n/**\n * Validates that a value is an array.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is an array or not.\n */\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nexports.isArray = isArray;\n/**\n * Validates that a value is a non-empty array.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a non-empty array or not.\n */\nfunction isNonEmptyArray(value) {\n    return isArray(value) && value.length !== 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Validates that a value is a boolean.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a boolean or not.\n */\nfunction isBoolean(value) {\n    return typeof value === 'boolean';\n}\nexports.isBoolean = isBoolean;\n/**\n * Validates that a value is a number.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a number or not.\n */\nfunction isNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n}\nexports.isNumber = isNumber;\n/**\n * Validates that a value is a string.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a string or not.\n */\nfunction isString(value) {\n    return typeof value === 'string';\n}\nexports.isString = isString;\n/**\n * Validates that a value is a base64 string.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a base64 string or not.\n */\nfunction isBase64String(value) {\n    if (!isString(value)) {\n        return false;\n    }\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(value);\n}\nexports.isBase64String = isBase64String;\n/**\n * Validates that a value is a non-empty string.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a non-empty string or not.\n */\nfunction isNonEmptyString(value) {\n    return isString(value) && value !== '';\n}\nexports.isNonEmptyString = isNonEmptyString;\n/**\n * Validates that a value is a nullable object.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is an object or not.\n */\nfunction isObject(value) {\n    return typeof value === 'object' && !isArray(value);\n}\nexports.isObject = isObject;\n/**\n * Validates that a value is a non-null object.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a non-null object or not.\n */\nfunction isNonNullObject(value) {\n    return isObject(value) && value !== null;\n}\nexports.isNonNullObject = isNonNullObject;\n/**\n * Validates that a string is a valid Firebase Auth uid.\n *\n * @param {any} uid The string to validate.\n * @return {boolean} Whether the string is a valid Firebase Auth uid.\n */\nfunction isUid(uid) {\n    return typeof uid === 'string' && uid.length > 0 && uid.length <= 128;\n}\nexports.isUid = isUid;\n/**\n * Validates that a string is a valid Firebase Auth password.\n *\n * @param {any} password The password string to validate.\n * @return {boolean} Whether the string is a valid Firebase Auth password.\n */\nfunction isPassword(password) {\n    // A password must be a string of at least 6 characters.\n    return typeof password === 'string' && password.length >= 6;\n}\nexports.isPassword = isPassword;\n/**\n * Validates that a string is a valid email.\n *\n * @param {any} email The string to validate.\n * @return {boolean} Whether the string is valid email or not.\n */\nfunction isEmail(email) {\n    if (typeof email !== 'string') {\n        return false;\n    }\n    // There must at least one character before the @ symbol and another after.\n    var re = /^[^@]+@[^@]+$/;\n    return re.test(email);\n}\nexports.isEmail = isEmail;\n/**\n * Validates that a string is a valid phone number.\n *\n * @param {any} phoneNumber The string to validate.\n * @return {boolean} Whether the string is a valid phone number or not.\n */\nfunction isPhoneNumber(phoneNumber) {\n    if (typeof phoneNumber !== 'string') {\n        return false;\n    }\n    // Phone number validation is very lax here. Backend will enforce E.164\n    // spec compliance and will normalize accordingly.\n    // The phone number string must be non-empty and starts with a plus sign.\n    var re1 = /^\\+/;\n    // The phone number string must contain at least one alphanumeric character.\n    var re2 = /[\\da-zA-Z]+/;\n    return re1.test(phoneNumber) && re2.test(phoneNumber);\n}\nexports.isPhoneNumber = isPhoneNumber;\n/**\n * Validates that a string is a valid web URL.\n *\n * @param {any} urlStr The string to validate.\n * @return {boolean} Whether the string is valid web URL or not.\n */\nfunction isURL(urlStr) {\n    if (typeof urlStr !== 'string') {\n        return false;\n    }\n    // Lookup illegal characters.\n    var re = /[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i;\n    if (re.test(urlStr)) {\n        return false;\n    }\n    try {\n        var uri = url.parse(urlStr);\n        var scheme = uri.protocol;\n        var slashes = uri.slashes;\n        var hostname = uri.hostname;\n        var pathname = uri.pathname;\n        if ((scheme !== 'http:' && scheme !== 'https:') || !slashes) {\n            return false;\n        }\n        // Validate hostname: Can contain letters, numbers, underscore and dashes separated by a dot.\n        // Each zone must not start with a hyphen or underscore.\n        if (!hostname || !/^[a-zA-Z0-9]+[\\w\\-]*([\\.]?[a-zA-Z0-9]+[\\w\\-]*)*$/.test(hostname)) {\n            return false;\n        }\n        // Allow for pathnames: (/chars+)*/?\n        // Where chars can be a combination of: a-z A-Z 0-9 - _ . ~ ! $ & ' ( ) * + , ; = : @ %\n        var pathnameRe = /^(\\/[\\w\\-\\.\\~\\!\\$\\'\\(\\)\\*\\+\\,\\;\\=\\:\\@\\%]+)*\\/?$/;\n        // Validate pathname.\n        if (pathname &&\n            pathname !== '/' &&\n            !pathnameRe.test(pathname)) {\n            return false;\n        }\n        // Allow any query string and hash as long as no invalid character is used.\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.isURL = isURL;\n/**\n * Validates that the provided topic is a valid FCM topic name.\n *\n * @param {any} topic The topic to validate.\n * @return {boolean} Whether the provided topic is a valid FCM topic name.\n */\nfunction isTopic(topic) {\n    if (typeof topic !== 'string') {\n        return false;\n    }\n    var VALID_TOPIC_REGEX = /^(\\/topics\\/)?(private\\/)?[a-zA-Z0-9-_.~%]+$/;\n    return VALID_TOPIC_REGEX.test(topic);\n}\nexports.isTopic = isTopic;\n"]},"metadata":{},"sourceType":"script"}