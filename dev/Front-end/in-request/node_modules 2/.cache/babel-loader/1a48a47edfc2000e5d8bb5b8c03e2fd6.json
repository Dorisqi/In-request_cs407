{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Enum; // extends ReflectionObject\n\nvar ReflectionObject = require(\"./object\");\n\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\n\nvar Namespace = require(\"./namespace\"),\n    util = require(\"./util\");\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this enum\r\n * @param {Object.<string,string>} [comments] The value comments for this enum\r\n */\n\n\nfunction Enum(name, values, options, comment, comments) {\n  ReflectionObject.call(this, name, options);\n  if (values && typeof values !== \"object\") throw TypeError(\"values must be an object\");\n  /**\r\n   * Enum values by id.\r\n   * @type {Object.<number,string>}\r\n   */\n\n  this.valuesById = {};\n  /**\r\n   * Enum values by name.\r\n   * @type {Object.<string,number>}\r\n   */\n\n  this.values = Object.create(this.valuesById); // toJSON, marker\n\n  /**\r\n   * Enum comment text.\r\n   * @type {string|null}\r\n   */\n\n  this.comment = comment;\n  /**\r\n   * Value comment texts, if any.\r\n   * @type {Object.<string,string>}\r\n   */\n\n  this.comments = comments || {};\n  /**\r\n   * Reserved ranges, if any.\r\n   * @type {Array.<number[]|string>}\r\n   */\n\n  this.reserved = undefined; // toJSON\n  // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n  // compatible enum. This is used by pbts to write actual enum definitions that work for\n  // static and reflection code alike instead of emitting generic object definitions.\n\n  if (values) for (var keys = Object.keys(values), i = 0; i < keys.length; ++i) if (typeof values[keys[i]] === \"number\") // use forward entries only\n    this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];\n}\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\n\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {IEnum} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\n\n\nEnum.fromJSON = function fromJSON(name, json) {\n  var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n  enm.reserved = json.reserved;\n  return enm;\n};\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IEnum} Enum descriptor\r\n */\n\n\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", this.options, \"values\", this.values, \"reserved\", this.reserved && this.reserved.length ? this.reserved : undefined, \"comment\", keepComments ? this.comment : undefined, \"comments\", keepComments ? this.comments : undefined]);\n};\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {string} [comment] Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\n\n\nEnum.prototype.add = function add(name, id, comment) {\n  // utilized by the parser but not by .fromJSON\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  if (!util.isInteger(id)) throw TypeError(\"id must be an integer\");\n  if (this.values[name] !== undefined) throw Error(\"duplicate name '\" + name + \"' in \" + this);\n  if (this.isReservedId(id)) throw Error(\"id \" + id + \" is reserved in \" + this);\n  if (this.isReservedName(name)) throw Error(\"name '\" + name + \"' is reserved in \" + this);\n\n  if (this.valuesById[id] !== undefined) {\n    if (!(this.options && this.options.allow_alias)) throw Error(\"duplicate id \" + id + \" in \" + this);\n    this.values[name] = id;\n  } else this.valuesById[this.values[name] = id] = name;\n\n  this.comments[name] = comment || null;\n  return this;\n};\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\n\n\nEnum.prototype.remove = function remove(name) {\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  var val = this.values[name];\n  if (val == null) throw Error(\"name '\" + name + \"' does not exist in \" + this);\n  delete this.valuesById[val];\n  delete this.values[name];\n  delete this.comments[name];\n  return this;\n};\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\n\n\nEnum.prototype.isReservedId = function isReservedId(id) {\n  return Namespace.isReservedId(this.reserved, id);\n};\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\n\n\nEnum.prototype.isReservedName = function isReservedName(name) {\n  return Namespace.isReservedName(this.reserved, name);\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/protobufjs/src/enum.js"],"names":["module","exports","Enum","ReflectionObject","require","prototype","Object","create","constructor","className","Namespace","util","name","values","options","comment","comments","call","TypeError","valuesById","reserved","undefined","keys","i","length","fromJSON","json","enm","toJSON","toJSONOptions","keepComments","Boolean","toObject","add","id","isString","isInteger","Error","isReservedId","isReservedName","allow_alias","remove","val"],"mappings":"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","sourcesContent":["\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar Namespace = require(\"./namespace\"),\r\n    util = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this enum\r\n * @param {Object.<string,string>} [comments] The value comments for this enum\r\n */\r\nfunction Enum(name, values, options, comment, comments) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Enum comment text.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = comments || {};\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\r\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {IEnum} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\r\n    enm.reserved = json.reserved;\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IEnum} Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"  , this.options,\r\n        \"values\"   , this.values,\r\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"comment\"  , keepComments ? this.comment : undefined,\r\n        \"comments\" , keepComments ? this.comments : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {string} [comment] Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function add(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n\r\n    if (this.isReservedId(id))\r\n        throw Error(\"id \" + id + \" is reserved in \" + this);\r\n\r\n    if (this.isReservedName(name))\r\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id \" + id + \" in \" + this);\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function remove(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val == null)\r\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}