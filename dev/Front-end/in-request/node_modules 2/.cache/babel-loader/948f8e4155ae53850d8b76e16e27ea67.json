{"ast":null,"code":"var objectKeys = require('object-keys');\n\nvar isArguments = require('is-arguments');\n\nvar is = require('object-is');\n\nvar isRegex = require('is-regex');\n\nvar flags = require('regexp.prototype.flags');\n\nvar isArray = require('isarray');\n\nvar isDate = require('is-date-object');\n\nvar whichBoxedPrimitive = require('which-boxed-primitive');\n\nvar GetIntrinsic = require('es-abstract/GetIntrinsic');\n\nvar callBound = require('es-abstract/helpers/callBound');\n\nvar whichCollection = require('which-collection');\n\nvar getIterator = require('es-get-iterator');\n\nvar getSideChannel = require('side-channel');\n\nvar $getTime = callBound('Date.prototype.getTime');\nvar gPO = Object.getPrototypeOf;\nvar $objToString = callBound('Object.prototype.toString');\nvar $Set = GetIntrinsic('%Set%', true);\nvar $mapHas = callBound('Map.prototype.has', true);\nvar $mapGet = callBound('Map.prototype.get', true);\nvar $mapSize = callBound('Map.prototype.size', true);\nvar $setAdd = callBound('Set.prototype.add', true);\nvar $setDelete = callBound('Set.prototype.delete', true);\nvar $setHas = callBound('Set.prototype.has', true);\nvar $setSize = callBound('Set.prototype.size', true); // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L401-L414\n\nfunction setHasEqualElement(set, val1, strict, channel) {\n  var i = getIterator(set);\n  var result;\n\n  while ((result = i.next()) && !result.done) {\n    if (internalDeepEqual(val1, result.value, strict, channel)) {\n      // eslint-disable-line no-use-before-define\n      // Remove the matching element to make sure we do not check that again.\n      $setDelete(set, result.value);\n      return true;\n    }\n  }\n\n  return false;\n} // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L416-L439\n\n\nfunction findLooseMatchingPrimitives(prim) {\n  if (typeof prim === 'undefined') {\n    return null;\n  }\n\n  if (typeof prim === 'object') {\n    // Only pass in null as object!\n    return void 0;\n  }\n\n  if (typeof prim === 'symbol') {\n    return false;\n  }\n\n  if (typeof prim === 'string' || typeof prim === 'number') {\n    // Loose equal entries exist only if the string is possible to convert to a regular number and not NaN.\n    return +prim === +prim; // eslint-disable-line no-implicit-coercion\n  }\n\n  return true;\n} // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L449-L460\n\n\nfunction mapMightHaveLoosePrim(a, b, prim, item, channel) {\n  var altValue = findLooseMatchingPrimitives(prim);\n\n  if (altValue != null) {\n    return altValue;\n  }\n\n  var curB = $mapGet(b, altValue); // eslint-disable-next-line no-use-before-define\n\n  if (typeof curB === 'undefined' && !$mapHas(b, altValue) || !internalDeepEqual(item, curB, false, channel)) {\n    return false;\n  } // eslint-disable-next-line no-use-before-define\n\n\n  return !$mapHas(a, altValue) && internalDeepEqual(item, curB, false, channel);\n} // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L441-L447\n\n\nfunction setMightHaveLoosePrim(a, b, prim) {\n  var altValue = findLooseMatchingPrimitives(prim);\n\n  if (altValue != null) {\n    return altValue;\n  }\n\n  return $setHas(b, altValue) && !$setHas(a, altValue);\n} // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L518-L533\n\n\nfunction mapHasEqualEntry(set, map, key1, item1, strict, channel) {\n  var i = getIterator(set);\n  var result;\n  var key2;\n\n  while ((result = i.next()) && !result.done) {\n    key2 = result.value;\n\n    if ( // eslint-disable-next-line no-use-before-define\n    internalDeepEqual(key1, key2, strict, channel) // eslint-disable-next-line no-use-before-define\n    && internalDeepEqual(item1, $mapGet(map, key2), strict, channel)) {\n      $setDelete(set, key2);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction internalDeepEqual(actual, expected, options, channel) {\n  var opts = options || {}; // 7.1. All identical values are equivalent, as determined by ===.\n\n  if (opts.strict ? is(actual, expected) : actual === expected) {\n    return true;\n  }\n\n  var actualBoxed = whichBoxedPrimitive(actual);\n  var expectedBoxed = whichBoxedPrimitive(expected);\n\n  if (actualBoxed !== expectedBoxed) {\n    return false;\n  } // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.\n\n\n  if (!actual || !expected || typeof actual !== 'object' && typeof expected !== 'object') {\n    if (actual === false && expected || actual && expected === false) {\n      return false;\n    }\n\n    return opts.strict ? is(actual, expected) : actual == expected; // eslint-disable-line eqeqeq\n  }\n  /*\n   * 7.4. For all other Object pairs, including Array objects, equivalence is\n   * determined by having the same number of owned properties (as verified\n   * with Object.prototype.hasOwnProperty.call), the same set of keys\n   * (although not necessarily the same order), equivalent values for every\n   * corresponding key, and an identical 'prototype' property. Note: this\n   * accounts for both named and indexed properties on Arrays.\n   */\n  // see https://github.com/nodejs/node/commit/d3aafd02efd3a403d646a3044adcf14e63a88d32 for memos/channel inspiration\n\n\n  var hasActual = channel.has(actual);\n  var hasExpected = channel.has(expected);\n  var sentinel;\n\n  if (hasActual && hasExpected) {\n    if (channel.get(actual) === channel.get(expected)) {\n      return true;\n    }\n  } else {\n    sentinel = {};\n  }\n\n  if (!hasActual) {\n    channel.set(actual, sentinel);\n  }\n\n  if (!hasExpected) {\n    channel.set(expected, sentinel);\n  } // eslint-disable-next-line no-use-before-define\n\n\n  return objEquiv(actual, expected, opts, channel);\n}\n\nfunction isBuffer(x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') {\n    return false;\n  }\n\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n\n  if (x.length > 0 && typeof x[0] !== 'number') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction setEquiv(a, b, opts, channel) {\n  if ($setSize(a) !== $setSize(b)) {\n    return false;\n  }\n\n  var iA = getIterator(a);\n  var iB = getIterator(b);\n  var resultA;\n  var resultB;\n  var set;\n\n  while ((resultA = iA.next()) && !resultA.done) {\n    if (resultA.value && typeof resultA.value === 'object') {\n      if (!set) {\n        set = new $Set();\n      }\n\n      $setAdd(set, resultA.value);\n    } else if (!$setHas(b, resultA.value)) {\n      if (opts.strict) {\n        return false;\n      }\n\n      if (!setMightHaveLoosePrim(a, b, resultA.value)) {\n        return false;\n      }\n\n      if (!set) {\n        set = new $Set();\n      }\n\n      $setAdd(set, resultA.value);\n    }\n  }\n\n  if (set) {\n    while ((resultB = iB.next()) && !resultB.done) {\n      // We have to check if a primitive value is already matching and only if it's not, go hunting for it.\n      if (resultB.value && typeof resultB.value === 'object') {\n        if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {\n          return false;\n        }\n      } else if (!opts.strict && !$setHas(a, resultB.value) && !setHasEqualElement(set, resultB.value, opts.strict, channel)) {\n        return false;\n      }\n    }\n\n    return $setSize(set) === 0;\n  }\n\n  return true;\n}\n\nfunction mapEquiv(a, b, opts, channel) {\n  if ($mapSize(a) !== $mapSize(b)) {\n    return false;\n  }\n\n  var iA = getIterator(a);\n  var iB = getIterator(b);\n  var resultA;\n  var resultB;\n  var set;\n  var key;\n  var item1;\n  var item2;\n\n  while ((resultA = iA.next()) && !resultA.done) {\n    key = resultA.value[0];\n    item1 = resultA.value[1];\n\n    if (key && typeof key === 'object') {\n      if (!set) {\n        set = new $Set();\n      }\n\n      $setAdd(set, key);\n    } else {\n      item2 = $mapGet(b, key); // if (typeof curB === 'undefined' && !$mapHas(b, altValue) || !internalDeepEqual(item, curB, false, channel)) {\n\n      if (typeof item2 === 'undefined' && !$mapHas(b, key) || !internalDeepEqual(item1, item2, opts.strict, channel)) {\n        if (opts.strict) {\n          return false;\n        }\n\n        if (!mapMightHaveLoosePrim(a, b, key, item1, channel)) {\n          return false;\n        }\n\n        if (!set) {\n          set = new $Set();\n        }\n\n        $setAdd(set, key);\n      }\n    }\n  }\n\n  if (set) {\n    while ((resultB = iB.next()) && !resultB.done) {\n      key = resultB.value[0];\n      item1 = resultB.value[1];\n\n      if (key && typeof key === 'object') {\n        if (!mapHasEqualEntry(set, a, key, item1, opts.strict, channel)) {\n          return false;\n        }\n      } else if (!opts.strict && (!a.has(key) || !internalDeepEqual($mapGet(a, key), item1, false, channel)) && !mapHasEqualEntry(set, a, key, item1, false, channel)) {\n        return false;\n      }\n    }\n\n    return $setSize(set) === 0;\n  }\n\n  return true;\n}\n\nfunction objEquiv(a, b, opts, channel) {\n  /* eslint max-statements: [2, 100], max-lines-per-function: [2, 120], max-depth: [2, 5] */\n  var i, key;\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  } // an identical 'prototype' property.\n\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  if ($objToString(a) !== $objToString(b)) {\n    return false;\n  }\n\n  if (isArguments(a) !== isArguments(b)) {\n    return false;\n  }\n\n  var aIsArray = isArray(a);\n  var bIsArray = isArray(b);\n\n  if (aIsArray !== bIsArray) {\n    return false;\n  } // TODO: replace when a cross-realm brand check is available\n\n\n  var aIsError = a instanceof Error;\n  var bIsError = b instanceof Error;\n\n  if (aIsError !== bIsError) {\n    return false;\n  }\n\n  if (aIsError || bIsError) {\n    if (a.name !== b.name || a.message !== b.message) {\n      return false;\n    }\n  }\n\n  var aIsRegex = isRegex(a);\n  var bIsRegex = isRegex(b);\n\n  if (aIsRegex !== bIsRegex) {\n    return false;\n  }\n\n  if ((aIsRegex || bIsRegex) && (a.source !== b.source || flags(a) !== flags(b))) {\n    return false;\n  }\n\n  var aIsDate = isDate(a);\n  var bIsDate = isDate(b);\n\n  if (aIsDate !== bIsDate) {\n    return false;\n  }\n\n  if (aIsDate || bIsDate) {\n    // && would work too, because both are true or both false here\n    if ($getTime(a) !== $getTime(b)) {\n      return false;\n    }\n  }\n\n  if (opts.strict && gPO && gPO(a) !== gPO(b)) {\n    return false;\n  }\n\n  var aIsBuffer = isBuffer(a);\n  var bIsBuffer = isBuffer(b);\n\n  if (aIsBuffer !== bIsBuffer) {\n    return false;\n  }\n\n  if (aIsBuffer || bIsBuffer) {\n    // && would work too, because both are true or both false here\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  try {\n    var ka = objectKeys(a);\n    var kb = objectKeys(b);\n  } catch (e) {\n    // happens when one is a string literal and the other isn't\n    return false;\n  } // having the same number of owned properties (keys incorporates hasOwnProperty)\n\n\n  if (ka.length !== kb.length) {\n    return false;\n  } // the same set of keys (although not necessarily the same order),\n\n\n  ka.sort();\n  kb.sort(); // ~~~cheap key test\n\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i]) {\n      return false;\n    } // eslint-disable-line eqeqeq\n\n  } // equivalent values for every corresponding key, and ~~~possibly expensive deep test\n\n\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n\n    if (!internalDeepEqual(a[key], b[key], opts, channel)) {\n      return false;\n    }\n  }\n\n  var aCollection = whichCollection(a);\n  var bCollection = whichCollection(b);\n\n  if (aCollection !== bCollection) {\n    return false;\n  }\n\n  if (aCollection === 'Set' || bCollection === 'Set') {\n    // aCollection === bCollection\n    return setEquiv(a, b, opts, channel);\n  }\n\n  if (aCollection === 'Map') {\n    // aCollection === bCollection\n    return mapEquiv(a, b, opts, channel);\n  }\n\n  return true;\n}\n\nmodule.exports = function deepEqual(a, b, opts) {\n  return internalDeepEqual(a, b, opts, getSideChannel());\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/@google-cloud/firestore/node_modules/deep-equal/index.js"],"names":["objectKeys","require","isArguments","is","isRegex","flags","isArray","isDate","whichBoxedPrimitive","GetIntrinsic","callBound","whichCollection","getIterator","getSideChannel","$getTime","gPO","Object","getPrototypeOf","$objToString","$Set","$mapHas","$mapGet","$mapSize","$setAdd","$setDelete","$setHas","$setSize","setHasEqualElement","set","val1","strict","channel","i","result","next","done","internalDeepEqual","value","findLooseMatchingPrimitives","prim","mapMightHaveLoosePrim","a","b","item","altValue","curB","setMightHaveLoosePrim","mapHasEqualEntry","map","key1","item1","key2","actual","expected","options","opts","actualBoxed","expectedBoxed","hasActual","has","hasExpected","sentinel","get","objEquiv","isBuffer","x","length","copy","slice","setEquiv","iA","iB","resultA","resultB","mapEquiv","key","item2","prototype","aIsArray","bIsArray","aIsError","Error","bIsError","name","message","aIsRegex","bIsRegex","source","aIsDate","bIsDate","aIsBuffer","bIsBuffer","ka","kb","e","sort","aCollection","bCollection","module","exports","deepEqual"],"mappings":"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","sourcesContent":["var objectKeys = require('object-keys');\nvar isArguments = require('is-arguments');\nvar is = require('object-is');\nvar isRegex = require('is-regex');\nvar flags = require('regexp.prototype.flags');\nvar isArray = require('isarray');\nvar isDate = require('is-date-object');\nvar whichBoxedPrimitive = require('which-boxed-primitive');\nvar GetIntrinsic = require('es-abstract/GetIntrinsic');\nvar callBound = require('es-abstract/helpers/callBound');\nvar whichCollection = require('which-collection');\nvar getIterator = require('es-get-iterator');\nvar getSideChannel = require('side-channel');\n\nvar $getTime = callBound('Date.prototype.getTime');\nvar gPO = Object.getPrototypeOf;\nvar $objToString = callBound('Object.prototype.toString');\n\nvar $Set = GetIntrinsic('%Set%', true);\nvar $mapHas = callBound('Map.prototype.has', true);\nvar $mapGet = callBound('Map.prototype.get', true);\nvar $mapSize = callBound('Map.prototype.size', true);\nvar $setAdd = callBound('Set.prototype.add', true);\nvar $setDelete = callBound('Set.prototype.delete', true);\nvar $setHas = callBound('Set.prototype.has', true);\nvar $setSize = callBound('Set.prototype.size', true);\n\n// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L401-L414\nfunction setHasEqualElement(set, val1, strict, channel) {\n  var i = getIterator(set);\n  var result;\n  while ((result = i.next()) && !result.done) {\n    if (internalDeepEqual(val1, result.value, strict, channel)) { // eslint-disable-line no-use-before-define\n      // Remove the matching element to make sure we do not check that again.\n      $setDelete(set, result.value);\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L416-L439\nfunction findLooseMatchingPrimitives(prim) {\n  if (typeof prim === 'undefined') {\n    return null;\n  }\n  if (typeof prim === 'object') { // Only pass in null as object!\n    return void 0;\n  }\n  if (typeof prim === 'symbol') {\n    return false;\n  }\n  if (typeof prim === 'string' || typeof prim === 'number') {\n    // Loose equal entries exist only if the string is possible to convert to a regular number and not NaN.\n    return +prim === +prim; // eslint-disable-line no-implicit-coercion\n  }\n  return true;\n}\n\n// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L449-L460\nfunction mapMightHaveLoosePrim(a, b, prim, item, channel) {\n  var altValue = findLooseMatchingPrimitives(prim);\n  if (altValue != null) {\n    return altValue;\n  }\n  var curB = $mapGet(b, altValue);\n  // eslint-disable-next-line no-use-before-define\n  if ((typeof curB === 'undefined' && !$mapHas(b, altValue)) || !internalDeepEqual(item, curB, false, channel)) {\n    return false;\n  }\n  // eslint-disable-next-line no-use-before-define\n  return !$mapHas(a, altValue) && internalDeepEqual(item, curB, false, channel);\n}\n\n// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L441-L447\nfunction setMightHaveLoosePrim(a, b, prim) {\n  var altValue = findLooseMatchingPrimitives(prim);\n  if (altValue != null) {\n    return altValue;\n  }\n\n  return $setHas(b, altValue) && !$setHas(a, altValue);\n}\n\n// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L518-L533\nfunction mapHasEqualEntry(set, map, key1, item1, strict, channel) {\n  var i = getIterator(set);\n  var result;\n  var key2;\n  while ((result = i.next()) && !result.done) {\n    key2 = result.value;\n    if (\n      // eslint-disable-next-line no-use-before-define\n      internalDeepEqual(key1, key2, strict, channel)\n      // eslint-disable-next-line no-use-before-define\n      && internalDeepEqual(item1, $mapGet(map, key2), strict, channel)\n    ) {\n      $setDelete(set, key2);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction internalDeepEqual(actual, expected, options, channel) {\n  var opts = options || {};\n\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (opts.strict ? is(actual, expected) : actual === expected) {\n    return true;\n  }\n\n  var actualBoxed = whichBoxedPrimitive(actual);\n  var expectedBoxed = whichBoxedPrimitive(expected);\n  if (actualBoxed !== expectedBoxed) {\n    return false;\n  }\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.\n  if (!actual || !expected || (typeof actual !== 'object' && typeof expected !== 'object')) {\n    if ((actual === false && expected) || (actual && expected === false)) { return false; }\n    return opts.strict ? is(actual, expected) : actual == expected; // eslint-disable-line eqeqeq\n  }\n\n  /*\n   * 7.4. For all other Object pairs, including Array objects, equivalence is\n   * determined by having the same number of owned properties (as verified\n   * with Object.prototype.hasOwnProperty.call), the same set of keys\n   * (although not necessarily the same order), equivalent values for every\n   * corresponding key, and an identical 'prototype' property. Note: this\n   * accounts for both named and indexed properties on Arrays.\n   */\n  // see https://github.com/nodejs/node/commit/d3aafd02efd3a403d646a3044adcf14e63a88d32 for memos/channel inspiration\n\n  var hasActual = channel.has(actual);\n  var hasExpected = channel.has(expected);\n  var sentinel;\n  if (hasActual && hasExpected) {\n    if (channel.get(actual) === channel.get(expected)) {\n      return true;\n    }\n  } else {\n    sentinel = {};\n  }\n  if (!hasActual) { channel.set(actual, sentinel); }\n  if (!hasExpected) { channel.set(expected, sentinel); }\n\n  // eslint-disable-next-line no-use-before-define\n  return objEquiv(actual, expected, opts, channel);\n}\n\nfunction isBuffer(x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') {\n    return false;\n  }\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') {\n    return false;\n  }\n  return true;\n}\n\nfunction setEquiv(a, b, opts, channel) {\n  if ($setSize(a) !== $setSize(b)) {\n    return false;\n  }\n  var iA = getIterator(a);\n  var iB = getIterator(b);\n  var resultA;\n  var resultB;\n  var set;\n  while ((resultA = iA.next()) && !resultA.done) {\n    if (resultA.value && typeof resultA.value === 'object') {\n      if (!set) { set = new $Set(); }\n      $setAdd(set, resultA.value);\n    } else if (!$setHas(b, resultA.value)) {\n      if (opts.strict) { return false; }\n      if (!setMightHaveLoosePrim(a, b, resultA.value)) {\n        return false;\n      }\n      if (!set) { set = new $Set(); }\n      $setAdd(set, resultA.value);\n    }\n  }\n  if (set) {\n    while ((resultB = iB.next()) && !resultB.done) {\n      // We have to check if a primitive value is already matching and only if it's not, go hunting for it.\n      if (resultB.value && typeof resultB.value === 'object') {\n        if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {\n          return false;\n        }\n      } else if (\n        !opts.strict\n        && !$setHas(a, resultB.value)\n        && !setHasEqualElement(set, resultB.value, opts.strict, channel)\n      ) {\n        return false;\n      }\n    }\n    return $setSize(set) === 0;\n  }\n  return true;\n}\n\nfunction mapEquiv(a, b, opts, channel) {\n  if ($mapSize(a) !== $mapSize(b)) {\n    return false;\n  }\n  var iA = getIterator(a);\n  var iB = getIterator(b);\n  var resultA;\n  var resultB;\n  var set;\n  var key;\n  var item1;\n  var item2;\n  while ((resultA = iA.next()) && !resultA.done) {\n    key = resultA.value[0];\n    item1 = resultA.value[1];\n    if (key && typeof key === 'object') {\n      if (!set) { set = new $Set(); }\n      $setAdd(set, key);\n    } else {\n      item2 = $mapGet(b, key);\n      // if (typeof curB === 'undefined' && !$mapHas(b, altValue) || !internalDeepEqual(item, curB, false, channel)) {\n      if ((typeof item2 === 'undefined' && !$mapHas(b, key)) || !internalDeepEqual(item1, item2, opts.strict, channel)) {\n        if (opts.strict) {\n          return false;\n        }\n        if (!mapMightHaveLoosePrim(a, b, key, item1, channel)) {\n          return false;\n        }\n        if (!set) { set = new $Set(); }\n        $setAdd(set, key);\n      }\n    }\n  }\n\n  if (set) {\n    while ((resultB = iB.next()) && !resultB.done) {\n      key = resultB.value[0];\n      item1 = resultB.value[1];\n      if (key && typeof key === 'object') {\n        if (!mapHasEqualEntry(set, a, key, item1, opts.strict, channel)) {\n          return false;\n        }\n      } else if (\n        !opts.strict\n        && (!a.has(key) || !internalDeepEqual($mapGet(a, key), item1, false, channel))\n        && !mapHasEqualEntry(set, a, key, item1, false, channel)\n      ) {\n        return false;\n      }\n    }\n    return $setSize(set) === 0;\n  }\n  return true;\n}\n\nfunction objEquiv(a, b, opts, channel) {\n  /* eslint max-statements: [2, 100], max-lines-per-function: [2, 120], max-depth: [2, 5] */\n  var i, key;\n\n  if (typeof a !== typeof b) { return false; }\n  if (a == null || b == null) { return false; }\n\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) { return false; }\n\n  if ($objToString(a) !== $objToString(b)) { return false; }\n\n  if (isArguments(a) !== isArguments(b)) { return false; }\n\n  var aIsArray = isArray(a);\n  var bIsArray = isArray(b);\n  if (aIsArray !== bIsArray) { return false; }\n\n  // TODO: replace when a cross-realm brand check is available\n  var aIsError = a instanceof Error;\n  var bIsError = b instanceof Error;\n  if (aIsError !== bIsError) { return false; }\n  if (aIsError || bIsError) {\n    if (a.name !== b.name || a.message !== b.message) { return false; }\n  }\n\n  var aIsRegex = isRegex(a);\n  var bIsRegex = isRegex(b);\n  if (aIsRegex !== bIsRegex) { return false; }\n  if ((aIsRegex || bIsRegex) && (a.source !== b.source || flags(a) !== flags(b))) {\n    return false;\n  }\n\n  var aIsDate = isDate(a);\n  var bIsDate = isDate(b);\n  if (aIsDate !== bIsDate) { return false; }\n  if (aIsDate || bIsDate) { // && would work too, because both are true or both false here\n    if ($getTime(a) !== $getTime(b)) { return false; }\n  }\n  if (opts.strict && gPO && gPO(a) !== gPO(b)) { return false; }\n\n  var aIsBuffer = isBuffer(a);\n  var bIsBuffer = isBuffer(b);\n  if (aIsBuffer !== bIsBuffer) { return false; }\n  if (aIsBuffer || bIsBuffer) { // && would work too, because both are true or both false here\n    if (a.length !== b.length) { return false; }\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) { return false; }\n    }\n    return true;\n  }\n\n  if (typeof a !== typeof b) { return false; }\n\n  try {\n    var ka = objectKeys(a);\n    var kb = objectKeys(b);\n  } catch (e) { // happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates hasOwnProperty)\n  if (ka.length !== kb.length) { return false; }\n\n  // the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  // ~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i]) { return false; } // eslint-disable-line eqeqeq\n  }\n\n  // equivalent values for every corresponding key, and ~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!internalDeepEqual(a[key], b[key], opts, channel)) { return false; }\n  }\n\n  var aCollection = whichCollection(a);\n  var bCollection = whichCollection(b);\n  if (aCollection !== bCollection) {\n    return false;\n  }\n  if (aCollection === 'Set' || bCollection === 'Set') { // aCollection === bCollection\n    return setEquiv(a, b, opts, channel);\n  }\n  if (aCollection === 'Map') { // aCollection === bCollection\n    return mapEquiv(a, b, opts, channel);\n  }\n\n  return true;\n}\n\nmodule.exports = function deepEqual(a, b, opts) {\n  return internalDeepEqual(a, b, opts, getSideChannel());\n};\n"]},"metadata":{},"sourceType":"script"}