{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* In these functions we assume the input came from a JSON object. Therefore we\n * expect that the prototype is uninteresting and that `in` can be used\n * effectively */\n\nfunction validateXdsConfig(xds) {\n  if (!('balancerName' in xds) || typeof xds.balancerName !== 'string') {\n    throw new Error('Invalid xds config: invalid balancerName');\n  }\n\n  const xdsConfig = {\n    balancerName: xds.balancerName,\n    childPolicy: [],\n    fallbackPolicy: []\n  };\n\n  if ('childPolicy' in xds) {\n    if (!Array.isArray(xds.childPolicy)) {\n      throw new Error('Invalid xds config: invalid childPolicy');\n    }\n\n    for (const policy of xds.childPolicy) {\n      xdsConfig.childPolicy.push(validateConfig(policy));\n    }\n  }\n\n  if ('fallbackPolicy' in xds) {\n    if (!Array.isArray(xds.fallbackPolicy)) {\n      throw new Error('Invalid xds config: invalid fallbackPolicy');\n    }\n\n    for (const policy of xds.fallbackPolicy) {\n      xdsConfig.fallbackPolicy.push(validateConfig(policy));\n    }\n  }\n\n  return xdsConfig;\n}\n\nfunction validateGrpcLbConfig(grpclb) {\n  const grpcLbConfig = {\n    childPolicy: []\n  };\n\n  if ('childPolicy' in grpclb) {\n    if (!Array.isArray(grpclb.childPolicy)) {\n      throw new Error('Invalid xds config: invalid childPolicy');\n    }\n\n    for (const policy of grpclb.childPolicy) {\n      grpcLbConfig.childPolicy.push(validateConfig(policy));\n    }\n  }\n\n  return grpcLbConfig;\n}\n\nfunction validateConfig(obj) {\n  if ('round_robin' in obj) {\n    if ('xds' in obj || 'grpclb' in obj) {\n      throw new Error('Multiple load balancing policies configured');\n    }\n\n    if (obj['round_robin'] instanceof Object) {\n      return {\n        round_robin: {}\n      };\n    }\n  }\n\n  if ('xds' in obj) {\n    if ('grpclb' in obj) {\n      throw new Error('Multiple load balancing policies configured');\n    }\n\n    return {\n      xds: validateXdsConfig(obj.xds)\n    };\n  }\n\n  if ('grpclb' in obj) {\n    return {\n      grpclb: validateGrpcLbConfig(obj.grpclb)\n    };\n  }\n\n  throw new Error('No recognized load balancing policy configured');\n}\n\nexports.validateConfig = validateConfig;","map":{"version":3,"sources":["../../src/load-balancing-config.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AA8CA;;;;AAIA,SAAS,iBAAT,CAA2B,GAA3B,EAAmC;AACjC,MAAI,EAAE,kBAAkB,GAApB,KAA4B,OAAO,GAAG,CAAC,YAAX,KAA4B,QAA5D,EAAsE;AACpE,UAAM,IAAI,KAAJ,CAAU,0CAAV,CAAN;AACD;;AACD,QAAM,SAAS,GAAc;AAC3B,IAAA,YAAY,EAAE,GAAG,CAAC,YADS;AAE3B,IAAA,WAAW,EAAE,EAFc;AAG3B,IAAA,cAAc,EAAE;AAHW,GAA7B;;AAKA,MAAI,iBAAiB,GAArB,EAA0B;AACxB,QAAI,CAAC,KAAK,CAAC,OAAN,CAAc,GAAG,CAAC,WAAlB,CAAL,EAAqC;AACnC,YAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,SAAK,MAAM,MAAX,IAAqB,GAAG,CAAC,WAAzB,EAAsC;AACpC,MAAA,SAAS,CAAC,WAAV,CAAsB,IAAtB,CAA2B,cAAc,CAAC,MAAD,CAAzC;AACD;AACF;;AACD,MAAI,oBAAoB,GAAxB,EAA6B;AAC3B,QAAI,CAAC,KAAK,CAAC,OAAN,CAAc,GAAG,CAAC,cAAlB,CAAL,EAAwC;AACtC,YAAM,IAAI,KAAJ,CAAU,4CAAV,CAAN;AACD;;AACD,SAAK,MAAM,MAAX,IAAqB,GAAG,CAAC,cAAzB,EAAyC;AACvC,MAAA,SAAS,CAAC,cAAV,CAAyB,IAAzB,CAA8B,cAAc,CAAC,MAAD,CAA5C;AACD;AACF;;AACD,SAAO,SAAP;AACD;;AAED,SAAS,oBAAT,CAA8B,MAA9B,EAAyC;AACvC,QAAM,YAAY,GAAiB;AACjC,IAAA,WAAW,EAAE;AADoB,GAAnC;;AAGA,MAAI,iBAAiB,MAArB,EAA6B;AAC3B,QAAI,CAAC,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,WAArB,CAAL,EAAwC;AACtC,YAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,SAAK,MAAM,MAAX,IAAqB,MAAM,CAAC,WAA5B,EAAyC;AACvC,MAAA,YAAY,CAAC,WAAb,CAAyB,IAAzB,CAA8B,cAAc,CAAC,MAAD,CAA5C;AACD;AACF;;AACD,SAAO,YAAP;AACD;;AAED,SAAgB,cAAhB,CAA+B,GAA/B,EAAuC;AACrC,MAAI,iBAAiB,GAArB,EAA0B;AACxB,QAAI,SAAS,GAAT,IAAgB,YAAY,GAAhC,EAAqC;AACnC,YAAM,IAAI,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,QAAI,GAAG,CAAC,aAAD,CAAH,YAA8B,MAAlC,EAA0C;AACxC,aAAO;AAAE,QAAA,WAAW,EAAE;AAAf,OAAP;AACD;AACF;;AACD,MAAI,SAAS,GAAb,EAAkB;AAChB,QAAI,YAAY,GAAhB,EAAqB;AACnB,YAAM,IAAI,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,WAAO;AAAE,MAAA,GAAG,EAAE,iBAAiB,CAAC,GAAG,CAAC,GAAL;AAAxB,KAAP;AACD;;AACD,MAAI,YAAY,GAAhB,EAAqB;AACnB,WAAO;AAAE,MAAA,MAAM,EAAE,oBAAoB,CAAC,GAAG,CAAC,MAAL;AAA9B,KAAP;AACD;;AACD,QAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAnBD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* In these functions we assume the input came from a JSON object. Therefore we\n * expect that the prototype is uninteresting and that `in` can be used\n * effectively */\nfunction validateXdsConfig(xds) {\n    if (!('balancerName' in xds) || typeof xds.balancerName !== 'string') {\n        throw new Error('Invalid xds config: invalid balancerName');\n    }\n    const xdsConfig = {\n        balancerName: xds.balancerName,\n        childPolicy: [],\n        fallbackPolicy: [],\n    };\n    if ('childPolicy' in xds) {\n        if (!Array.isArray(xds.childPolicy)) {\n            throw new Error('Invalid xds config: invalid childPolicy');\n        }\n        for (const policy of xds.childPolicy) {\n            xdsConfig.childPolicy.push(validateConfig(policy));\n        }\n    }\n    if ('fallbackPolicy' in xds) {\n        if (!Array.isArray(xds.fallbackPolicy)) {\n            throw new Error('Invalid xds config: invalid fallbackPolicy');\n        }\n        for (const policy of xds.fallbackPolicy) {\n            xdsConfig.fallbackPolicy.push(validateConfig(policy));\n        }\n    }\n    return xdsConfig;\n}\nfunction validateGrpcLbConfig(grpclb) {\n    const grpcLbConfig = {\n        childPolicy: [],\n    };\n    if ('childPolicy' in grpclb) {\n        if (!Array.isArray(grpclb.childPolicy)) {\n            throw new Error('Invalid xds config: invalid childPolicy');\n        }\n        for (const policy of grpclb.childPolicy) {\n            grpcLbConfig.childPolicy.push(validateConfig(policy));\n        }\n    }\n    return grpcLbConfig;\n}\nfunction validateConfig(obj) {\n    if ('round_robin' in obj) {\n        if ('xds' in obj || 'grpclb' in obj) {\n            throw new Error('Multiple load balancing policies configured');\n        }\n        if (obj['round_robin'] instanceof Object) {\n            return { round_robin: {} };\n        }\n    }\n    if ('xds' in obj) {\n        if ('grpclb' in obj) {\n            throw new Error('Multiple load balancing policies configured');\n        }\n        return { xds: validateXdsConfig(obj.xds) };\n    }\n    if ('grpclb' in obj) {\n        return { grpclb: validateGrpcLbConfig(obj.grpclb) };\n    }\n    throw new Error('No recognized load balancing policy configured');\n}\nexports.validateConfig = validateConfig;\n//# sourceMappingURL=load-balancing-config.js.map"]},"metadata":{},"sourceType":"script"}