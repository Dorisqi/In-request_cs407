{"ast":null,"code":"/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar validator = require(\"../utils/validator\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar auth_config_1 = require(\"./auth-config\");\n/**\n * Tenant class that defines a Firebase Auth tenant.\n */\n\n\nvar Tenant =\n/** @class */\nfunction () {\n  /**\n   * The Tenant object constructor.\n   *\n   * @param {any} response The server side response used to initialize the Tenant object.\n   * @constructor\n   */\n  function Tenant(response) {\n    var tenantId = Tenant.getTenantIdFromResourceName(response.name);\n\n    if (!tenantId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid tenant response');\n    }\n\n    this.tenantId = tenantId;\n    this.displayName = response.displayName;\n\n    try {\n      this.emailSignInConfig = new auth_config_1.EmailSignInConfig(response);\n    } catch (e) {\n      // If allowPasswordSignup is undefined, it is disabled by default.\n      this.emailSignInConfig = new auth_config_1.EmailSignInConfig({\n        allowPasswordSignup: false\n      });\n    }\n  }\n  /**\n   * Builds the corresponding server request for a TenantOptions object.\n   *\n   * @param {TenantOptions} tenantOptions The properties to convert to a server request.\n   * @param {boolean} createRequest Whether this is a create request.\n   * @return {object} The equivalent server request.\n   */\n\n\n  Tenant.buildServerRequest = function (tenantOptions, createRequest) {\n    Tenant.validate(tenantOptions, createRequest);\n    var request = {};\n\n    if (typeof tenantOptions.emailSignInConfig !== 'undefined') {\n      request = auth_config_1.EmailSignInConfig.buildServerRequest(tenantOptions.emailSignInConfig);\n    }\n\n    if (typeof tenantOptions.displayName !== 'undefined') {\n      request.displayName = tenantOptions.displayName;\n    }\n\n    return request;\n  };\n  /**\n   * Returns the tenant ID corresponding to the resource name if available.\n   *\n   * @param {string} resourceName The server side resource name\n   * @return {?string} The tenant ID corresponding to the resource, null otherwise.\n   */\n\n\n  Tenant.getTenantIdFromResourceName = function (resourceName) {\n    // name is of form projects/project1/tenants/tenant1\n    var matchTenantRes = resourceName.match(/\\/tenants\\/(.*)$/);\n\n    if (!matchTenantRes || matchTenantRes.length < 2) {\n      return null;\n    }\n\n    return matchTenantRes[1];\n  };\n  /**\n   * Validates a tenant options object. Throws an error on failure.\n   *\n   * @param {any} request The tenant options object to validate.\n   * @param {boolean} createRequest Whether this is a create request.\n   */\n\n\n  Tenant.validate = function (request, createRequest) {\n    var validKeys = {\n      displayName: true,\n      emailSignInConfig: true\n    };\n    var label = createRequest ? 'CreateTenantRequest' : 'UpdateTenantRequest';\n\n    if (!validator.isNonNullObject(request)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + label + \"\\\" must be a valid non-null object.\");\n    } // Check for unsupported top level attributes.\n\n\n    for (var key in request) {\n      if (!(key in validKeys)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + key + \"\\\" is not a valid \" + label + \" parameter.\");\n      }\n    } // Validate displayName type if provided.\n\n\n    if (typeof request.displayName !== 'undefined' && !validator.isNonEmptyString(request.displayName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + label + \".displayName\\\" must be a valid non-empty string.\");\n    } // Validate emailSignInConfig type if provided.\n\n\n    if (typeof request.emailSignInConfig !== 'undefined') {\n      // This will throw an error if invalid.\n      auth_config_1.EmailSignInConfig.buildServerRequest(request.emailSignInConfig);\n    }\n  };\n  /** @return {object} The plain object representation of the tenant. */\n\n\n  Tenant.prototype.toJSON = function () {\n    return {\n      tenantId: this.tenantId,\n      displayName: this.displayName,\n      emailSignInConfig: this.emailSignInConfig && this.emailSignInConfig.toJSON()\n    };\n  };\n\n  return Tenant;\n}();\n\nexports.Tenant = Tenant;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/firebase-admin/lib/auth/tenant.js"],"names":["Object","defineProperty","exports","value","validator","require","error_1","auth_config_1","Tenant","response","tenantId","getTenantIdFromResourceName","name","FirebaseAuthError","AuthClientErrorCode","INTERNAL_ERROR","displayName","emailSignInConfig","EmailSignInConfig","e","allowPasswordSignup","buildServerRequest","tenantOptions","createRequest","validate","request","resourceName","matchTenantRes","match","length","validKeys","label","isNonNullObject","INVALID_ARGUMENT","key","isNonEmptyString","prototype","toJSON"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar validator = require(\"../utils/validator\");\nvar error_1 = require(\"../utils/error\");\nvar auth_config_1 = require(\"./auth-config\");\n/**\n * Tenant class that defines a Firebase Auth tenant.\n */\nvar Tenant = /** @class */ (function () {\n    /**\n     * The Tenant object constructor.\n     *\n     * @param {any} response The server side response used to initialize the Tenant object.\n     * @constructor\n     */\n    function Tenant(response) {\n        var tenantId = Tenant.getTenantIdFromResourceName(response.name);\n        if (!tenantId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid tenant response');\n        }\n        this.tenantId = tenantId;\n        this.displayName = response.displayName;\n        try {\n            this.emailSignInConfig = new auth_config_1.EmailSignInConfig(response);\n        }\n        catch (e) {\n            // If allowPasswordSignup is undefined, it is disabled by default.\n            this.emailSignInConfig = new auth_config_1.EmailSignInConfig({\n                allowPasswordSignup: false,\n            });\n        }\n    }\n    /**\n     * Builds the corresponding server request for a TenantOptions object.\n     *\n     * @param {TenantOptions} tenantOptions The properties to convert to a server request.\n     * @param {boolean} createRequest Whether this is a create request.\n     * @return {object} The equivalent server request.\n     */\n    Tenant.buildServerRequest = function (tenantOptions, createRequest) {\n        Tenant.validate(tenantOptions, createRequest);\n        var request = {};\n        if (typeof tenantOptions.emailSignInConfig !== 'undefined') {\n            request = auth_config_1.EmailSignInConfig.buildServerRequest(tenantOptions.emailSignInConfig);\n        }\n        if (typeof tenantOptions.displayName !== 'undefined') {\n            request.displayName = tenantOptions.displayName;\n        }\n        return request;\n    };\n    /**\n     * Returns the tenant ID corresponding to the resource name if available.\n     *\n     * @param {string} resourceName The server side resource name\n     * @return {?string} The tenant ID corresponding to the resource, null otherwise.\n     */\n    Tenant.getTenantIdFromResourceName = function (resourceName) {\n        // name is of form projects/project1/tenants/tenant1\n        var matchTenantRes = resourceName.match(/\\/tenants\\/(.*)$/);\n        if (!matchTenantRes || matchTenantRes.length < 2) {\n            return null;\n        }\n        return matchTenantRes[1];\n    };\n    /**\n     * Validates a tenant options object. Throws an error on failure.\n     *\n     * @param {any} request The tenant options object to validate.\n     * @param {boolean} createRequest Whether this is a create request.\n     */\n    Tenant.validate = function (request, createRequest) {\n        var validKeys = {\n            displayName: true,\n            emailSignInConfig: true,\n        };\n        var label = createRequest ? 'CreateTenantRequest' : 'UpdateTenantRequest';\n        if (!validator.isNonNullObject(request)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + label + \"\\\" must be a valid non-null object.\");\n        }\n        // Check for unsupported top level attributes.\n        for (var key in request) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + key + \"\\\" is not a valid \" + label + \" parameter.\");\n            }\n        }\n        // Validate displayName type if provided.\n        if (typeof request.displayName !== 'undefined' &&\n            !validator.isNonEmptyString(request.displayName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + label + \".displayName\\\" must be a valid non-empty string.\");\n        }\n        // Validate emailSignInConfig type if provided.\n        if (typeof request.emailSignInConfig !== 'undefined') {\n            // This will throw an error if invalid.\n            auth_config_1.EmailSignInConfig.buildServerRequest(request.emailSignInConfig);\n        }\n    };\n    /** @return {object} The plain object representation of the tenant. */\n    Tenant.prototype.toJSON = function () {\n        return {\n            tenantId: this.tenantId,\n            displayName: this.displayName,\n            emailSignInConfig: this.emailSignInConfig && this.emailSignInConfig.toJSON(),\n        };\n    };\n    return Tenant;\n}());\nexports.Tenant = Tenant;\n"]},"metadata":{},"sourceType":"script"}