{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst resolver_1 = require(\"./resolver\");\n\nfunction getUdsName(target) {\n  /* Due to how this resolver is registered, it should only be constructed\n   * with strings that start with 'unix:'. Other strings may result in\n   * nonsensical output. If the string starts with 'unix://' that entire\n   * prefix needs to be ignored */\n  if (target.startsWith('unix://')) {\n    return target.substring(7);\n  } else {\n    return target.substring(5);\n  }\n}\n\nclass UdsResolver {\n  constructor(target, listener) {\n    this.listener = listener;\n    this.addresses = [];\n    this.addresses = [{\n      path: getUdsName(target)\n    }];\n  }\n\n  updateResolution() {\n    process.nextTick(this.listener.onSuccessfulResolution, this.addresses, null, null);\n  }\n\n  static getDefaultAuthority(target) {\n    return 'localhost';\n  }\n\n}\n\nfunction setup() {\n  resolver_1.registerResolver('unix:', UdsResolver);\n}\n\nexports.setup = setup;","map":{"version":3,"sources":["../../src/resolver-uds.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAQA,SAAS,UAAT,CAAoB,MAApB,EAAkC;AAChC;;;;AAIA,MAAI,MAAM,CAAC,UAAP,CAAkB,SAAlB,CAAJ,EAAkC;AAChC,WAAO,MAAM,CAAC,SAAP,CAAiB,CAAjB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,MAAM,CAAC,SAAP,CAAiB,CAAjB,CAAP;AACD;AACF;;AAED,MAAM,WAAN,CAAiB;AAEf,EAAA,WAAA,CAAY,MAAZ,EAAoC,QAApC,EAA8D;AAA1B,SAAA,QAAA,GAAA,QAAA;AAD5B,SAAA,SAAA,GAAiC,EAAjC;AAEN,SAAK,SAAL,GAAiB,CAAC;AAAE,MAAA,IAAI,EAAE,UAAU,CAAC,MAAD;AAAlB,KAAD,CAAjB;AACD;;AACD,EAAA,gBAAgB,GAAA;AACd,IAAA,OAAO,CAAC,QAAR,CACE,KAAK,QAAL,CAAc,sBADhB,EAEE,KAAK,SAFP,EAGE,IAHF,EAIE,IAJF;AAMD;;AAED,SAAO,mBAAP,CAA2B,MAA3B,EAAyC;AACvC,WAAO,WAAP;AACD;;AAhBc;;AAmBjB,SAAgB,KAAhB,GAAqB;AACnB,EAAA,UAAA,CAAA,gBAAA,CAAiB,OAAjB,EAA0B,WAA1B;AACD;;AAFD,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst resolver_1 = require(\"./resolver\");\nfunction getUdsName(target) {\n    /* Due to how this resolver is registered, it should only be constructed\n     * with strings that start with 'unix:'. Other strings may result in\n     * nonsensical output. If the string starts with 'unix://' that entire\n     * prefix needs to be ignored */\n    if (target.startsWith('unix://')) {\n        return target.substring(7);\n    }\n    else {\n        return target.substring(5);\n    }\n}\nclass UdsResolver {\n    constructor(target, listener) {\n        this.listener = listener;\n        this.addresses = [];\n        this.addresses = [{ path: getUdsName(target) }];\n    }\n    updateResolution() {\n        process.nextTick(this.listener.onSuccessfulResolution, this.addresses, null, null);\n    }\n    static getDefaultAuthority(target) {\n        return 'localhost';\n    }\n}\nfunction setup() {\n    resolver_1.registerResolver('unix:', UdsResolver);\n}\nexports.setup = setup;\n//# sourceMappingURL=resolver-uds.js.map"]},"metadata":{},"sourceType":"script"}