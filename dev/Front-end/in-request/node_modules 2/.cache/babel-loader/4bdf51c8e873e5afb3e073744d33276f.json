{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(RadioButton) {\n  var DocumentedRadioButton = describe(RadioButton).availableAt(getAvailableAtBadge('RadioButton')).description('A radio button control.').details(\"RadioButton should typically not be used directly.\\n      Instead, use RadioButtonGroup.\").usage(\"import { RadioButton } from 'grommet';\\n<RadioButton />\").intrinsicElement('input');\n  DocumentedRadioButton.propTypes = {\n    checked: PropTypes.bool.description('Same as React <input checked={} />'),\n    children: PropTypes.func.description(\"Function that will be called to render the visual representation.\\n      It will be passed an object indicating whether the button is checked. It\\n      should return a react element.\\n      For example:\\n      `children={({ checked }) => <Box ...>{...}</Box>}`\\n      \"),\n    disabled: PropTypes.bool.description(\"Same as React <input disabled={} />. Also adds a hidden input element\\nwith the same name so form submissions work.\"),\n    id: PropTypes.string.description('The DOM id attribute value to use for the underlying <input/> element.'),\n    label: PropTypes.node.description('Label text to place next to the control.'),\n    name: PropTypes.string.description(\"The DOM name attribute value to use for the underlying <input/>\\n       element.\").isRequired,\n    onChange: PropTypes.func.description(\"Function that will be called when the user clicks the radio button. It\\n      will be passed a React event object. The current state can be accessed\\n      via event.target.checked. Same as React <input onChange={} />.\")\n  };\n  return DocumentedRadioButton;\n};\nexport var themeDoc = {\n  'radioButton.border.color': {\n    description: 'The color of the border of the Radio Button.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{dark: 'rgba(255, 255, 255, 0.5), light: 'rgba(0, 0, 0, 0.15)}\"\n  },\n  'radioButton.border.width': {\n    description: 'The width size of the border of the RadioButton.',\n    type: 'string',\n    defaultValue: '2px'\n  },\n  'radioButton.check.color': {\n    description: 'The color of the checked icon in the RadioButton.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'undefined'\n  },\n  'radioButton.check.extend': {\n    description: 'Any additional style for the checked RadioButton.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.check.radius': {\n    description: 'The border-radius of the RadioButton.',\n    type: 'string',\n    defaultValue: '100%'\n  },\n  'radioButton.extend': {\n    description: 'Any additional style for the RadioButton.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.gap': {\n    description: 'The gap between the label and the RadioButton itself.',\n    type: 'string',\n    defaultValue: 'small'\n  },\n  'radioButton.size': {\n    description: 'The size of the RadioButton.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'radioButton.hover.border.color': {\n    description: \"The color of the RadioButton border when hovered over.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: '{dark: white, light: black}'\n  },\n  'radioButton.icon.extend': {\n    description: 'Any additional style for the RadioButton icon.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.icon.size': {\n    description: 'The size of the icon in the RadioButton.',\n    type: 'string'\n  }\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/RadioButton/doc.js"],"names":["describe","PropTypes","getAvailableAtBadge","doc","RadioButton","DocumentedRadioButton","availableAt","description","details","usage","intrinsicElement","propTypes","checked","bool","children","func","disabled","id","string","label","node","name","isRequired","onChange","themeDoc","type","defaultValue"],"mappings":"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","sourcesContent":["import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(RadioButton) {\n  var DocumentedRadioButton = describe(RadioButton).availableAt(getAvailableAtBadge('RadioButton')).description('A radio button control.').details(\"RadioButton should typically not be used directly.\\n      Instead, use RadioButtonGroup.\").usage(\"import { RadioButton } from 'grommet';\\n<RadioButton />\").intrinsicElement('input');\n  DocumentedRadioButton.propTypes = {\n    checked: PropTypes.bool.description('Same as React <input checked={} />'),\n    children: PropTypes.func.description(\"Function that will be called to render the visual representation.\\n      It will be passed an object indicating whether the button is checked. It\\n      should return a react element.\\n      For example:\\n      `children={({ checked }) => <Box ...>{...}</Box>}`\\n      \"),\n    disabled: PropTypes.bool.description(\"Same as React <input disabled={} />. Also adds a hidden input element\\nwith the same name so form submissions work.\"),\n    id: PropTypes.string.description('The DOM id attribute value to use for the underlying <input/> element.'),\n    label: PropTypes.node.description('Label text to place next to the control.'),\n    name: PropTypes.string.description(\"The DOM name attribute value to use for the underlying <input/>\\n       element.\").isRequired,\n    onChange: PropTypes.func.description(\"Function that will be called when the user clicks the radio button. It\\n      will be passed a React event object. The current state can be accessed\\n      via event.target.checked. Same as React <input onChange={} />.\")\n  };\n  return DocumentedRadioButton;\n};\nexport var themeDoc = {\n  'radioButton.border.color': {\n    description: 'The color of the border of the Radio Button.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{dark: 'rgba(255, 255, 255, 0.5), light: 'rgba(0, 0, 0, 0.15)}\"\n  },\n  'radioButton.border.width': {\n    description: 'The width size of the border of the RadioButton.',\n    type: 'string',\n    defaultValue: '2px'\n  },\n  'radioButton.check.color': {\n    description: 'The color of the checked icon in the RadioButton.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'undefined'\n  },\n  'radioButton.check.extend': {\n    description: 'Any additional style for the checked RadioButton.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.check.radius': {\n    description: 'The border-radius of the RadioButton.',\n    type: 'string',\n    defaultValue: '100%'\n  },\n  'radioButton.extend': {\n    description: 'Any additional style for the RadioButton.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.gap': {\n    description: 'The gap between the label and the RadioButton itself.',\n    type: 'string',\n    defaultValue: 'small'\n  },\n  'radioButton.size': {\n    description: 'The size of the RadioButton.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'radioButton.hover.border.color': {\n    description: \"The color of the RadioButton border when hovered over.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: '{dark: white, light: black}'\n  },\n  'radioButton.icon.extend': {\n    description: 'Any additional style for the RadioButton icon.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.icon.size': {\n    description: 'The size of the icon in the RadioButton.',\n    type: 'string'\n  }\n};"]},"metadata":{},"sourceType":"module"}