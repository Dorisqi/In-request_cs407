{"ast":null,"code":"'use strict';\n\nconst pTry = require('p-try');\n\nconst pLimit = concurrency => {\n  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n    return Promise.reject(new TypeError('Expected `concurrency` to be a number from 1 and up'));\n  }\n\n  const queue = [];\n  let activeCount = 0;\n\n  const next = () => {\n    activeCount--;\n\n    if (queue.length > 0) {\n      queue.shift()();\n    }\n  };\n\n  const run = (fn, resolve, ...args) => {\n    activeCount++;\n    const result = pTry(fn, ...args);\n    resolve(result);\n    result.then(next, next);\n  };\n\n  const enqueue = (fn, resolve, ...args) => {\n    if (activeCount < concurrency) {\n      run(fn, resolve, ...args);\n    } else {\n      queue.push(run.bind(null, fn, resolve, ...args));\n    }\n  };\n\n  const generator = (fn, ...args) => new Promise(resolve => enqueue(fn, resolve, ...args));\n\n  Object.defineProperties(generator, {\n    activeCount: {\n      get: () => activeCount\n    },\n    pendingCount: {\n      get: () => queue.length\n    }\n  });\n  return generator;\n};\n\nmodule.exports = pLimit;\nmodule.exports.default = pLimit;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/p-limit/index.js"],"names":["pTry","require","pLimit","concurrency","Number","isInteger","Infinity","Promise","reject","TypeError","queue","activeCount","next","length","shift","run","fn","resolve","args","result","then","enqueue","push","bind","generator","Object","defineProperties","get","pendingCount","module","exports","default"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,MAAMC,MAAM,GAAGC,WAAW,IAAI;AAC7B,MAAI,EAAE,CAACC,MAAM,CAACC,SAAP,CAAiBF,WAAjB,KAAiCA,WAAW,KAAKG,QAAlD,KAA+DH,WAAW,GAAG,CAA/E,CAAJ,EAAuF;AACtF,WAAOI,OAAO,CAACC,MAAR,CAAe,IAAIC,SAAJ,CAAc,qDAAd,CAAf,CAAP;AACA;;AAED,QAAMC,KAAK,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,CAAlB;;AAEA,QAAMC,IAAI,GAAG,MAAM;AAClBD,IAAAA,WAAW;;AAEX,QAAID,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;AACrBH,MAAAA,KAAK,CAACI,KAAN;AACA;AACD,GAND;;AAQA,QAAMC,GAAG,GAAG,CAACC,EAAD,EAAKC,OAAL,EAAc,GAAGC,IAAjB,KAA0B;AACrCP,IAAAA,WAAW;AAEX,UAAMQ,MAAM,GAAGnB,IAAI,CAACgB,EAAD,EAAK,GAAGE,IAAR,CAAnB;AAEAD,IAAAA,OAAO,CAACE,MAAD,CAAP;AAEAA,IAAAA,MAAM,CAACC,IAAP,CAAYR,IAAZ,EAAkBA,IAAlB;AACA,GARD;;AAUA,QAAMS,OAAO,GAAG,CAACL,EAAD,EAAKC,OAAL,EAAc,GAAGC,IAAjB,KAA0B;AACzC,QAAIP,WAAW,GAAGR,WAAlB,EAA+B;AAC9BY,MAAAA,GAAG,CAACC,EAAD,EAAKC,OAAL,EAAc,GAAGC,IAAjB,CAAH;AACA,KAFD,MAEO;AACNR,MAAAA,KAAK,CAACY,IAAN,CAAWP,GAAG,CAACQ,IAAJ,CAAS,IAAT,EAAeP,EAAf,EAAmBC,OAAnB,EAA4B,GAAGC,IAA/B,CAAX;AACA;AACD,GAND;;AAQA,QAAMM,SAAS,GAAG,CAACR,EAAD,EAAK,GAAGE,IAAR,KAAiB,IAAIX,OAAJ,CAAYU,OAAO,IAAII,OAAO,CAACL,EAAD,EAAKC,OAAL,EAAc,GAAGC,IAAjB,CAA9B,CAAnC;;AACAO,EAAAA,MAAM,CAACC,gBAAP,CAAwBF,SAAxB,EAAmC;AAClCb,IAAAA,WAAW,EAAE;AACZgB,MAAAA,GAAG,EAAE,MAAMhB;AADC,KADqB;AAIlCiB,IAAAA,YAAY,EAAE;AACbD,MAAAA,GAAG,EAAE,MAAMjB,KAAK,CAACG;AADJ;AAJoB,GAAnC;AASA,SAAOW,SAAP;AACA,CA7CD;;AA+CAK,MAAM,CAACC,OAAP,GAAiB5B,MAAjB;AACA2B,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyB7B,MAAzB","sourcesContent":["'use strict';\nconst pTry = require('p-try');\n\nconst pLimit = concurrency => {\n\tif (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n\t\treturn Promise.reject(new TypeError('Expected `concurrency` to be a number from 1 and up'));\n\t}\n\n\tconst queue = [];\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.length > 0) {\n\t\t\tqueue.shift()();\n\t\t}\n\t};\n\n\tconst run = (fn, resolve, ...args) => {\n\t\tactiveCount++;\n\n\t\tconst result = pTry(fn, ...args);\n\n\t\tresolve(result);\n\n\t\tresult.then(next, next);\n\t};\n\n\tconst enqueue = (fn, resolve, ...args) => {\n\t\tif (activeCount < concurrency) {\n\t\t\trun(fn, resolve, ...args);\n\t\t} else {\n\t\t\tqueue.push(run.bind(null, fn, resolve, ...args));\n\t\t}\n\t};\n\n\tconst generator = (fn, ...args) => new Promise(resolve => enqueue(fn, resolve, ...args));\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.length\n\t\t}\n\t});\n\n\treturn generator;\n};\n\nmodule.exports = pLimit;\nmodule.exports.default = pLimit;\n"]},"metadata":{},"sourceType":"script"}