{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Root; // extends Namespace\n\nvar Namespace = require(\"./namespace\");\n\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\nvar Field = require(\"./field\"),\n    Enum = require(\"./enum\"),\n    OneOf = require(\"./oneof\"),\n    util = require(\"./util\");\n\nvar Type, // cyclic\nparse, // might be excluded\ncommon; // \"\n\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\n\nfunction Root(options) {\n  Namespace.call(this, \"\", options);\n  /**\r\n   * Deferred extension fields.\r\n   * @type {Field[]}\r\n   */\n\n  this.deferred = [];\n  /**\r\n   * Resolved file names of loaded files.\r\n   * @type {string[]}\r\n   */\n\n  this.files = [];\n}\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\n\n\nRoot.fromJSON = function fromJSON(json, root) {\n  if (!root) root = new Root();\n  if (json.options) root.setOptions(json.options);\n  return root.addJSON(json.nested);\n};\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\n\n\nRoot.prototype.resolvePath = util.path.resolve; // A symbol-like function to safely signal synchronous loading\n\n/* istanbul ignore next */\n\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\n\n\nRoot.prototype.load = function load(filename, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = undefined;\n  }\n\n  var self = this;\n  if (!callback) return util.asPromise(load, self, filename, options);\n  var sync = callback === SYNC; // undocumented\n  // Finishes loading by calling the callback (exactly once)\n\n  function finish(err, root) {\n    /* istanbul ignore if */\n    if (!callback) return;\n    var cb = callback;\n    callback = null;\n    if (sync) throw err;\n    cb(err, root);\n  } // Processes a single file\n\n\n  function process(filename, source) {\n    try {\n      if (util.isString(source) && source.charAt(0) === \"{\") source = JSON.parse(source);\n      if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);else {\n        parse.filename = filename;\n        var parsed = parse(source, self, options),\n            resolved,\n            i = 0;\n        if (parsed.imports) for (; i < parsed.imports.length; ++i) if (resolved = self.resolvePath(filename, parsed.imports[i])) fetch(resolved);\n        if (parsed.weakImports) for (i = 0; i < parsed.weakImports.length; ++i) if (resolved = self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);\n      }\n    } catch (err) {\n      finish(err);\n    }\n\n    if (!sync && !queued) finish(null, self); // only once anyway\n  } // Fetches a single file\n\n\n  function fetch(filename, weak) {\n    // Strip path if this file references a bundled definition\n    var idx = filename.lastIndexOf(\"google/protobuf/\");\n\n    if (idx > -1) {\n      var altname = filename.substring(idx);\n      if (altname in common) filename = altname;\n    } // Skip if already loaded / attempted\n\n\n    if (self.files.indexOf(filename) > -1) return;\n    self.files.push(filename); // Shortcut bundled definitions\n\n    if (filename in common) {\n      if (sync) process(filename, common[filename]);else {\n        ++queued;\n        setTimeout(function () {\n          --queued;\n          process(filename, common[filename]);\n        });\n      }\n      return;\n    } // Otherwise fetch from disk or network\n\n\n    if (sync) {\n      var source;\n\n      try {\n        source = util.fs.readFileSync(filename).toString(\"utf8\");\n      } catch (err) {\n        if (!weak) finish(err);\n        return;\n      }\n\n      process(filename, source);\n    } else {\n      ++queued;\n      util.fetch(filename, function (err, source) {\n        --queued;\n        /* istanbul ignore if */\n\n        if (!callback) return; // terminated meanwhile\n\n        if (err) {\n          /* istanbul ignore else */\n          if (!weak) finish(err);else if (!queued) // can't be covered reliably\n            finish(null, self);\n          return;\n        }\n\n        process(filename, source);\n      });\n    }\n  }\n\n  var queued = 0; // Assembling the root namespace doesn't require working type\n  // references anymore, so we can load everything in parallel\n\n  if (util.isString(filename)) filename = [filename];\n\n  for (var i = 0, resolved; i < filename.length; ++i) if (resolved = self.resolvePath(\"\", filename[i])) fetch(resolved);\n\n  if (sync) return self;\n  if (!queued) finish(null, self);\n  return undefined;\n}; // function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\n\n\nRoot.prototype.loadSync = function loadSync(filename, options) {\n  if (!util.isNode) throw Error(\"not supported\");\n  return this.load(filename, options, SYNC);\n};\n/**\r\n * @override\r\n */\n\n\nRoot.prototype.resolveAll = function resolveAll() {\n  if (this.deferred.length) throw Error(\"unresolvable extensions: \" + this.deferred.map(function (field) {\n    return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n  }).join(\", \"));\n  return Namespace.prototype.resolveAll.call(this);\n}; // only uppercased (and thus conflict-free) children are exposed, see below\n\n\nvar exposeRe = /^[A-Z]/;\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\n\nfunction tryHandleExtension(root, field) {\n  var extendedType = field.parent.lookup(field.extend);\n\n  if (extendedType) {\n    var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n    sisterField.declaringField = field;\n    field.extensionField = sisterField;\n    extendedType.add(sisterField);\n    return true;\n  }\n\n  return false;\n}\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\n\n\nRoot.prototype._handleAdd = function _handleAdd(object) {\n  if (object instanceof Field) {\n    if (\n    /* an extension field (implies not part of a oneof) */\n    object.extend !== undefined &&\n    /* not already handled */\n    !object.extensionField) if (!tryHandleExtension(this, object)) this.deferred.push(object);\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent\n  } else if (!(object instanceof OneOf))\n    /* everything else is a namespace */\n    {\n      if (object instanceof Type) // Try to handle any deferred extensions\n        for (var i = 0; i < this.deferred.length;) if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);else ++i;\n\n      for (var j = 0; j <\n      /* initializes */\n      object.nestedArray.length; ++j) // recurse into the namespace\n      this._handleAdd(object._nestedArray[j]);\n\n      if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent\n    } // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n  // properties of namespaces just like static code does. This allows using a .d.ts generated for\n  // a static module with reflection-based solutions where the condition is met.\n\n};\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\n\n\nRoot.prototype._handleRemove = function _handleRemove(object) {\n  if (object instanceof Field) {\n    if (\n    /* an extension field */\n    object.extend !== undefined) {\n      if (\n      /* already handled */\n      object.extensionField) {\n        // remove its sister field\n        object.extensionField.parent.remove(object.extensionField);\n        object.extensionField = null;\n      } else {\n        // cancel the extension\n        var index = this.deferred.indexOf(object);\n        /* istanbul ignore else */\n\n        if (index > -1) this.deferred.splice(index, 1);\n      }\n    }\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values\n  } else if (object instanceof Namespace) {\n    for (var i = 0; i <\n    /* initializes */\n    object.nestedArray.length; ++i) // recurse into the namespace\n    this._handleRemove(object._nestedArray[i]);\n\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces\n  }\n}; // Sets up cyclic dependencies (called in index-light)\n\n\nRoot._configure = function (Type_, parse_, common_) {\n  Type = Type_;\n  parse = parse_;\n  common = common_;\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/protobufjs/src/root.js"],"names":["module","exports","Root","Namespace","require","prototype","Object","create","constructor","className","Field","Enum","OneOf","util","Type","parse","common","options","call","deferred","files","fromJSON","json","root","setOptions","addJSON","nested","resolvePath","path","resolve","SYNC","load","filename","callback","undefined","self","asPromise","sync","finish","err","cb","process","source","isString","charAt","JSON","parsed","resolved","i","imports","length","fetch","weakImports","queued","weak","idx","lastIndexOf","altname","substring","indexOf","push","setTimeout","fs","readFileSync","toString","loadSync","isNode","Error","resolveAll","map","field","extend","parent","fullName","join","exposeRe","tryHandleExtension","extendedType","lookup","sisterField","id","type","rule","declaringField","extensionField","add","_handleAdd","object","test","name","values","splice","j","nestedArray","_nestedArray","_handleRemove","remove","index","_configure","Type_","parse_","common_"],"mappings":"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","sourcesContent":["\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(\"./field\"),\r\n    Enum    = require(\"./enum\"),\r\n    OneOf   = require(\"./oneof\"),\r\n    util    = require(\"./util\");\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type   = Type_;\r\n    parse  = parse_;\r\n    common = common_;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}