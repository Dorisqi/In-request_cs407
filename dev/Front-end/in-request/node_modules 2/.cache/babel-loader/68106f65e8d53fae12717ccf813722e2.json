{"ast":null,"code":"/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n\nvar project_management_api_request_1 = require(\"./project-management-api-request\");\n\nvar app_metadata_1 = require(\"./app-metadata\");\n\nvar AndroidApp =\n/** @class */\nfunction () {\n  function AndroidApp(appId, requestHandler) {\n    this.appId = appId;\n    this.requestHandler = requestHandler;\n\n    if (!validator.isNonEmptyString(appId)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'appId must be a non-empty string.');\n    }\n\n    this.resourceName = \"projects/-/androidApps/\" + appId;\n  }\n\n  AndroidApp.prototype.getMetadata = function () {\n    return this.requestHandler.getResource(this.resourceName).then(function (responseData) {\n      project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getMetadata()\\'s responseData must be a non-null object.');\n      var requiredFieldsList = ['name', 'appId', 'projectId', 'packageName'];\n      requiredFieldsList.forEach(function (requiredField) {\n        project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(responseData[requiredField]), responseData, \"getMetadata()'s responseData.\" + requiredField + \" must be a non-empty string.\");\n      });\n      var metadata = {\n        platform: app_metadata_1.AppPlatform.ANDROID,\n        resourceName: responseData.name,\n        appId: responseData.appId,\n        displayName: responseData.displayName || null,\n        projectId: responseData.projectId,\n        packageName: responseData.packageName\n      };\n      return metadata;\n    });\n  };\n\n  AndroidApp.prototype.setDisplayName = function (newDisplayName) {\n    return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n  };\n\n  AndroidApp.prototype.getShaCertificates = function () {\n    return this.requestHandler.getAndroidShaCertificates(this.resourceName).then(function (responseData) {\n      project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getShaCertificates()\\'s responseData must be a non-null object.');\n\n      if (!responseData.certificates) {\n        return [];\n      }\n\n      project_management_api_request_1.assertServerResponse(validator.isArray(responseData.certificates), responseData, '\"certificates\" field must be present in the getShaCertificates() response data.');\n      var requiredFieldsList = ['name', 'shaHash'];\n      return responseData.certificates.map(function (certificateJson) {\n        requiredFieldsList.forEach(function (requiredField) {\n          project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(certificateJson[requiredField]), responseData, \"getShaCertificates()'s responseData.certificates[].\" + requiredField + \" must be a \" + \"non-empty string.\");\n        });\n        return new ShaCertificate(certificateJson.shaHash, certificateJson.name);\n      });\n    });\n  };\n\n  AndroidApp.prototype.addShaCertificate = function (certificateToAdd) {\n    return this.requestHandler.addAndroidShaCertificate(this.resourceName, certificateToAdd);\n  };\n\n  AndroidApp.prototype.deleteShaCertificate = function (certificateToDelete) {\n    if (!certificateToDelete.resourceName) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'Specified certificate does not include a resourceName. (Use AndroidApp.getShaCertificates() to retrieve ' + 'certificates with a resourceName.');\n    }\n\n    return this.requestHandler.deleteResource(certificateToDelete.resourceName);\n  };\n  /**\n   * @return {Promise<string>} A promise that resolves to a UTF-8 JSON string, typically intended to\n   *     be written to a JSON file.\n   */\n\n\n  AndroidApp.prototype.getConfig = function () {\n    return this.requestHandler.getConfig(this.resourceName).then(function (responseData) {\n      project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getConfig()\\'s responseData must be a non-null object.');\n      var base64ConfigFileContents = responseData.configFileContents;\n      project_management_api_request_1.assertServerResponse(validator.isBase64String(base64ConfigFileContents), responseData, \"getConfig()'s responseData.configFileContents must be a base64 string.\");\n      return Buffer.from(base64ConfigFileContents, 'base64').toString('utf8');\n    });\n  };\n\n  return AndroidApp;\n}();\n\nexports.AndroidApp = AndroidApp;\n\nvar ShaCertificate =\n/** @class */\nfunction () {\n  /**\n   * Creates a ShaCertificate using the given hash. The ShaCertificate's type (eg. 'sha256') is\n   * automatically determined from the hash itself.\n   *\n   * @param shaHash The sha256 or sha1 hash for this certificate.\n   * @param resourceName The Firebase resource name for this certificate. This does not need to be\n   *     set when creating a new certificate.\n   */\n  function ShaCertificate(shaHash, resourceName) {\n    this.shaHash = shaHash;\n    this.resourceName = resourceName;\n\n    if (/^[a-fA-F0-9]{40}$/.test(shaHash)) {\n      this.certType = 'sha1';\n    } else if (/^[a-fA-F0-9]{64}$/.test(shaHash)) {\n      this.certType = 'sha256';\n    } else {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'shaHash must be either a sha256 hash or a sha1 hash.');\n    }\n  }\n\n  return ShaCertificate;\n}();\n\nexports.ShaCertificate = ShaCertificate;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/firebase-admin/lib/project-management/android-app.js"],"names":["Object","defineProperty","exports","value","error_1","require","validator","project_management_api_request_1","app_metadata_1","AndroidApp","appId","requestHandler","isNonEmptyString","FirebaseProjectManagementError","resourceName","prototype","getMetadata","getResource","then","responseData","assertServerResponse","isNonNullObject","requiredFieldsList","forEach","requiredField","metadata","platform","AppPlatform","ANDROID","name","displayName","projectId","packageName","setDisplayName","newDisplayName","getShaCertificates","getAndroidShaCertificates","certificates","isArray","map","certificateJson","ShaCertificate","shaHash","addShaCertificate","certificateToAdd","addAndroidShaCertificate","deleteShaCertificate","certificateToDelete","deleteResource","getConfig","base64ConfigFileContents","configFileContents","isBase64String","Buffer","from","toString","test","certType"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar error_1 = require(\"../utils/error\");\nvar validator = require(\"../utils/validator\");\nvar project_management_api_request_1 = require(\"./project-management-api-request\");\nvar app_metadata_1 = require(\"./app-metadata\");\nvar AndroidApp = /** @class */ (function () {\n    function AndroidApp(appId, requestHandler) {\n        this.appId = appId;\n        this.requestHandler = requestHandler;\n        if (!validator.isNonEmptyString(appId)) {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'appId must be a non-empty string.');\n        }\n        this.resourceName = \"projects/-/androidApps/\" + appId;\n    }\n    AndroidApp.prototype.getMetadata = function () {\n        return this.requestHandler.getResource(this.resourceName)\n            .then(function (responseData) {\n            project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getMetadata()\\'s responseData must be a non-null object.');\n            var requiredFieldsList = ['name', 'appId', 'projectId', 'packageName'];\n            requiredFieldsList.forEach(function (requiredField) {\n                project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(responseData[requiredField]), responseData, \"getMetadata()'s responseData.\" + requiredField + \" must be a non-empty string.\");\n            });\n            var metadata = {\n                platform: app_metadata_1.AppPlatform.ANDROID,\n                resourceName: responseData.name,\n                appId: responseData.appId,\n                displayName: responseData.displayName || null,\n                projectId: responseData.projectId,\n                packageName: responseData.packageName,\n            };\n            return metadata;\n        });\n    };\n    AndroidApp.prototype.setDisplayName = function (newDisplayName) {\n        return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n    };\n    AndroidApp.prototype.getShaCertificates = function () {\n        return this.requestHandler.getAndroidShaCertificates(this.resourceName)\n            .then(function (responseData) {\n            project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getShaCertificates()\\'s responseData must be a non-null object.');\n            if (!responseData.certificates) {\n                return [];\n            }\n            project_management_api_request_1.assertServerResponse(validator.isArray(responseData.certificates), responseData, '\"certificates\" field must be present in the getShaCertificates() response data.');\n            var requiredFieldsList = ['name', 'shaHash'];\n            return responseData.certificates.map(function (certificateJson) {\n                requiredFieldsList.forEach(function (requiredField) {\n                    project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(certificateJson[requiredField]), responseData, \"getShaCertificates()'s responseData.certificates[].\" + requiredField + \" must be a \"\n                        + \"non-empty string.\");\n                });\n                return new ShaCertificate(certificateJson.shaHash, certificateJson.name);\n            });\n        });\n    };\n    AndroidApp.prototype.addShaCertificate = function (certificateToAdd) {\n        return this.requestHandler.addAndroidShaCertificate(this.resourceName, certificateToAdd);\n    };\n    AndroidApp.prototype.deleteShaCertificate = function (certificateToDelete) {\n        if (!certificateToDelete.resourceName) {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'Specified certificate does not include a resourceName. (Use AndroidApp.getShaCertificates() to retrieve ' +\n                'certificates with a resourceName.');\n        }\n        return this.requestHandler.deleteResource(certificateToDelete.resourceName);\n    };\n    /**\n     * @return {Promise<string>} A promise that resolves to a UTF-8 JSON string, typically intended to\n     *     be written to a JSON file.\n     */\n    AndroidApp.prototype.getConfig = function () {\n        return this.requestHandler.getConfig(this.resourceName)\n            .then(function (responseData) {\n            project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getConfig()\\'s responseData must be a non-null object.');\n            var base64ConfigFileContents = responseData.configFileContents;\n            project_management_api_request_1.assertServerResponse(validator.isBase64String(base64ConfigFileContents), responseData, \"getConfig()'s responseData.configFileContents must be a base64 string.\");\n            return Buffer.from(base64ConfigFileContents, 'base64').toString('utf8');\n        });\n    };\n    return AndroidApp;\n}());\nexports.AndroidApp = AndroidApp;\nvar ShaCertificate = /** @class */ (function () {\n    /**\n     * Creates a ShaCertificate using the given hash. The ShaCertificate's type (eg. 'sha256') is\n     * automatically determined from the hash itself.\n     *\n     * @param shaHash The sha256 or sha1 hash for this certificate.\n     * @param resourceName The Firebase resource name for this certificate. This does not need to be\n     *     set when creating a new certificate.\n     */\n    function ShaCertificate(shaHash, resourceName) {\n        this.shaHash = shaHash;\n        this.resourceName = resourceName;\n        if (/^[a-fA-F0-9]{40}$/.test(shaHash)) {\n            this.certType = 'sha1';\n        }\n        else if (/^[a-fA-F0-9]{64}$/.test(shaHash)) {\n            this.certType = 'sha256';\n        }\n        else {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'shaHash must be either a sha256 hash or a sha1 hash.');\n        }\n    }\n    return ShaCertificate;\n}());\nexports.ShaCertificate = ShaCertificate;\n"]},"metadata":{},"sourceType":"script"}