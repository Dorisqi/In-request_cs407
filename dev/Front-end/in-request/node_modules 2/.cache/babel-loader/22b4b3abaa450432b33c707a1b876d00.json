{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Reader;\n\nvar util = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits = util.LongBits,\n    utf8 = util.utf8;\n/* istanbul ignore next */\n\nfunction indexOutOfRange(reader, writeLength) {\n  return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\n\n\nfunction Reader(buffer) {\n  /**\r\n   * Read buffer.\r\n   * @type {Uint8Array}\r\n   */\n  this.buf = buffer;\n  /**\r\n   * Read buffer position.\r\n   * @type {number}\r\n   */\n\n  this.pos = 0;\n  /**\r\n   * Read buffer length.\r\n   * @type {number}\r\n   */\n\n  this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\" ? function create_typed_array(buffer) {\n  if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);\n  throw Error(\"illegal buffer\");\n}\n/* istanbul ignore next */\n: function create_array(buffer) {\n  if (Array.isArray(buffer)) return new Reader(buffer);\n  throw Error(\"illegal buffer\");\n};\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\n\nReader.create = util.Buffer ? function create_buffer_setup(buffer) {\n  return (Reader.create = function create_buffer(buffer) {\n    return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer)\n    /* istanbul ignore next */\n    : create_array(buffer);\n  })(buffer);\n}\n/* istanbul ignore next */\n: create_array;\nReader.prototype._slice = util.Array.prototype.subarray ||\n/* istanbul ignore next */\nutil.Array.prototype.slice;\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\n\nReader.prototype.uint32 = function read_uint32_setup() {\n  var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n\n  return function read_uint32() {\n    value = (this.buf[this.pos] & 127) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    /* istanbul ignore if */\n\n    if ((this.pos += 5) > this.len) {\n      this.pos = this.len;\n      throw indexOutOfRange(this, 10);\n    }\n\n    return value;\n  };\n}();\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\n\n\nReader.prototype.int32 = function read_int32() {\n  return this.uint32() | 0;\n};\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\n\n\nReader.prototype.sint32 = function read_sint32() {\n  var value = this.uint32();\n  return value >>> 1 ^ -(value & 1) | 0;\n};\n/* eslint-disable no-invalid-this */\n\n\nfunction readLongVarint() {\n  // tends to deopt with local vars for octet etc.\n  var bits = new LongBits(0, 0);\n  var i = 0;\n\n  if (this.len - this.pos > 4) {\n    // fast route (lo)\n    for (; i < 4; ++i) {\n      // 1st..4th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    } // 5th\n\n\n    bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n    bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;\n    if (this.buf[this.pos++] < 128) return bits;\n    i = 0;\n  } else {\n    for (; i < 3; ++i) {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this); // 1st..3th\n\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    } // 4th\n\n\n    bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n    return bits;\n  }\n\n  if (this.len - this.pos > 4) {\n    // fast route (hi)\n    for (; i < 5; ++i) {\n      // 6th..10th\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n  } else {\n    for (; i < 5; ++i) {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this); // 6th..10th\n\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n  }\n  /* istanbul ignore next */\n\n\n  throw Error(\"invalid varint encoding\");\n}\n/* eslint-enable no-invalid-this */\n\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\n\n\nReader.prototype.bool = function read_bool() {\n  return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) {\n  // note that this uses `end`, not `pos`\n  return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;\n}\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\n\n\nReader.prototype.fixed32 = function read_fixed32() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  return readFixed32_end(this.buf, this.pos += 4);\n};\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\n\n\nReader.prototype.sfixed32 = function read_sfixed32() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n/* eslint-disable no-invalid-this */\n\n\nfunction readFixed64()\n/* this: Reader */\n{\n  /* istanbul ignore if */\n  if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);\n  return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n/* eslint-enable no-invalid-this */\n\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\n\n\nReader.prototype.float = function read_float() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  var value = util.float.readFloatLE(this.buf, this.pos);\n  this.pos += 4;\n  return value;\n};\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\n\n\nReader.prototype.double = function read_double() {\n  /* istanbul ignore if */\n  if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);\n  var value = util.float.readDoubleLE(this.buf, this.pos);\n  this.pos += 8;\n  return value;\n};\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\n\n\nReader.prototype.bytes = function read_bytes() {\n  var length = this.uint32(),\n      start = this.pos,\n      end = this.pos + length;\n  /* istanbul ignore if */\n\n  if (end > this.len) throw indexOutOfRange(this, length);\n  this.pos += length;\n  if (Array.isArray(this.buf)) // plain array\n    return this.buf.slice(start, end);\n  return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n  ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);\n};\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\n\n\nReader.prototype.string = function read_string() {\n  var bytes = this.bytes();\n  return utf8.read(bytes, 0, bytes.length);\n};\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\n\n\nReader.prototype.skip = function skip(length) {\n  if (typeof length === \"number\") {\n    /* istanbul ignore if */\n    if (this.pos + length > this.len) throw indexOutOfRange(this, length);\n    this.pos += length;\n  } else {\n    do {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this);\n    } while (this.buf[this.pos++] & 128);\n  }\n\n  return this;\n};\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\n\n\nReader.prototype.skipType = function (wireType) {\n  switch (wireType) {\n    case 0:\n      this.skip();\n      break;\n\n    case 1:\n      this.skip(8);\n      break;\n\n    case 2:\n      this.skip(this.uint32());\n      break;\n\n    case 3:\n      while ((wireType = this.uint32() & 7) !== 4) {\n        this.skipType(wireType);\n      }\n\n      break;\n\n    case 5:\n      this.skip(4);\n      break;\n\n    /* istanbul ignore next */\n\n    default:\n      throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n  }\n\n  return this;\n};\n\nReader._configure = function (BufferReader_) {\n  BufferReader = BufferReader_;\n  var fn = util.Long ? \"toLong\" :\n  /* istanbul ignore next */\n  \"toNumber\";\n  util.merge(Reader.prototype, {\n    int64: function read_int64() {\n      return readLongVarint.call(this)[fn](false);\n    },\n    uint64: function read_uint64() {\n      return readLongVarint.call(this)[fn](true);\n    },\n    sint64: function read_sint64() {\n      return readLongVarint.call(this).zzDecode()[fn](false);\n    },\n    fixed64: function read_fixed64() {\n      return readFixed64.call(this)[fn](true);\n    },\n    sfixed64: function read_sfixed64() {\n      return readFixed64.call(this)[fn](false);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/protobufjs/src/reader.js"],"names":["module","exports","Reader","util","require","BufferReader","LongBits","utf8","indexOutOfRange","reader","writeLength","RangeError","pos","len","buffer","buf","length","create_array","Uint8Array","create_typed_array","Array","isArray","Error","create","Buffer","create_buffer_setup","create_buffer","isBuffer","prototype","_slice","subarray","slice","uint32","read_uint32_setup","value","read_uint32","int32","read_int32","sint32","read_sint32","readLongVarint","bits","i","lo","hi","bool","read_bool","readFixed32_end","end","fixed32","read_fixed32","sfixed32","read_sfixed32","readFixed64","float","read_float","readFloatLE","double","read_double","readDoubleLE","bytes","read_bytes","start","constructor","call","string","read_string","read","skip","skipType","wireType","_configure","BufferReader_","fn","Long","merge","int64","read_int64","uint64","read_uint64","sint64","read_sint64","zzDecode","fixed64","read_fixed64","sfixed64","read_sfixed64"],"mappings":"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","sourcesContent":["\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"script"}