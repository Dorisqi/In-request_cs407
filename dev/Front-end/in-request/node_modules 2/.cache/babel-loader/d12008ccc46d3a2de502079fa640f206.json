{"ast":null,"code":"/**\n * Password-Based Key-Derivation Function #2 implementation.\n *\n * See RFC 2898 for details.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\nrequire('./hmac');\n\nrequire('./md');\n\nrequire('./util');\n\nvar pkcs5 = forge.pkcs5 = forge.pkcs5 || {};\nvar crypto;\n\nif (forge.util.isNodejs && !forge.options.usePureJavaScript) {\n  crypto = require('crypto');\n}\n/**\n * Derives a key from a password.\n *\n * @param p the password as a binary-encoded string of bytes.\n * @param s the salt as a binary-encoded string of bytes.\n * @param c the iteration count, a positive integer.\n * @param dkLen the intended length, in bytes, of the derived key,\n *          (max: 2^32 - 1) * hash length of the PRF.\n * @param [md] the message digest (or algorithm identifier as a string) to use\n *          in the PRF, defaults to SHA-1.\n * @param [callback(err, key)] presence triggers asynchronous version, called\n *          once the operation completes.\n *\n * @return the derived key, as a binary-encoded string of bytes, for the\n *           synchronous version (if no callback is specified).\n */\n\n\nmodule.exports = forge.pbkdf2 = pkcs5.pbkdf2 = function (p, s, c, dkLen, md, callback) {\n  if (typeof md === 'function') {\n    callback = md;\n    md = null;\n  } // use native implementation if possible and not disabled, note that\n  // some node versions only support SHA-1, others allow digest to be changed\n\n\n  if (forge.util.isNodejs && !forge.options.usePureJavaScript && crypto.pbkdf2 && (md === null || typeof md !== 'object') && (crypto.pbkdf2Sync.length > 4 || !md || md === 'sha1')) {\n    if (typeof md !== 'string') {\n      // default prf to SHA-1\n      md = 'sha1';\n    }\n\n    p = new Buffer(p, 'binary');\n    s = new Buffer(s, 'binary');\n\n    if (!callback) {\n      if (crypto.pbkdf2Sync.length === 4) {\n        return crypto.pbkdf2Sync(p, s, c, dkLen).toString('binary');\n      }\n\n      return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString('binary');\n    }\n\n    if (crypto.pbkdf2Sync.length === 4) {\n      return crypto.pbkdf2(p, s, c, dkLen, function (err, key) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, key.toString('binary'));\n      });\n    }\n\n    return crypto.pbkdf2(p, s, c, dkLen, md, function (err, key) {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(null, key.toString('binary'));\n    });\n  }\n\n  if (typeof md === 'undefined' || md === null) {\n    // default prf to SHA-1\n    md = 'sha1';\n  }\n\n  if (typeof md === 'string') {\n    if (!(md in forge.md.algorithms)) {\n      throw new Error('Unknown hash algorithm: ' + md);\n    }\n\n    md = forge.md[md].create();\n  }\n\n  var hLen = md.digestLength;\n  /* 1. If dkLen > (2^32 - 1) * hLen, output \"derived key too long\" and\n    stop. */\n\n  if (dkLen > 0xFFFFFFFF * hLen) {\n    var err = new Error('Derived key is too long.');\n\n    if (callback) {\n      return callback(err);\n    }\n\n    throw err;\n  }\n  /* 2. Let len be the number of hLen-octet blocks in the derived key,\n    rounding up, and let r be the number of octets in the last\n    block:\n     len = CEIL(dkLen / hLen),\n    r = dkLen - (len - 1) * hLen. */\n\n\n  var len = Math.ceil(dkLen / hLen);\n  var r = dkLen - (len - 1) * hLen;\n  /* 3. For each block of the derived key apply the function F defined\n    below to the password P, the salt S, the iteration count c, and\n    the block index to compute the block:\n     T_1 = F(P, S, c, 1),\n    T_2 = F(P, S, c, 2),\n    ...\n    T_len = F(P, S, c, len),\n     where the function F is defined as the exclusive-or sum of the\n    first c iterates of the underlying pseudorandom function PRF\n    applied to the password P and the concatenation of the salt S\n    and the block index i:\n     F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c\n     where\n     u_1 = PRF(P, S || INT(i)),\n    u_2 = PRF(P, u_1),\n    ...\n    u_c = PRF(P, u_{c-1}).\n     Here, INT(i) is a four-octet encoding of the integer i, most\n    significant octet first. */\n\n  var prf = forge.hmac.create();\n  prf.start(md, p);\n  var dk = '';\n  var xor, u_c, u_c1; // sync version\n\n  if (!callback) {\n    for (var i = 1; i <= len; ++i) {\n      // PRF(P, S || INT(i)) (first iteration)\n      prf.start(null, null);\n      prf.update(s);\n      prf.update(forge.util.int32ToBytes(i));\n      xor = u_c1 = prf.digest().getBytes(); // PRF(P, u_{c-1}) (other iterations)\n\n      for (var j = 2; j <= c; ++j) {\n        prf.start(null, null);\n        prf.update(u_c1);\n        u_c = prf.digest().getBytes(); // F(p, s, c, i)\n\n        xor = forge.util.xorBytes(xor, u_c, hLen);\n        u_c1 = u_c;\n      }\n      /* 4. Concatenate the blocks and extract the first dkLen octets to\n        produce a derived key DK:\n         DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */\n\n\n      dk += i < len ? xor : xor.substr(0, r);\n    }\n    /* 5. Output the derived key DK. */\n\n\n    return dk;\n  } // async version\n\n\n  var i = 1,\n      j;\n\n  function outer() {\n    if (i > len) {\n      // done\n      return callback(null, dk);\n    } // PRF(P, S || INT(i)) (first iteration)\n\n\n    prf.start(null, null);\n    prf.update(s);\n    prf.update(forge.util.int32ToBytes(i));\n    xor = u_c1 = prf.digest().getBytes(); // PRF(P, u_{c-1}) (other iterations)\n\n    j = 2;\n    inner();\n  }\n\n  function inner() {\n    if (j <= c) {\n      prf.start(null, null);\n      prf.update(u_c1);\n      u_c = prf.digest().getBytes(); // F(p, s, c, i)\n\n      xor = forge.util.xorBytes(xor, u_c, hLen);\n      u_c1 = u_c;\n      ++j;\n      return forge.util.setImmediate(inner);\n    }\n    /* 4. Concatenate the blocks and extract the first dkLen octets to\n      produce a derived key DK:\n       DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */\n\n\n    dk += i < len ? xor : xor.substr(0, r);\n    ++i;\n    outer();\n  }\n\n  outer();\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/node-forge/lib/pbkdf2.js"],"names":["forge","require","pkcs5","crypto","util","isNodejs","options","usePureJavaScript","module","exports","pbkdf2","p","s","c","dkLen","md","callback","pbkdf2Sync","length","Buffer","toString","err","key","algorithms","Error","create","hLen","digestLength","len","Math","ceil","r","prf","hmac","start","dk","xor","u_c","u_c1","i","update","int32ToBytes","digest","getBytes","j","xorBytes","substr","outer","inner","setImmediate"],"mappings":"AAAA;;;;;;;;;AASA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AACAA,OAAO,CAAC,QAAD,CAAP;;AACAA,OAAO,CAAC,MAAD,CAAP;;AACAA,OAAO,CAAC,QAAD,CAAP;;AAEA,IAAIC,KAAK,GAAGF,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACE,KAAN,IAAe,EAAzC;AAEA,IAAIC,MAAJ;;AACA,IAAGH,KAAK,CAACI,IAAN,CAAWC,QAAX,IAAuB,CAACL,KAAK,CAACM,OAAN,CAAcC,iBAAzC,EAA4D;AAC1DJ,EAAAA,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAhB;AACD;AAED;;;;;;;;;;;;;;;;;;AAgBAO,MAAM,CAACC,OAAP,GAAiBT,KAAK,CAACU,MAAN,GAAeR,KAAK,CAACQ,MAAN,GAAe,UAC7CC,CAD6C,EAC1CC,CAD0C,EACvCC,CADuC,EACpCC,KADoC,EAC7BC,EAD6B,EACzBC,QADyB,EACf;AAC9B,MAAG,OAAOD,EAAP,KAAc,UAAjB,EAA6B;AAC3BC,IAAAA,QAAQ,GAAGD,EAAX;AACAA,IAAAA,EAAE,GAAG,IAAL;AACD,GAJ6B,CAM9B;AACA;;;AACA,MAAGf,KAAK,CAACI,IAAN,CAAWC,QAAX,IAAuB,CAACL,KAAK,CAACM,OAAN,CAAcC,iBAAtC,IACDJ,MAAM,CAACO,MADN,KACiBK,EAAE,KAAK,IAAP,IAAe,OAAOA,EAAP,KAAc,QAD9C,MAEAZ,MAAM,CAACc,UAAP,CAAkBC,MAAlB,GAA2B,CAA3B,IAAiC,CAACH,EAAD,IAAOA,EAAE,KAAK,MAF/C,CAAH,EAE4D;AAC1D,QAAG,OAAOA,EAAP,KAAc,QAAjB,EAA2B;AACzB;AACAA,MAAAA,EAAE,GAAG,MAAL;AACD;;AACDJ,IAAAA,CAAC,GAAG,IAAIQ,MAAJ,CAAWR,CAAX,EAAc,QAAd,CAAJ;AACAC,IAAAA,CAAC,GAAG,IAAIO,MAAJ,CAAWP,CAAX,EAAc,QAAd,CAAJ;;AACA,QAAG,CAACI,QAAJ,EAAc;AACZ,UAAGb,MAAM,CAACc,UAAP,CAAkBC,MAAlB,KAA6B,CAAhC,EAAmC;AACjC,eAAOf,MAAM,CAACc,UAAP,CAAkBN,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,KAA3B,EAAkCM,QAAlC,CAA2C,QAA3C,CAAP;AACD;;AACD,aAAOjB,MAAM,CAACc,UAAP,CAAkBN,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,KAA3B,EAAkCC,EAAlC,EAAsCK,QAAtC,CAA+C,QAA/C,CAAP;AACD;;AACD,QAAGjB,MAAM,CAACc,UAAP,CAAkBC,MAAlB,KAA6B,CAAhC,EAAmC;AACjC,aAAOf,MAAM,CAACO,MAAP,CAAcC,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,KAAvB,EAA8B,UAASO,GAAT,EAAcC,GAAd,EAAmB;AACtD,YAAGD,GAAH,EAAQ;AACN,iBAAOL,QAAQ,CAACK,GAAD,CAAf;AACD;;AACDL,QAAAA,QAAQ,CAAC,IAAD,EAAOM,GAAG,CAACF,QAAJ,CAAa,QAAb,CAAP,CAAR;AACD,OALM,CAAP;AAMD;;AACD,WAAOjB,MAAM,CAACO,MAAP,CAAcC,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,KAAvB,EAA8BC,EAA9B,EAAkC,UAASM,GAAT,EAAcC,GAAd,EAAmB;AAC1D,UAAGD,GAAH,EAAQ;AACN,eAAOL,QAAQ,CAACK,GAAD,CAAf;AACD;;AACDL,MAAAA,QAAQ,CAAC,IAAD,EAAOM,GAAG,CAACF,QAAJ,CAAa,QAAb,CAAP,CAAR;AACD,KALM,CAAP;AAMD;;AAED,MAAG,OAAOL,EAAP,KAAc,WAAd,IAA6BA,EAAE,KAAK,IAAvC,EAA6C;AAC3C;AACAA,IAAAA,EAAE,GAAG,MAAL;AACD;;AACD,MAAG,OAAOA,EAAP,KAAc,QAAjB,EAA2B;AACzB,QAAG,EAAEA,EAAE,IAAIf,KAAK,CAACe,EAAN,CAASQ,UAAjB,CAAH,EAAiC;AAC/B,YAAM,IAAIC,KAAJ,CAAU,6BAA6BT,EAAvC,CAAN;AACD;;AACDA,IAAAA,EAAE,GAAGf,KAAK,CAACe,EAAN,CAASA,EAAT,EAAaU,MAAb,EAAL;AACD;;AAED,MAAIC,IAAI,GAAGX,EAAE,CAACY,YAAd;AAEA;;;AAEA,MAAGb,KAAK,GAAI,aAAaY,IAAzB,EAAgC;AAC9B,QAAIL,GAAG,GAAG,IAAIG,KAAJ,CAAU,0BAAV,CAAV;;AACA,QAAGR,QAAH,EAAa;AACX,aAAOA,QAAQ,CAACK,GAAD,CAAf;AACD;;AACD,UAAMA,GAAN;AACD;AAED;;;;;;;AAMA,MAAIO,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUhB,KAAK,GAAGY,IAAlB,CAAV;AACA,MAAIK,CAAC,GAAGjB,KAAK,GAAG,CAACc,GAAG,GAAG,CAAP,IAAYF,IAA5B;AAEA;;;;;;;;;;;;;;;;;;;;AAyBA,MAAIM,GAAG,GAAGhC,KAAK,CAACiC,IAAN,CAAWR,MAAX,EAAV;AACAO,EAAAA,GAAG,CAACE,KAAJ,CAAUnB,EAAV,EAAcJ,CAAd;AACA,MAAIwB,EAAE,GAAG,EAAT;AACA,MAAIC,GAAJ,EAASC,GAAT,EAAcC,IAAd,CAnG8B,CAqG9B;;AACA,MAAG,CAACtB,QAAJ,EAAc;AACZ,SAAI,IAAIuB,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAIX,GAApB,EAAyB,EAAEW,CAA3B,EAA8B;AAC5B;AACAP,MAAAA,GAAG,CAACE,KAAJ,CAAU,IAAV,EAAgB,IAAhB;AACAF,MAAAA,GAAG,CAACQ,MAAJ,CAAW5B,CAAX;AACAoB,MAAAA,GAAG,CAACQ,MAAJ,CAAWxC,KAAK,CAACI,IAAN,CAAWqC,YAAX,CAAwBF,CAAxB,CAAX;AACAH,MAAAA,GAAG,GAAGE,IAAI,GAAGN,GAAG,CAACU,MAAJ,GAAaC,QAAb,EAAb,CAL4B,CAO5B;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI/B,CAApB,EAAuB,EAAE+B,CAAzB,EAA4B;AAC1BZ,QAAAA,GAAG,CAACE,KAAJ,CAAU,IAAV,EAAgB,IAAhB;AACAF,QAAAA,GAAG,CAACQ,MAAJ,CAAWF,IAAX;AACAD,QAAAA,GAAG,GAAGL,GAAG,CAACU,MAAJ,GAAaC,QAAb,EAAN,CAH0B,CAI1B;;AACAP,QAAAA,GAAG,GAAGpC,KAAK,CAACI,IAAN,CAAWyC,QAAX,CAAoBT,GAApB,EAAyBC,GAAzB,EAA8BX,IAA9B,CAAN;AACAY,QAAAA,IAAI,GAAGD,GAAP;AACD;AAED;;;;;AAIAF,MAAAA,EAAE,IAAKI,CAAC,GAAGX,GAAL,GAAYQ,GAAZ,GAAkBA,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAcf,CAAd,CAAxB;AACD;AACD;;;AACA,WAAOI,EAAP;AACD,GAhI6B,CAkI9B;;;AACA,MAAII,CAAC,GAAG,CAAR;AAAA,MAAWK,CAAX;;AACA,WAASG,KAAT,GAAiB;AACf,QAAGR,CAAC,GAAGX,GAAP,EAAY;AACV;AACA,aAAOZ,QAAQ,CAAC,IAAD,EAAOmB,EAAP,CAAf;AACD,KAJc,CAMf;;;AACAH,IAAAA,GAAG,CAACE,KAAJ,CAAU,IAAV,EAAgB,IAAhB;AACAF,IAAAA,GAAG,CAACQ,MAAJ,CAAW5B,CAAX;AACAoB,IAAAA,GAAG,CAACQ,MAAJ,CAAWxC,KAAK,CAACI,IAAN,CAAWqC,YAAX,CAAwBF,CAAxB,CAAX;AACAH,IAAAA,GAAG,GAAGE,IAAI,GAAGN,GAAG,CAACU,MAAJ,GAAaC,QAAb,EAAb,CAVe,CAYf;;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAI,IAAAA,KAAK;AACN;;AAED,WAASA,KAAT,GAAiB;AACf,QAAGJ,CAAC,IAAI/B,CAAR,EAAW;AACTmB,MAAAA,GAAG,CAACE,KAAJ,CAAU,IAAV,EAAgB,IAAhB;AACAF,MAAAA,GAAG,CAACQ,MAAJ,CAAWF,IAAX;AACAD,MAAAA,GAAG,GAAGL,GAAG,CAACU,MAAJ,GAAaC,QAAb,EAAN,CAHS,CAIT;;AACAP,MAAAA,GAAG,GAAGpC,KAAK,CAACI,IAAN,CAAWyC,QAAX,CAAoBT,GAApB,EAAyBC,GAAzB,EAA8BX,IAA9B,CAAN;AACAY,MAAAA,IAAI,GAAGD,GAAP;AACA,QAAEO,CAAF;AACA,aAAO5C,KAAK,CAACI,IAAN,CAAW6C,YAAX,CAAwBD,KAAxB,CAAP;AACD;AAED;;;;;AAIAb,IAAAA,EAAE,IAAKI,CAAC,GAAGX,GAAL,GAAYQ,GAAZ,GAAkBA,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAcf,CAAd,CAAxB;AAEA,MAAEQ,CAAF;AACAQ,IAAAA,KAAK;AACN;;AAEDA,EAAAA,KAAK;AACN,CA7KD","sourcesContent":["/**\n * Password-Based Key-Derivation Function #2 implementation.\n *\n * See RFC 2898 for details.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./hmac');\nrequire('./md');\nrequire('./util');\n\nvar pkcs5 = forge.pkcs5 = forge.pkcs5 || {};\n\nvar crypto;\nif(forge.util.isNodejs && !forge.options.usePureJavaScript) {\n  crypto = require('crypto');\n}\n\n/**\n * Derives a key from a password.\n *\n * @param p the password as a binary-encoded string of bytes.\n * @param s the salt as a binary-encoded string of bytes.\n * @param c the iteration count, a positive integer.\n * @param dkLen the intended length, in bytes, of the derived key,\n *          (max: 2^32 - 1) * hash length of the PRF.\n * @param [md] the message digest (or algorithm identifier as a string) to use\n *          in the PRF, defaults to SHA-1.\n * @param [callback(err, key)] presence triggers asynchronous version, called\n *          once the operation completes.\n *\n * @return the derived key, as a binary-encoded string of bytes, for the\n *           synchronous version (if no callback is specified).\n */\nmodule.exports = forge.pbkdf2 = pkcs5.pbkdf2 = function(\n  p, s, c, dkLen, md, callback) {\n  if(typeof md === 'function') {\n    callback = md;\n    md = null;\n  }\n\n  // use native implementation if possible and not disabled, note that\n  // some node versions only support SHA-1, others allow digest to be changed\n  if(forge.util.isNodejs && !forge.options.usePureJavaScript &&\n    crypto.pbkdf2 && (md === null || typeof md !== 'object') &&\n    (crypto.pbkdf2Sync.length > 4 || (!md || md === 'sha1'))) {\n    if(typeof md !== 'string') {\n      // default prf to SHA-1\n      md = 'sha1';\n    }\n    p = new Buffer(p, 'binary');\n    s = new Buffer(s, 'binary');\n    if(!callback) {\n      if(crypto.pbkdf2Sync.length === 4) {\n        return crypto.pbkdf2Sync(p, s, c, dkLen).toString('binary');\n      }\n      return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString('binary');\n    }\n    if(crypto.pbkdf2Sync.length === 4) {\n      return crypto.pbkdf2(p, s, c, dkLen, function(err, key) {\n        if(err) {\n          return callback(err);\n        }\n        callback(null, key.toString('binary'));\n      });\n    }\n    return crypto.pbkdf2(p, s, c, dkLen, md, function(err, key) {\n      if(err) {\n        return callback(err);\n      }\n      callback(null, key.toString('binary'));\n    });\n  }\n\n  if(typeof md === 'undefined' || md === null) {\n    // default prf to SHA-1\n    md = 'sha1';\n  }\n  if(typeof md === 'string') {\n    if(!(md in forge.md.algorithms)) {\n      throw new Error('Unknown hash algorithm: ' + md);\n    }\n    md = forge.md[md].create();\n  }\n\n  var hLen = md.digestLength;\n\n  /* 1. If dkLen > (2^32 - 1) * hLen, output \"derived key too long\" and\n    stop. */\n  if(dkLen > (0xFFFFFFFF * hLen)) {\n    var err = new Error('Derived key is too long.');\n    if(callback) {\n      return callback(err);\n    }\n    throw err;\n  }\n\n  /* 2. Let len be the number of hLen-octet blocks in the derived key,\n    rounding up, and let r be the number of octets in the last\n    block:\n\n    len = CEIL(dkLen / hLen),\n    r = dkLen - (len - 1) * hLen. */\n  var len = Math.ceil(dkLen / hLen);\n  var r = dkLen - (len - 1) * hLen;\n\n  /* 3. For each block of the derived key apply the function F defined\n    below to the password P, the salt S, the iteration count c, and\n    the block index to compute the block:\n\n    T_1 = F(P, S, c, 1),\n    T_2 = F(P, S, c, 2),\n    ...\n    T_len = F(P, S, c, len),\n\n    where the function F is defined as the exclusive-or sum of the\n    first c iterates of the underlying pseudorandom function PRF\n    applied to the password P and the concatenation of the salt S\n    and the block index i:\n\n    F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c\n\n    where\n\n    u_1 = PRF(P, S || INT(i)),\n    u_2 = PRF(P, u_1),\n    ...\n    u_c = PRF(P, u_{c-1}).\n\n    Here, INT(i) is a four-octet encoding of the integer i, most\n    significant octet first. */\n  var prf = forge.hmac.create();\n  prf.start(md, p);\n  var dk = '';\n  var xor, u_c, u_c1;\n\n  // sync version\n  if(!callback) {\n    for(var i = 1; i <= len; ++i) {\n      // PRF(P, S || INT(i)) (first iteration)\n      prf.start(null, null);\n      prf.update(s);\n      prf.update(forge.util.int32ToBytes(i));\n      xor = u_c1 = prf.digest().getBytes();\n\n      // PRF(P, u_{c-1}) (other iterations)\n      for(var j = 2; j <= c; ++j) {\n        prf.start(null, null);\n        prf.update(u_c1);\n        u_c = prf.digest().getBytes();\n        // F(p, s, c, i)\n        xor = forge.util.xorBytes(xor, u_c, hLen);\n        u_c1 = u_c;\n      }\n\n      /* 4. Concatenate the blocks and extract the first dkLen octets to\n        produce a derived key DK:\n\n        DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */\n      dk += (i < len) ? xor : xor.substr(0, r);\n    }\n    /* 5. Output the derived key DK. */\n    return dk;\n  }\n\n  // async version\n  var i = 1, j;\n  function outer() {\n    if(i > len) {\n      // done\n      return callback(null, dk);\n    }\n\n    // PRF(P, S || INT(i)) (first iteration)\n    prf.start(null, null);\n    prf.update(s);\n    prf.update(forge.util.int32ToBytes(i));\n    xor = u_c1 = prf.digest().getBytes();\n\n    // PRF(P, u_{c-1}) (other iterations)\n    j = 2;\n    inner();\n  }\n\n  function inner() {\n    if(j <= c) {\n      prf.start(null, null);\n      prf.update(u_c1);\n      u_c = prf.digest().getBytes();\n      // F(p, s, c, i)\n      xor = forge.util.xorBytes(xor, u_c, hLen);\n      u_c1 = u_c;\n      ++j;\n      return forge.util.setImmediate(inner);\n    }\n\n    /* 4. Concatenate the blocks and extract the first dkLen octets to\n      produce a derived key DK:\n\n      DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */\n    dk += (i < len) ? xor : xor.substr(0, r);\n\n    ++i;\n    outer();\n  }\n\n  outer();\n};\n"]},"metadata":{},"sourceType":"script"}