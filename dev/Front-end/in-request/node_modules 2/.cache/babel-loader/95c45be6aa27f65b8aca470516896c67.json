{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Provides function wrappers that implement page streaming and retrying.\n */\n\nconst apiCaller_1 = require(\"./apiCaller\");\n\nconst retries_1 = require(\"./normalCalls/retries\");\n\nconst timeout_1 = require(\"./normalCalls/timeout\");\n/**\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\n\n\nfunction createApiCall(func, settings, descriptor) {\n  // we want to be able to accept both promise resolving to a function and a\n  // function. Currently client librares are only calling this method with a\n  // promise, but it will change.\n  const funcPromise = typeof func === 'function' ? Promise.resolve(func) : func; // the following apiCaller will be used for all calls of this function...\n\n  const apiCaller = apiCaller_1.createAPICaller(settings, descriptor);\n  return (request, callOptions, callback) => {\n    const thisSettings = settings.merge(callOptions);\n    let currentApiCaller = apiCaller; // special case: if bundling is disabled for this one call,\n    // use default API caller instead\n\n    if (settings.isBundling && !thisSettings.isBundling) {\n      currentApiCaller = apiCaller_1.createAPICaller(settings, undefined);\n    }\n\n    const ongoingCall = currentApiCaller.init(thisSettings, callback);\n    funcPromise.then(func => {\n      // Initially, the function is just what gRPC server stub contains.\n      func = currentApiCaller.wrap(func);\n      const retry = thisSettings.retry;\n\n      if (retry && retry.retryCodes && retry.retryCodes.length > 0) {\n        return retries_1.retryable(func, thisSettings.retry, thisSettings.otherArgs);\n      }\n\n      return timeout_1.addTimeoutArg(func, thisSettings.timeout, thisSettings.otherArgs);\n    }).then(apiCall => {\n      // After adding retries / timeouts, the call function becomes simpler:\n      // it only accepts request and callback.\n      currentApiCaller.call(apiCall, request, thisSettings, ongoingCall);\n    }).catch(err => {\n      currentApiCaller.fail(ongoingCall, err);\n    }); // Calls normally return a \"cancellable promise\" that can be used to `await` for the actual result,\n    // or to cancel the ongoing call.\n\n    return currentApiCaller.result(ongoingCall);\n  };\n}\n\nexports.createApiCall = createApiCall;","map":{"version":3,"sources":["../../src/createApiCall.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;AAgBA;;;;AAIA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAWA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,SAAgB,aAAhB,CACE,IADF,EAEE,QAFF,EAGE,UAHF,EAGyB;AAEvB;AACA;AACA;AACA,QAAM,WAAW,GAAG,OAAO,IAAP,KAAgB,UAAhB,GAA6B,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAA7B,GAAqD,IAAzE,CALuB,CAOvB;;AACA,QAAM,SAAS,GAAG,WAAA,CAAA,eAAA,CAAgB,QAAhB,EAA0B,UAA1B,CAAlB;AAEA,SAAO,CACL,OADK,EAEL,WAFK,EAGL,QAHK,KAIH;AACF,UAAM,YAAY,GAAG,QAAQ,CAAC,KAAT,CAAe,WAAf,CAArB;AAEA,QAAI,gBAAgB,GAAG,SAAvB,CAHE,CAIF;AACA;;AACA,QAAI,QAAQ,CAAC,UAAT,IAAuB,CAAC,YAAY,CAAC,UAAzC,EAAqD;AACnD,MAAA,gBAAgB,GAAG,WAAA,CAAA,eAAA,CAAgB,QAAhB,EAA0B,SAA1B,CAAnB;AACD;;AAED,UAAM,WAAW,GAAG,gBAAgB,CAAC,IAAjB,CAAsB,YAAtB,EAAoC,QAApC,CAApB;AACA,IAAA,WAAW,CACR,IADH,CACS,IAAD,IAAmB;AACvB;AACA,MAAA,IAAI,GAAG,gBAAgB,CAAC,IAAjB,CAAsB,IAAtB,CAAP;AACA,YAAM,KAAK,GAAG,YAAY,CAAC,KAA3B;;AACA,UAAI,KAAK,IAAI,KAAK,CAAC,UAAf,IAA6B,KAAK,CAAC,UAAN,CAAiB,MAAjB,GAA0B,CAA3D,EAA8D;AAC5D,eAAO,SAAA,CAAA,SAAA,CACL,IADK,EAEL,YAAY,CAAC,KAFR,EAGL,YAAY,CAAC,SAHR,CAAP;AAKD;;AACD,aAAO,SAAA,CAAA,aAAA,CACL,IADK,EAEL,YAAY,CAAC,OAFR,EAGL,YAAY,CAAC,SAHR,CAAP;AAKD,KAjBH,EAkBG,IAlBH,CAkBS,OAAD,IAAoC;AACxC;AACA;AACA,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,OAAtB,EAA+B,OAA/B,EAAwC,YAAxC,EAAsD,WAAtD;AACD,KAtBH,EAuBG,KAvBH,CAuBS,GAAG,IAAG;AACX,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,WAAtB,EAAmC,GAAnC;AACD,KAzBH,EAXE,CAsCF;AACA;;AACA,WAAO,gBAAgB,CAAC,MAAjB,CAAwB,WAAxB,CAAP;AACD,GA7CD;AA8CD;;AA3DD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Provides function wrappers that implement page streaming and retrying.\n */\nconst apiCaller_1 = require(\"./apiCaller\");\nconst retries_1 = require(\"./normalCalls/retries\");\nconst timeout_1 = require(\"./normalCalls/timeout\");\n/**\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\nfunction createApiCall(func, settings, descriptor) {\n    // we want to be able to accept both promise resolving to a function and a\n    // function. Currently client librares are only calling this method with a\n    // promise, but it will change.\n    const funcPromise = typeof func === 'function' ? Promise.resolve(func) : func;\n    // the following apiCaller will be used for all calls of this function...\n    const apiCaller = apiCaller_1.createAPICaller(settings, descriptor);\n    return (request, callOptions, callback) => {\n        const thisSettings = settings.merge(callOptions);\n        let currentApiCaller = apiCaller;\n        // special case: if bundling is disabled for this one call,\n        // use default API caller instead\n        if (settings.isBundling && !thisSettings.isBundling) {\n            currentApiCaller = apiCaller_1.createAPICaller(settings, undefined);\n        }\n        const ongoingCall = currentApiCaller.init(thisSettings, callback);\n        funcPromise\n            .then((func) => {\n            // Initially, the function is just what gRPC server stub contains.\n            func = currentApiCaller.wrap(func);\n            const retry = thisSettings.retry;\n            if (retry && retry.retryCodes && retry.retryCodes.length > 0) {\n                return retries_1.retryable(func, thisSettings.retry, thisSettings.otherArgs);\n            }\n            return timeout_1.addTimeoutArg(func, thisSettings.timeout, thisSettings.otherArgs);\n        })\n            .then((apiCall) => {\n            // After adding retries / timeouts, the call function becomes simpler:\n            // it only accepts request and callback.\n            currentApiCaller.call(apiCall, request, thisSettings, ongoingCall);\n        })\n            .catch(err => {\n            currentApiCaller.fail(ongoingCall, err);\n        });\n        // Calls normally return a \"cancellable promise\" that can be used to `await` for the actual result,\n        // or to cancel the ongoing call.\n        return currentApiCaller.result(ongoingCall);\n    };\n}\nexports.createApiCall = createApiCall;\n//# sourceMappingURL=createApiCall.js.map"]},"metadata":{},"sourceType":"script"}