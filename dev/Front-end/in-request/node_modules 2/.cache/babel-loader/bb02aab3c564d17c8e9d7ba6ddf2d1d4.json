{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nexport function doc(Panel) {\n  var DocumentedAccordionPanel = describe(Panel).description('An Accordion panel.').intrinsicElement('div');\n  DocumentedAccordionPanel.propTypes = {\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).description('The panel label.'),\n    header: PropTypes.node.description('If specified, the entire panel header will be managed by the caller.')\n  };\n  return DocumentedAccordionPanel;\n}\nexport var themeDoc = {\n  'accordion.heading.level': {\n    description: 'The heading level used for the accordion.',\n    type: 'number',\n    defaultValue: '4'\n  },\n  'accordion.icons.collapse': {\n    description: 'The icon to use when the panel is expanded.',\n    type: 'React.Element',\n    defaultValue: '<FormUp />'\n  },\n  'accordion.icons.color': {\n    description: 'The icon color to use in the accordion.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'control'\n  },\n  'accordion.icons.expand': {\n    description: 'The icon to use when the panel is collapsed.',\n    type: 'React.Element',\n    defaultValue: '<FormDown />'\n  },\n  'accordion.border.color': {\n    description: 'The border color to use in the accordion.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'border'\n  },\n  'accordion.border.side': {\n    description: 'The border side to use in the accordion.',\n    type: 'string',\n    defaultValue: 'bottom'\n  }\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/AccordionPanel/doc.js"],"names":["describe","PropTypes","doc","Panel","DocumentedAccordionPanel","description","intrinsicElement","propTypes","label","oneOfType","string","node","header","themeDoc","type","defaultValue"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,YAApC;AACA,OAAO,SAASC,GAAT,CAAaC,KAAb,EAAoB;AACzB,MAAIC,wBAAwB,GAAGJ,QAAQ,CAACG,KAAD,CAAR,CAAgBE,WAAhB,CAA4B,qBAA5B,EAAmDC,gBAAnD,CAAoE,KAApE,CAA/B;AACAF,EAAAA,wBAAwB,CAACG,SAAzB,GAAqC;AACnCC,IAAAA,KAAK,EAAEP,SAAS,CAACQ,SAAV,CAAoB,CAACR,SAAS,CAACS,MAAX,EAAmBT,SAAS,CAACU,IAA7B,CAApB,EAAwDN,WAAxD,CAAoE,kBAApE,CAD4B;AAEnCO,IAAAA,MAAM,EAAEX,SAAS,CAACU,IAAV,CAAeN,WAAf,CAA2B,sEAA3B;AAF2B,GAArC;AAIA,SAAOD,wBAAP;AACD;AACD,OAAO,IAAIS,QAAQ,GAAG;AACpB,6BAA2B;AACzBR,IAAAA,WAAW,EAAE,2CADY;AAEzBS,IAAAA,IAAI,EAAE,QAFmB;AAGzBC,IAAAA,YAAY,EAAE;AAHW,GADP;AAMpB,8BAA4B;AAC1BV,IAAAA,WAAW,EAAE,6CADa;AAE1BS,IAAAA,IAAI,EAAE,eAFoB;AAG1BC,IAAAA,YAAY,EAAE;AAHY,GANR;AAWpB,2BAAyB;AACvBV,IAAAA,WAAW,EAAE,yCADU;AAEvBS,IAAAA,IAAI,EAAE,0CAFiB;AAGvBC,IAAAA,YAAY,EAAE;AAHS,GAXL;AAgBpB,4BAA0B;AACxBV,IAAAA,WAAW,EAAE,8CADW;AAExBS,IAAAA,IAAI,EAAE,eAFkB;AAGxBC,IAAAA,YAAY,EAAE;AAHU,GAhBN;AAqBpB,4BAA0B;AACxBV,IAAAA,WAAW,EAAE,2CADW;AAExBS,IAAAA,IAAI,EAAE,0CAFkB;AAGxBC,IAAAA,YAAY,EAAE;AAHU,GArBN;AA0BpB,2BAAyB;AACvBV,IAAAA,WAAW,EAAE,0CADU;AAEvBS,IAAAA,IAAI,EAAE,QAFiB;AAGvBC,IAAAA,YAAY,EAAE;AAHS;AA1BL,CAAf","sourcesContent":["import { describe, PropTypes } from 'react-desc';\nexport function doc(Panel) {\n  var DocumentedAccordionPanel = describe(Panel).description('An Accordion panel.').intrinsicElement('div');\n  DocumentedAccordionPanel.propTypes = {\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).description('The panel label.'),\n    header: PropTypes.node.description('If specified, the entire panel header will be managed by the caller.')\n  };\n  return DocumentedAccordionPanel;\n}\nexport var themeDoc = {\n  'accordion.heading.level': {\n    description: 'The heading level used for the accordion.',\n    type: 'number',\n    defaultValue: '4'\n  },\n  'accordion.icons.collapse': {\n    description: 'The icon to use when the panel is expanded.',\n    type: 'React.Element',\n    defaultValue: '<FormUp />'\n  },\n  'accordion.icons.color': {\n    description: 'The icon color to use in the accordion.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'control'\n  },\n  'accordion.icons.expand': {\n    description: 'The icon to use when the panel is collapsed.',\n    type: 'React.Element',\n    defaultValue: '<FormDown />'\n  },\n  'accordion.border.color': {\n    description: 'The border color to use in the accordion.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'border'\n  },\n  'accordion.border.side': {\n    description: 'The border side to use in the accordion.',\n    type: 'string',\n    defaultValue: 'bottom'\n  }\n};"]},"metadata":{},"sourceType":"module"}