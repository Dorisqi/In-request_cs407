{"ast":null,"code":"/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n/**\n * Creates a new FirebaseMessagingError by extracting the error code, message and other relevant\n * details from an HTTP error response.\n *\n * @param {HttpError} err The HttpError to convert into a Firebase error\n * @return {FirebaseMessagingError} A Firebase error that can be returned to the user.\n */\n\n\nfunction createFirebaseError(err) {\n  if (err.response.isJson()) {\n    // For JSON responses, map the server response to a client-side error.\n    var json = err.response.data;\n    var errorCode = getErrorCode(json);\n    var errorMessage = getErrorMessage(json);\n    return error_1.FirebaseMessagingError.fromServerError(errorCode, errorMessage, json);\n  } // Non-JSON response\n\n\n  var error;\n\n  switch (err.response.status) {\n    case 400:\n      error = error_1.MessagingClientErrorCode.INVALID_ARGUMENT;\n      break;\n\n    case 401:\n    case 403:\n      error = error_1.MessagingClientErrorCode.AUTHENTICATION_ERROR;\n      break;\n\n    case 500:\n      error = error_1.MessagingClientErrorCode.INTERNAL_ERROR;\n      break;\n\n    case 503:\n      error = error_1.MessagingClientErrorCode.SERVER_UNAVAILABLE;\n      break;\n\n    default:\n      // Treat non-JSON responses with unexpected status codes as unknown errors.\n      error = error_1.MessagingClientErrorCode.UNKNOWN_ERROR;\n  }\n\n  return new error_1.FirebaseMessagingError({\n    code: error.code,\n    message: error.message + \" Raw server response: \\\"\" + err.response.text + \"\\\". Status code: \" + (err.response.status + \".\")\n  });\n}\n\nexports.createFirebaseError = createFirebaseError;\n/**\n * @param {object} response The response to check for errors.\n * @return {string|null} The error code if present; null otherwise.\n */\n\nfunction getErrorCode(response) {\n  if (validator.isNonNullObject(response) && 'error' in response) {\n    var error = response.error;\n\n    if (validator.isString(error)) {\n      return error;\n    }\n\n    if (validator.isArray(error.details)) {\n      var fcmErrorType = 'type.googleapis.com/google.firebase.fcm.v1.FcmError';\n\n      for (var _i = 0, _a = error.details; _i < _a.length; _i++) {\n        var element = _a[_i];\n\n        if (element['@type'] === fcmErrorType) {\n          return element.errorCode;\n        }\n      }\n    }\n\n    if ('status' in error) {\n      return error.status;\n    } else {\n      return error.message;\n    }\n  }\n\n  return null;\n}\n\nexports.getErrorCode = getErrorCode;\n/**\n * Extracts error message from the given response object.\n *\n * @param {object} response The response to check for errors.\n * @return {string|null} The error message if present; null otherwise.\n */\n\nfunction getErrorMessage(response) {\n  if (validator.isNonNullObject(response) && 'error' in response && validator.isNonEmptyString(response.error.message)) {\n    return response.error.message;\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/firebase-admin/lib/messaging/messaging-errors.js"],"names":["Object","defineProperty","exports","value","error_1","require","validator","createFirebaseError","err","response","isJson","json","data","errorCode","getErrorCode","errorMessage","getErrorMessage","FirebaseMessagingError","fromServerError","error","status","MessagingClientErrorCode","INVALID_ARGUMENT","AUTHENTICATION_ERROR","INTERNAL_ERROR","SERVER_UNAVAILABLE","UNKNOWN_ERROR","code","message","text","isNonNullObject","isString","isArray","details","fcmErrorType","_i","_a","length","element","isNonEmptyString"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar error_1 = require(\"../utils/error\");\nvar validator = require(\"../utils/validator\");\n/**\n * Creates a new FirebaseMessagingError by extracting the error code, message and other relevant\n * details from an HTTP error response.\n *\n * @param {HttpError} err The HttpError to convert into a Firebase error\n * @return {FirebaseMessagingError} A Firebase error that can be returned to the user.\n */\nfunction createFirebaseError(err) {\n    if (err.response.isJson()) {\n        // For JSON responses, map the server response to a client-side error.\n        var json = err.response.data;\n        var errorCode = getErrorCode(json);\n        var errorMessage = getErrorMessage(json);\n        return error_1.FirebaseMessagingError.fromServerError(errorCode, errorMessage, json);\n    }\n    // Non-JSON response\n    var error;\n    switch (err.response.status) {\n        case 400:\n            error = error_1.MessagingClientErrorCode.INVALID_ARGUMENT;\n            break;\n        case 401:\n        case 403:\n            error = error_1.MessagingClientErrorCode.AUTHENTICATION_ERROR;\n            break;\n        case 500:\n            error = error_1.MessagingClientErrorCode.INTERNAL_ERROR;\n            break;\n        case 503:\n            error = error_1.MessagingClientErrorCode.SERVER_UNAVAILABLE;\n            break;\n        default:\n            // Treat non-JSON responses with unexpected status codes as unknown errors.\n            error = error_1.MessagingClientErrorCode.UNKNOWN_ERROR;\n    }\n    return new error_1.FirebaseMessagingError({\n        code: error.code,\n        message: error.message + \" Raw server response: \\\"\" + err.response.text + \"\\\". Status code: \" +\n            (err.response.status + \".\"),\n    });\n}\nexports.createFirebaseError = createFirebaseError;\n/**\n * @param {object} response The response to check for errors.\n * @return {string|null} The error code if present; null otherwise.\n */\nfunction getErrorCode(response) {\n    if (validator.isNonNullObject(response) && 'error' in response) {\n        var error = response.error;\n        if (validator.isString(error)) {\n            return error;\n        }\n        if (validator.isArray(error.details)) {\n            var fcmErrorType = 'type.googleapis.com/google.firebase.fcm.v1.FcmError';\n            for (var _i = 0, _a = error.details; _i < _a.length; _i++) {\n                var element = _a[_i];\n                if (element['@type'] === fcmErrorType) {\n                    return element.errorCode;\n                }\n            }\n        }\n        if ('status' in error) {\n            return error.status;\n        }\n        else {\n            return error.message;\n        }\n    }\n    return null;\n}\nexports.getErrorCode = getErrorCode;\n/**\n * Extracts error message from the given response object.\n *\n * @param {object} response The response to check for errors.\n * @return {string|null} The error message if present; null otherwise.\n */\nfunction getErrorMessage(response) {\n    if (validator.isNonNullObject(response) &&\n        'error' in response &&\n        validator.isNonEmptyString(response.error.message)) {\n        return response.error.message;\n    }\n    return null;\n}\n"]},"metadata":{},"sourceType":"script"}