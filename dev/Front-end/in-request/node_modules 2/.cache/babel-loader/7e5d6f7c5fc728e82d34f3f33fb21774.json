{"ast":null,"code":"\"use strict\";\n\nmodule.exports = MapField; // extends Field\n\nvar Field = require(\"./field\");\n\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\n\nvar types = require(\"./types\"),\n    util = require(\"./util\");\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\n\n\nfunction MapField(name, id, keyType, type, options, comment) {\n  Field.call(this, name, id, type, undefined, undefined, options, comment);\n  /* istanbul ignore if */\n\n  if (!util.isString(keyType)) throw TypeError(\"keyType must be a string\");\n  /**\r\n   * Key type.\r\n   * @type {string}\r\n   */\n\n  this.keyType = keyType; // toJSON, marker\n\n  /**\r\n   * Resolved key type if not a basic type.\r\n   * @type {ReflectionObject|null}\r\n   */\n\n  this.resolvedKeyType = null; // Overrides Field#map\n\n  this.map = true;\n}\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends {IField}\r\n * @property {string} keyType Key type\r\n */\n\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property {string} extend Extended type\r\n */\n\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {IMapField} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\n\n\nMapField.fromJSON = function fromJSON(name, json) {\n  return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMapField} Map field descriptor\r\n */\n\n\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"keyType\", this.keyType, \"type\", this.type, \"id\", this.id, \"extend\", this.extend, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n};\n/**\r\n * @override\r\n */\n\n\nMapField.prototype.resolve = function resolve() {\n  if (this.resolved) return this; // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n\n  if (types.mapKey[this.keyType] === undefined) throw Error(\"invalid key type: \" + this.keyType);\n  return Field.prototype.resolve.call(this);\n};\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\r\n */\n\n\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n  // submessage value: decorate the submessage and use its name as the type\n  if (typeof fieldValueType === \"function\") fieldValueType = util.decorateType(fieldValueType).name; // enum reference value: create a reflected copy of the enum and keep reuseing it\n  else if (fieldValueType && typeof fieldValueType === \"object\") fieldValueType = util.decorateEnum(fieldValueType).name;\n  return function mapFieldDecorator(prototype, fieldName) {\n    util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n  };\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/protobufjs/src/mapfield.js"],"names":["module","exports","MapField","Field","require","prototype","Object","create","constructor","className","types","util","name","id","keyType","type","options","comment","call","undefined","isString","TypeError","resolvedKeyType","map","fromJSON","json","toJSON","toJSONOptions","keepComments","Boolean","toObject","extend","resolve","resolved","mapKey","Error","d","decorateMapField","fieldId","fieldKeyType","fieldValueType","decorateType","decorateEnum","mapFieldDecorator","fieldName","add"],"mappings":"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","sourcesContent":["\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(\"./field\");\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(\"./types\"),\r\n    util    = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction MapField(name, id, keyType, type, options, comment) {\r\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {ReflectionObject|null}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends {IField}\r\n * @property {string} keyType Key type\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {IMapField} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMapField} Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"keyType\" , this.keyType,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\r\n */\r\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\r\n\r\n    // submessage value: decorate the submessage and use its name as the type\r\n    if (typeof fieldValueType === \"function\")\r\n        fieldValueType = util.decorateType(fieldValueType).name;\r\n\r\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldValueType && typeof fieldValueType === \"object\")\r\n        fieldValueType = util.decorateEnum(fieldValueType).name;\r\n\r\n    return function mapFieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"script"}