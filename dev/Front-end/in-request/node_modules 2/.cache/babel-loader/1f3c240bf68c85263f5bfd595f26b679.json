{"ast":null,"code":"\"use strict\"; // Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst extend_1 = __importDefault(require(\"extend\"));\n\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\n\nconst querystring_1 = __importDefault(require(\"querystring\"));\n\nconst is_stream_1 = __importDefault(require(\"is-stream\"));\n\nconst url_1 = __importDefault(require(\"url\"));\n\nconst common_1 = require(\"./common\");\n\nconst retry_1 = require(\"./retry\"); // tslint:disable no-any\n\n\nconst URL = hasURL() ? window.URL : url_1.default.URL;\nconst fetch = hasFetch() ? window.fetch : node_fetch_1.default;\n\nfunction hasWindow() {\n  return typeof window !== 'undefined' && !!window;\n}\n\nfunction hasURL() {\n  return hasWindow() && !!window.URL;\n}\n\nfunction hasFetch() {\n  return hasWindow() && !!window.fetch;\n} // tslint:disable-next-line variable-name\n\n\nlet HttpsProxyAgent; // Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\n\nfunction loadProxy() {\n  const proxy = process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy;\n\n  if (proxy) {\n    HttpsProxyAgent = require('https-proxy-agent');\n  }\n\n  return proxy;\n}\n\nloadProxy();\n\nclass Gaxios {\n  /**\n   * The Gaxios class is responsible for making HTTP requests.\n   * @param defaults The default set of options to be used for this instance.\n   */\n  constructor(defaults) {\n    this.agentCache = new Map();\n    this.defaults = defaults || {};\n  }\n  /**\n   * Perform an HTTP request with the given options.\n   * @param opts Set of HTTP options that will be used for this HTTP request.\n   */\n\n\n  async request(opts = {}) {\n    opts = this.validateOpts(opts);\n    return this._request(opts);\n  }\n  /**\n   * Internal, retryable version of the `request` method.\n   * @param opts Set of HTTP options that will be used for this HTTP request.\n   */\n\n\n  async _request(opts = {}) {\n    try {\n      let translatedResponse;\n\n      if (opts.adapter) {\n        translatedResponse = await opts.adapter(opts);\n      } else {\n        const res = await fetch(opts.url, opts);\n        const data = await this.getResponseData(opts, res);\n        translatedResponse = this.translateResponse(opts, res, data);\n      }\n\n      if (!opts.validateStatus(translatedResponse.status)) {\n        throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);\n      }\n\n      return translatedResponse;\n    } catch (e) {\n      const err = e;\n      err.config = opts;\n      const {\n        shouldRetry,\n        config\n      } = await retry_1.getRetryConfig(e);\n\n      if (shouldRetry && config) {\n        err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;\n        return this._request(err.config);\n      }\n\n      throw err;\n    }\n  }\n\n  async getResponseData(opts, res) {\n    switch (opts.responseType) {\n      case 'stream':\n        return res.body;\n\n      case 'json':\n        let data = await res.text();\n\n        try {\n          data = JSON.parse(data);\n        } catch (e) {}\n\n        return data;\n\n      case 'arraybuffer':\n        return res.arrayBuffer();\n\n      case 'blob':\n        return res.blob();\n\n      default:\n        return res.text();\n    }\n  }\n  /**\n   * Validates the options, and merges them with defaults.\n   * @param opts The original options passed from the client.\n   */\n\n\n  validateOpts(options) {\n    const opts = extend_1.default(true, {}, this.defaults, options);\n\n    if (!opts.url) {\n      throw new Error('URL is required.');\n    } // baseUrl has been deprecated, remove in 2.0\n\n\n    const baseUrl = opts.baseUrl || opts.baseURL;\n\n    if (baseUrl) {\n      opts.url = baseUrl + opts.url;\n    }\n\n    const parsedUrl = new URL(opts.url);\n    opts.url = `${parsedUrl.origin}${parsedUrl.pathname}`;\n    opts.params = extend_1.default(querystring_1.default.parse(parsedUrl.search.substr(1)), // removes leading ?\n    opts.params);\n    opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n\n    if (opts.params) {\n      parsedUrl.search = opts.paramsSerializer(opts.params);\n    }\n\n    opts.url = parsedUrl.href;\n\n    if (typeof options.maxContentLength === 'number') {\n      opts.size = options.maxContentLength;\n    }\n\n    if (typeof options.maxRedirects === 'number') {\n      opts.follow = options.maxRedirects;\n    }\n\n    opts.headers = opts.headers || {};\n\n    if (opts.data) {\n      if (is_stream_1.default.readable(opts.data)) {\n        opts.body = opts.data;\n      } else if (typeof opts.data === 'object') {\n        opts.body = JSON.stringify(opts.data);\n        opts.headers['Content-Type'] = 'application/json';\n      } else {\n        opts.body = opts.data;\n      }\n    }\n\n    opts.validateStatus = opts.validateStatus || this.validateStatus;\n    opts.responseType = opts.responseType || 'json';\n\n    if (!opts.headers['Accept'] && opts.responseType === 'json') {\n      opts.headers['Accept'] = 'application/json';\n    }\n\n    opts.method = opts.method || 'GET';\n    const proxy = loadProxy();\n\n    if (proxy) {\n      if (this.agentCache.has(proxy)) {\n        opts.agent = this.agentCache.get(proxy);\n      } else {\n        opts.agent = new HttpsProxyAgent(proxy);\n        this.agentCache.set(proxy, opts.agent);\n      }\n    }\n\n    return opts;\n  }\n  /**\n   * By default, throw for any non-2xx status code\n   * @param status status code from the HTTP response\n   */\n\n\n  validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n  /**\n   * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\n   * @param params key value pars to encode\n   */\n\n\n  paramsSerializer(params) {\n    return querystring_1.default.stringify(params);\n  }\n\n  translateResponse(opts, res, data) {\n    // headers need to be converted from a map to an obj\n    const headers = {};\n    res.headers.forEach((value, key) => {\n      headers[key] = value;\n    });\n    return {\n      config: opts,\n      data: data,\n      headers,\n      status: res.status,\n      statusText: res.statusText,\n      // XMLHttpRequestLike\n      request: {\n        responseURL: res.url\n      }\n    };\n  }\n\n}\n\nexports.Gaxios = Gaxios;","map":{"version":3,"sources":["../../src/gaxios.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst extend_1 = __importDefault(require(\"extend\"));\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\nconst querystring_1 = __importDefault(require(\"querystring\"));\nconst is_stream_1 = __importDefault(require(\"is-stream\"));\nconst url_1 = __importDefault(require(\"url\"));\nconst common_1 = require(\"./common\");\nconst retry_1 = require(\"./retry\");\n// tslint:disable no-any\nconst URL = hasURL() ? window.URL : url_1.default.URL;\nconst fetch = hasFetch() ? window.fetch : node_fetch_1.default;\nfunction hasWindow() {\n    return typeof window !== 'undefined' && !!window;\n}\nfunction hasURL() {\n    return hasWindow() && !!window.URL;\n}\nfunction hasFetch() {\n    return hasWindow() && !!window.fetch;\n}\n// tslint:disable-next-line variable-name\nlet HttpsProxyAgent;\n// Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\nfunction loadProxy() {\n    const proxy = process.env.HTTPS_PROXY ||\n        process.env.https_proxy ||\n        process.env.HTTP_PROXY ||\n        process.env.http_proxy;\n    if (proxy) {\n        HttpsProxyAgent = require('https-proxy-agent');\n    }\n    return proxy;\n}\nloadProxy();\nclass Gaxios {\n    /**\n     * The Gaxios class is responsible for making HTTP requests.\n     * @param defaults The default set of options to be used for this instance.\n     */\n    constructor(defaults) {\n        this.agentCache = new Map();\n        this.defaults = defaults || {};\n    }\n    /**\n     * Perform an HTTP request with the given options.\n     * @param opts Set of HTTP options that will be used for this HTTP request.\n     */\n    async request(opts = {}) {\n        opts = this.validateOpts(opts);\n        return this._request(opts);\n    }\n    /**\n     * Internal, retryable version of the `request` method.\n     * @param opts Set of HTTP options that will be used for this HTTP request.\n     */\n    async _request(opts = {}) {\n        try {\n            let translatedResponse;\n            if (opts.adapter) {\n                translatedResponse = await opts.adapter(opts);\n            }\n            else {\n                const res = await fetch(opts.url, opts);\n                const data = await this.getResponseData(opts, res);\n                translatedResponse = this.translateResponse(opts, res, data);\n            }\n            if (!opts.validateStatus(translatedResponse.status)) {\n                throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);\n            }\n            return translatedResponse;\n        }\n        catch (e) {\n            const err = e;\n            err.config = opts;\n            const { shouldRetry, config } = await retry_1.getRetryConfig(e);\n            if (shouldRetry && config) {\n                err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;\n                return this._request(err.config);\n            }\n            throw err;\n        }\n    }\n    async getResponseData(opts, res) {\n        switch (opts.responseType) {\n            case 'stream':\n                return res.body;\n            case 'json':\n                let data = await res.text();\n                try {\n                    data = JSON.parse(data);\n                }\n                catch (e) { }\n                return data;\n            case 'arraybuffer':\n                return res.arrayBuffer();\n            case 'blob':\n                return res.blob();\n            default:\n                return res.text();\n        }\n    }\n    /**\n     * Validates the options, and merges them with defaults.\n     * @param opts The original options passed from the client.\n     */\n    validateOpts(options) {\n        const opts = extend_1.default(true, {}, this.defaults, options);\n        if (!opts.url) {\n            throw new Error('URL is required.');\n        }\n        // baseUrl has been deprecated, remove in 2.0\n        const baseUrl = opts.baseUrl || opts.baseURL;\n        if (baseUrl) {\n            opts.url = baseUrl + opts.url;\n        }\n        const parsedUrl = new URL(opts.url);\n        opts.url = `${parsedUrl.origin}${parsedUrl.pathname}`;\n        opts.params = extend_1.default(querystring_1.default.parse(parsedUrl.search.substr(1)), // removes leading ?\n        opts.params);\n        opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n        if (opts.params) {\n            parsedUrl.search = opts.paramsSerializer(opts.params);\n        }\n        opts.url = parsedUrl.href;\n        if (typeof options.maxContentLength === 'number') {\n            opts.size = options.maxContentLength;\n        }\n        if (typeof options.maxRedirects === 'number') {\n            opts.follow = options.maxRedirects;\n        }\n        opts.headers = opts.headers || {};\n        if (opts.data) {\n            if (is_stream_1.default.readable(opts.data)) {\n                opts.body = opts.data;\n            }\n            else if (typeof opts.data === 'object') {\n                opts.body = JSON.stringify(opts.data);\n                opts.headers['Content-Type'] = 'application/json';\n            }\n            else {\n                opts.body = opts.data;\n            }\n        }\n        opts.validateStatus = opts.validateStatus || this.validateStatus;\n        opts.responseType = opts.responseType || 'json';\n        if (!opts.headers['Accept'] && opts.responseType === 'json') {\n            opts.headers['Accept'] = 'application/json';\n        }\n        opts.method = opts.method || 'GET';\n        const proxy = loadProxy();\n        if (proxy) {\n            if (this.agentCache.has(proxy)) {\n                opts.agent = this.agentCache.get(proxy);\n            }\n            else {\n                opts.agent = new HttpsProxyAgent(proxy);\n                this.agentCache.set(proxy, opts.agent);\n            }\n        }\n        return opts;\n    }\n    /**\n     * By default, throw for any non-2xx status code\n     * @param status status code from the HTTP response\n     */\n    validateStatus(status) {\n        return status >= 200 && status < 300;\n    }\n    /**\n     * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\n     * @param params key value pars to encode\n     */\n    paramsSerializer(params) {\n        return querystring_1.default.stringify(params);\n    }\n    translateResponse(opts, res, data) {\n        // headers need to be converted from a map to an obj\n        const headers = {};\n        res.headers.forEach((value, key) => {\n            headers[key] = value;\n        });\n        return {\n            config: opts,\n            data: data,\n            headers,\n            status: res.status,\n            statusText: res.statusText,\n            // XMLHttpRequestLike\n            request: {\n                responseURL: res.url,\n            },\n        };\n    }\n}\nexports.Gaxios = Gaxios;\n//# sourceMappingURL=gaxios.js.map"]},"metadata":{},"sourceType":"script"}