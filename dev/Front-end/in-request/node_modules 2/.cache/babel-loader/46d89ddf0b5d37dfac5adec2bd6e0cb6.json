{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ended = require(\"is-stream-ended\");\n\nconst stream_1 = require(\"stream\");\n\nconst normalApiCaller_1 = require(\"../normalCalls/normalApiCaller\");\n\nconst pagedApiCaller_1 = require(\"./pagedApiCaller\");\n/**\n * A descriptor for methods that support pagination.\n */\n\n\nclass PageDescriptor {\n  constructor(requestPageTokenField, responsePageTokenField, resourceField) {\n    this.requestPageTokenField = requestPageTokenField;\n    this.responsePageTokenField = responsePageTokenField;\n    this.resourceField = resourceField;\n  }\n  /**\n   * Creates a new object Stream which emits the resource on 'data' event.\n   */\n\n\n  createStream(apiCall, request, options) {\n    const stream = new stream_1.PassThrough({\n      objectMode: true\n    });\n    options = Object.assign({}, options, {\n      autoPaginate: false\n    });\n    const maxResults = 'maxResults' in options ? options.maxResults : -1;\n    let pushCount = 0;\n    let started = false;\n\n    function callback(err, resources, next) {\n      if (err) {\n        stream.emit('error', err);\n        return;\n      }\n\n      for (let i = 0; i < resources.length; ++i) {\n        if (ended(stream)) {\n          return;\n        }\n\n        if (resources[i] === null) {\n          continue;\n        }\n\n        stream.push(resources[i]);\n        pushCount++;\n\n        if (pushCount === maxResults) {\n          stream.end();\n        }\n      }\n\n      if (ended(stream)) {\n        return;\n      }\n\n      if (!next) {\n        stream.end();\n        return;\n      } // When pageToken is specified in the original options, it will overwrite\n      // the page token field in the next request. Therefore it must be cleared.\n\n\n      if ('pageToken' in options) {\n        delete options.pageToken;\n      }\n\n      if (stream.isPaused()) {\n        request = next;\n        started = false;\n      } else {\n        setImmediate(apiCall, next, options, callback);\n      }\n    }\n\n    stream.on('resume', () => {\n      if (!started) {\n        started = true;\n        apiCall(request, options, callback);\n      }\n    });\n    return stream;\n  }\n\n  getApiCaller(settings) {\n    if (!settings.autoPaginate) {\n      return new normalApiCaller_1.NormalApiCaller();\n    }\n\n    return new pagedApiCaller_1.PagedApiCaller(this);\n  }\n\n}\n\nexports.PageDescriptor = PageDescriptor;","map":{"version":3,"sources":["../../../src/paginationCalls/pageDescriptor.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA,MAAA,KAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAMA,MAAA,iBAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;;AAEA,MAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAEA;;;;;AAGA,MAAa,cAAb,CAA2B;AAMzB,EAAA,WAAA,CACE,qBADF,EAEE,sBAFF,EAGE,aAHF,EAGuB;AAErB,SAAK,qBAAL,GAA6B,qBAA7B;AACA,SAAK,sBAAL,GAA8B,sBAA9B;AACA,SAAK,aAAL,GAAqB,aAArB;AACD;AAED;;;;;AAGA,EAAA,YAAY,CACV,OADU,EAEV,OAFU,EAGV,OAHU,EAGW;AAErB,UAAM,MAAM,GAAG,IAAI,QAAA,CAAA,WAAJ,CAAgB;AAAC,MAAA,UAAU,EAAE;AAAb,KAAhB,CAAf;AACA,IAAA,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,OAAlB,EAA2B;AAAC,MAAA,YAAY,EAAE;AAAf,KAA3B,CAAV;AACA,UAAM,UAAU,GAAG,gBAAgB,OAAhB,GAA0B,OAAO,CAAC,UAAlC,GAA+C,CAAC,CAAnE;AACA,QAAI,SAAS,GAAG,CAAhB;AACA,QAAI,OAAO,GAAG,KAAd;;AACA,aAAS,QAAT,CAAkB,GAAlB,EAAqC,SAArC,EAA2D,IAA3D,EAAmE;AACjE,UAAI,GAAJ,EAAS;AACP,QAAA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,GAArB;AACA;AACD;;AACD,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,EAAE,CAAxC,EAA2C;AACzC,YAAI,KAAK,CAAC,MAAD,CAAT,EAAmB;AACjB;AACD;;AACD,YAAI,SAAS,CAAC,CAAD,CAAT,KAAiB,IAArB,EAA2B;AACzB;AACD;;AACD,QAAA,MAAM,CAAC,IAAP,CAAY,SAAS,CAAC,CAAD,CAArB;AACA,QAAA,SAAS;;AACT,YAAI,SAAS,KAAK,UAAlB,EAA8B;AAC5B,UAAA,MAAM,CAAC,GAAP;AACD;AACF;;AACD,UAAI,KAAK,CAAC,MAAD,CAAT,EAAmB;AACjB;AACD;;AACD,UAAI,CAAC,IAAL,EAAW;AACT,QAAA,MAAM,CAAC,GAAP;AACA;AACD,OAxBgE,CAyBjE;AACA;;;AACA,UAAI,eAAe,OAAnB,EAA4B;AAC1B,eAAO,OAAO,CAAC,SAAf;AACD;;AACD,UAAI,MAAM,CAAC,QAAP,EAAJ,EAAuB;AACrB,QAAA,OAAO,GAAG,IAAV;AACA,QAAA,OAAO,GAAG,KAAV;AACD,OAHD,MAGO;AACL,QAAA,YAAY,CAAC,OAAD,EAAU,IAAV,EAAgB,OAAhB,EAAyB,QAAzB,CAAZ;AACD;AACF;;AACD,IAAA,MAAM,CAAC,EAAP,CAAU,QAAV,EAAoB,MAAK;AACvB,UAAI,CAAC,OAAL,EAAc;AACZ,QAAA,OAAO,GAAG,IAAV;AACA,QAAA,OAAO,CAAC,OAAD,EAAU,OAAV,EAAoB,QAApB,CAAP;AACD;AACF,KALD;AAMA,WAAO,MAAP;AACD;;AAED,EAAA,YAAY,CAAC,QAAD,EAAuB;AACjC,QAAI,CAAC,QAAQ,CAAC,YAAd,EAA4B;AAC1B,aAAO,IAAI,iBAAA,CAAA,eAAJ,EAAP;AACD;;AACD,WAAO,IAAI,gBAAA,CAAA,cAAJ,CAAmB,IAAnB,CAAP;AACD;;AAhFwB;;AAA3B,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ended = require(\"is-stream-ended\");\nconst stream_1 = require(\"stream\");\nconst normalApiCaller_1 = require(\"../normalCalls/normalApiCaller\");\nconst pagedApiCaller_1 = require(\"./pagedApiCaller\");\n/**\n * A descriptor for methods that support pagination.\n */\nclass PageDescriptor {\n    constructor(requestPageTokenField, responsePageTokenField, resourceField) {\n        this.requestPageTokenField = requestPageTokenField;\n        this.responsePageTokenField = responsePageTokenField;\n        this.resourceField = resourceField;\n    }\n    /**\n     * Creates a new object Stream which emits the resource on 'data' event.\n     */\n    createStream(apiCall, request, options) {\n        const stream = new stream_1.PassThrough({ objectMode: true });\n        options = Object.assign({}, options, { autoPaginate: false });\n        const maxResults = 'maxResults' in options ? options.maxResults : -1;\n        let pushCount = 0;\n        let started = false;\n        function callback(err, resources, next) {\n            if (err) {\n                stream.emit('error', err);\n                return;\n            }\n            for (let i = 0; i < resources.length; ++i) {\n                if (ended(stream)) {\n                    return;\n                }\n                if (resources[i] === null) {\n                    continue;\n                }\n                stream.push(resources[i]);\n                pushCount++;\n                if (pushCount === maxResults) {\n                    stream.end();\n                }\n            }\n            if (ended(stream)) {\n                return;\n            }\n            if (!next) {\n                stream.end();\n                return;\n            }\n            // When pageToken is specified in the original options, it will overwrite\n            // the page token field in the next request. Therefore it must be cleared.\n            if ('pageToken' in options) {\n                delete options.pageToken;\n            }\n            if (stream.isPaused()) {\n                request = next;\n                started = false;\n            }\n            else {\n                setImmediate(apiCall, next, options, callback);\n            }\n        }\n        stream.on('resume', () => {\n            if (!started) {\n                started = true;\n                apiCall(request, options, callback);\n            }\n        });\n        return stream;\n    }\n    getApiCaller(settings) {\n        if (!settings.autoPaginate) {\n            return new normalApiCaller_1.NormalApiCaller();\n        }\n        return new pagedApiCaller_1.PagedApiCaller(this);\n    }\n}\nexports.PageDescriptor = PageDescriptor;\n//# sourceMappingURL=pageDescriptor.js.map"]},"metadata":{},"sourceType":"script"}