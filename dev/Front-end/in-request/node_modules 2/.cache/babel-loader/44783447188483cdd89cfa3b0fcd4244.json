{"ast":null,"code":"/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n\nvar utils = require(\"../utils\");\n\nvar error_1 = require(\"../utils/error\");\n/**\n * 'REDACTED', encoded as a base64 string.\n */\n\n\nvar B64_REDACTED = Buffer.from('REDACTED').toString('base64');\n/**\n * Parses a time stamp string or number and returns the corresponding date if valid.\n *\n * @param {any} time The unix timestamp string or number in milliseconds.\n * @return {string} The corresponding date as a UTC string, if valid. Otherwise, null.\n */\n\nfunction parseDate(time) {\n  try {\n    var date = new Date(parseInt(time, 10));\n\n    if (!isNaN(date.getTime())) {\n      return date.toUTCString();\n    }\n  } catch (e) {// Do nothing. null will be returned.\n  }\n\n  return null;\n}\n/**\n * User metadata class that provides metadata information like user account creation\n * and last sign in time.\n *\n * @param {object} response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\n\n\nvar UserMetadata =\n/** @class */\nfunction () {\n  function UserMetadata(response) {\n    // Creation date should always be available but due to some backend bugs there\n    // were cases in the past where users did not have creation date properly set.\n    // This included legacy Firebase migrating project users and some anonymous users.\n    // These bugs have already been addressed since then.\n    utils.addReadonlyGetter(this, 'creationTime', parseDate(response.createdAt));\n    utils.addReadonlyGetter(this, 'lastSignInTime', parseDate(response.lastLoginAt));\n  }\n  /** @return {object} The plain object representation of the user's metadata. */\n\n\n  UserMetadata.prototype.toJSON = function () {\n    return {\n      lastSignInTime: this.lastSignInTime,\n      creationTime: this.creationTime\n    };\n  };\n\n  return UserMetadata;\n}();\n\nexports.UserMetadata = UserMetadata;\n/**\n * User info class that provides provider user information for different\n * Firebase providers like google.com, facebook.com, password, etc.\n *\n * @param {object} response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\n\nvar UserInfo =\n/** @class */\nfunction () {\n  function UserInfo(response) {\n    // Provider user id and provider id are required.\n    if (!response.rawId || !response.providerId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid user info response');\n    }\n\n    utils.addReadonlyGetter(this, 'uid', response.rawId);\n    utils.addReadonlyGetter(this, 'displayName', response.displayName);\n    utils.addReadonlyGetter(this, 'email', response.email);\n    utils.addReadonlyGetter(this, 'photoURL', response.photoUrl);\n    utils.addReadonlyGetter(this, 'providerId', response.providerId);\n    utils.addReadonlyGetter(this, 'phoneNumber', response.phoneNumber);\n  }\n  /** @return {object} The plain object representation of the current provider data. */\n\n\n  UserInfo.prototype.toJSON = function () {\n    return {\n      uid: this.uid,\n      displayName: this.displayName,\n      email: this.email,\n      photoURL: this.photoURL,\n      providerId: this.providerId,\n      phoneNumber: this.phoneNumber\n    };\n  };\n\n  return UserInfo;\n}();\n\nexports.UserInfo = UserInfo;\n/**\n * User record class that defines the Firebase user object populated from\n * the Firebase Auth getAccountInfo response.\n *\n * @param {any} response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\n\nvar UserRecord =\n/** @class */\nfunction () {\n  function UserRecord(response) {\n    // The Firebase user id is required.\n    if (!response.localId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid user response');\n    }\n\n    utils.addReadonlyGetter(this, 'uid', response.localId);\n    utils.addReadonlyGetter(this, 'email', response.email);\n    utils.addReadonlyGetter(this, 'emailVerified', !!response.emailVerified);\n    utils.addReadonlyGetter(this, 'displayName', response.displayName);\n    utils.addReadonlyGetter(this, 'photoURL', response.photoUrl);\n    utils.addReadonlyGetter(this, 'phoneNumber', response.phoneNumber); // If disabled is not provided, the account is enabled by default.\n\n    utils.addReadonlyGetter(this, 'disabled', response.disabled || false);\n    utils.addReadonlyGetter(this, 'metadata', new UserMetadata(response));\n    var providerData = [];\n\n    for (var _i = 0, _a = response.providerUserInfo || []; _i < _a.length; _i++) {\n      var entry = _a[_i];\n      providerData.push(new UserInfo(entry));\n    }\n\n    utils.addReadonlyGetter(this, 'providerData', providerData); // If the password hash is redacted (probably due to missing permissions)\n    // then clear it out, similar to how the salt is returned. (Otherwise, it\n    // *looks* like a b64-encoded hash is present, which is confusing.)\n\n    if (response.passwordHash === B64_REDACTED) {\n      utils.addReadonlyGetter(this, 'passwordHash', undefined);\n    } else {\n      utils.addReadonlyGetter(this, 'passwordHash', response.passwordHash);\n    }\n\n    utils.addReadonlyGetter(this, 'passwordSalt', response.salt);\n\n    try {\n      utils.addReadonlyGetter(this, 'customClaims', JSON.parse(response.customAttributes));\n    } catch (e) {\n      // Ignore error.\n      utils.addReadonlyGetter(this, 'customClaims', undefined);\n    }\n\n    var validAfterTime = null; // Convert validSince first to UTC milliseconds and then to UTC date string.\n\n    if (typeof response.validSince !== 'undefined') {\n      validAfterTime = parseDate(response.validSince * 1000);\n    }\n\n    utils.addReadonlyGetter(this, 'tokensValidAfterTime', validAfterTime || undefined);\n    utils.addReadonlyGetter(this, 'tenantId', response.tenantId);\n  }\n  /** @return {object} The plain object representation of the user record. */\n\n\n  UserRecord.prototype.toJSON = function () {\n    var json = {\n      uid: this.uid,\n      email: this.email,\n      emailVerified: this.emailVerified,\n      displayName: this.displayName,\n      photoURL: this.photoURL,\n      phoneNumber: this.phoneNumber,\n      disabled: this.disabled,\n      // Convert metadata to json.\n      metadata: this.metadata.toJSON(),\n      passwordHash: this.passwordHash,\n      passwordSalt: this.passwordSalt,\n      customClaims: deep_copy_1.deepCopy(this.customClaims),\n      tokensValidAfterTime: this.tokensValidAfterTime,\n      tenantId: this.tenantId\n    };\n    json.providerData = [];\n\n    for (var _i = 0, _a = this.providerData; _i < _a.length; _i++) {\n      var entry = _a[_i]; // Convert each provider data to json.\n\n      json.providerData.push(entry.toJSON());\n    }\n\n    return json;\n  };\n\n  return UserRecord;\n}();\n\nexports.UserRecord = UserRecord;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/firebase-admin/lib/auth/user-record.js"],"names":["Object","defineProperty","exports","value","deep_copy_1","require","utils","error_1","B64_REDACTED","Buffer","from","toString","parseDate","time","date","Date","parseInt","isNaN","getTime","toUTCString","e","UserMetadata","response","addReadonlyGetter","createdAt","lastLoginAt","prototype","toJSON","lastSignInTime","creationTime","UserInfo","rawId","providerId","FirebaseAuthError","AuthClientErrorCode","INTERNAL_ERROR","displayName","email","photoUrl","phoneNumber","uid","photoURL","UserRecord","localId","emailVerified","disabled","providerData","_i","_a","providerUserInfo","length","entry","push","passwordHash","undefined","salt","JSON","parse","customAttributes","validAfterTime","validSince","tenantId","json","metadata","passwordSalt","customClaims","deepCopy","tokensValidAfterTime"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar deep_copy_1 = require(\"../utils/deep-copy\");\nvar utils = require(\"../utils\");\nvar error_1 = require(\"../utils/error\");\n/**\n * 'REDACTED', encoded as a base64 string.\n */\nvar B64_REDACTED = Buffer.from('REDACTED').toString('base64');\n/**\n * Parses a time stamp string or number and returns the corresponding date if valid.\n *\n * @param {any} time The unix timestamp string or number in milliseconds.\n * @return {string} The corresponding date as a UTC string, if valid. Otherwise, null.\n */\nfunction parseDate(time) {\n    try {\n        var date = new Date(parseInt(time, 10));\n        if (!isNaN(date.getTime())) {\n            return date.toUTCString();\n        }\n    }\n    catch (e) {\n        // Do nothing. null will be returned.\n    }\n    return null;\n}\n/**\n * User metadata class that provides metadata information like user account creation\n * and last sign in time.\n *\n * @param {object} response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\nvar UserMetadata = /** @class */ (function () {\n    function UserMetadata(response) {\n        // Creation date should always be available but due to some backend bugs there\n        // were cases in the past where users did not have creation date properly set.\n        // This included legacy Firebase migrating project users and some anonymous users.\n        // These bugs have already been addressed since then.\n        utils.addReadonlyGetter(this, 'creationTime', parseDate(response.createdAt));\n        utils.addReadonlyGetter(this, 'lastSignInTime', parseDate(response.lastLoginAt));\n    }\n    /** @return {object} The plain object representation of the user's metadata. */\n    UserMetadata.prototype.toJSON = function () {\n        return {\n            lastSignInTime: this.lastSignInTime,\n            creationTime: this.creationTime,\n        };\n    };\n    return UserMetadata;\n}());\nexports.UserMetadata = UserMetadata;\n/**\n * User info class that provides provider user information for different\n * Firebase providers like google.com, facebook.com, password, etc.\n *\n * @param {object} response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\nvar UserInfo = /** @class */ (function () {\n    function UserInfo(response) {\n        // Provider user id and provider id are required.\n        if (!response.rawId || !response.providerId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid user info response');\n        }\n        utils.addReadonlyGetter(this, 'uid', response.rawId);\n        utils.addReadonlyGetter(this, 'displayName', response.displayName);\n        utils.addReadonlyGetter(this, 'email', response.email);\n        utils.addReadonlyGetter(this, 'photoURL', response.photoUrl);\n        utils.addReadonlyGetter(this, 'providerId', response.providerId);\n        utils.addReadonlyGetter(this, 'phoneNumber', response.phoneNumber);\n    }\n    /** @return {object} The plain object representation of the current provider data. */\n    UserInfo.prototype.toJSON = function () {\n        return {\n            uid: this.uid,\n            displayName: this.displayName,\n            email: this.email,\n            photoURL: this.photoURL,\n            providerId: this.providerId,\n            phoneNumber: this.phoneNumber,\n        };\n    };\n    return UserInfo;\n}());\nexports.UserInfo = UserInfo;\n/**\n * User record class that defines the Firebase user object populated from\n * the Firebase Auth getAccountInfo response.\n *\n * @param {any} response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\nvar UserRecord = /** @class */ (function () {\n    function UserRecord(response) {\n        // The Firebase user id is required.\n        if (!response.localId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid user response');\n        }\n        utils.addReadonlyGetter(this, 'uid', response.localId);\n        utils.addReadonlyGetter(this, 'email', response.email);\n        utils.addReadonlyGetter(this, 'emailVerified', !!response.emailVerified);\n        utils.addReadonlyGetter(this, 'displayName', response.displayName);\n        utils.addReadonlyGetter(this, 'photoURL', response.photoUrl);\n        utils.addReadonlyGetter(this, 'phoneNumber', response.phoneNumber);\n        // If disabled is not provided, the account is enabled by default.\n        utils.addReadonlyGetter(this, 'disabled', response.disabled || false);\n        utils.addReadonlyGetter(this, 'metadata', new UserMetadata(response));\n        var providerData = [];\n        for (var _i = 0, _a = (response.providerUserInfo || []); _i < _a.length; _i++) {\n            var entry = _a[_i];\n            providerData.push(new UserInfo(entry));\n        }\n        utils.addReadonlyGetter(this, 'providerData', providerData);\n        // If the password hash is redacted (probably due to missing permissions)\n        // then clear it out, similar to how the salt is returned. (Otherwise, it\n        // *looks* like a b64-encoded hash is present, which is confusing.)\n        if (response.passwordHash === B64_REDACTED) {\n            utils.addReadonlyGetter(this, 'passwordHash', undefined);\n        }\n        else {\n            utils.addReadonlyGetter(this, 'passwordHash', response.passwordHash);\n        }\n        utils.addReadonlyGetter(this, 'passwordSalt', response.salt);\n        try {\n            utils.addReadonlyGetter(this, 'customClaims', JSON.parse(response.customAttributes));\n        }\n        catch (e) {\n            // Ignore error.\n            utils.addReadonlyGetter(this, 'customClaims', undefined);\n        }\n        var validAfterTime = null;\n        // Convert validSince first to UTC milliseconds and then to UTC date string.\n        if (typeof response.validSince !== 'undefined') {\n            validAfterTime = parseDate(response.validSince * 1000);\n        }\n        utils.addReadonlyGetter(this, 'tokensValidAfterTime', validAfterTime || undefined);\n        utils.addReadonlyGetter(this, 'tenantId', response.tenantId);\n    }\n    /** @return {object} The plain object representation of the user record. */\n    UserRecord.prototype.toJSON = function () {\n        var json = {\n            uid: this.uid,\n            email: this.email,\n            emailVerified: this.emailVerified,\n            displayName: this.displayName,\n            photoURL: this.photoURL,\n            phoneNumber: this.phoneNumber,\n            disabled: this.disabled,\n            // Convert metadata to json.\n            metadata: this.metadata.toJSON(),\n            passwordHash: this.passwordHash,\n            passwordSalt: this.passwordSalt,\n            customClaims: deep_copy_1.deepCopy(this.customClaims),\n            tokensValidAfterTime: this.tokensValidAfterTime,\n            tenantId: this.tenantId,\n        };\n        json.providerData = [];\n        for (var _i = 0, _a = this.providerData; _i < _a.length; _i++) {\n            var entry = _a[_i];\n            // Convert each provider data to json.\n            json.providerData.push(entry.toJSON());\n        }\n        return json;\n    };\n    return UserRecord;\n}());\nexports.UserRecord = UserRecord;\n"]},"metadata":{},"sourceType":"script"}