{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst querystring = require(\"querystring\");\n\nfunction normalize(optionsOrCallback, cb) {\n  const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n  const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n  return {\n    options,\n    callback\n  };\n}\n\nexports.normalize = normalize;\n/**\n * Flatten an object into an Array of arrays, [[key, value], ..].\n * Implements Object.entries() for Node.js <8\n * @internal\n */\n\nfunction objectEntries(obj) {\n  return Object.keys(obj).map(key => [key, obj[key]]);\n}\n\nexports.objectEntries = objectEntries;\n/**\n * Encode `str` with encodeURIComponent, plus these\n * reserved characters: `! * ' ( )`.\n *\n * @see [MDN: fixedEncodeURIComponent]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent}\n *\n * @param {string} str The URI component to encode.\n * @return {string} The encoded string.\n */\n\nfunction fixedEncodeURIComponent(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, c => '%' + c.charCodeAt(0).toString(16).toUpperCase());\n}\n\nexports.fixedEncodeURIComponent = fixedEncodeURIComponent;\n/**\n * URI encode `uri` for generating signed URLs, using fixedEncodeURIComponent.\n *\n * Encode every byte except `A-Z a-Z 0-9 ~ - . _`.\n *\n * @param {string} uri The URI to encode.\n * @param [boolean=false] encodeSlash If `true`, the \"/\" character is not encoded.\n * @return {string} The encoded string.\n */\n\nfunction encodeURI(uri, encodeSlash) {\n  // Split the string by `/`, and conditionally rejoin them with either\n  // %2F if encodeSlash is `true`, or '/' if `false`.\n  return uri.split('/').map(fixedEncodeURIComponent).join(encodeSlash ? '%2F' : '/');\n}\n\nexports.encodeURI = encodeURI;\n/**\n * Serialize an object to a URL query string using util.encodeURI(uri, true).\n * @param {string} url The object to serialize.\n * @return {string} Serialized string.\n */\n\nfunction qsStringify(qs) {\n  return querystring.stringify(qs, '&', '=', {\n    encodeURIComponent: component => encodeURI(component, true)\n  });\n}\n\nexports.qsStringify = qsStringify;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/@google-cloud/storage/build/src/util.js"],"names":["Object","defineProperty","exports","value","querystring","require","normalize","optionsOrCallback","cb","options","callback","objectEntries","obj","keys","map","key","fixedEncodeURIComponent","str","encodeURIComponent","replace","c","charCodeAt","toString","toUpperCase","encodeURI","uri","encodeSlash","split","join","qsStringify","qs","stringify","component"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,SAASC,SAAT,CAAmBC,iBAAnB,EAAsCC,EAAtC,EAA0C;AACtC,QAAMC,OAAO,GAAI,OAAOF,iBAAP,KAA6B,QAA7B,GACXA,iBADW,GAEX,EAFN;AAGA,QAAMG,QAAQ,GAAI,OAAOH,iBAAP,KAA6B,UAA7B,GACZA,iBADY,GAEZC,EAFN;AAGA,SAAO;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAP;AACH;;AACDR,OAAO,CAACI,SAAR,GAAoBA,SAApB;AACA;;;;;;AAKA,SAASK,aAAT,CAAuBC,GAAvB,EAA4B;AACxB,SAAOZ,MAAM,CAACa,IAAP,CAAYD,GAAZ,EAAiBE,GAAjB,CAAqBC,GAAG,IAAI,CAACA,GAAD,EAAMH,GAAG,CAACG,GAAD,CAAT,CAA5B,CAAP;AACH;;AACDb,OAAO,CAACS,aAAR,GAAwBA,aAAxB;AACA;;;;;;;;;;AASA,SAASK,uBAAT,CAAiCC,GAAjC,EAAsC;AAClC,SAAOC,kBAAkB,CAACD,GAAD,CAAlB,CAAwBE,OAAxB,CAAgC,UAAhC,EAA4CC,CAAC,IAAI,MACpDA,CAAC,CACIC,UADL,CACgB,CADhB,EAEKC,QAFL,CAEc,EAFd,EAGKC,WAHL,EADG,CAAP;AAKH;;AACDrB,OAAO,CAACc,uBAAR,GAAkCA,uBAAlC;AACA;;;;;;;;;;AASA,SAASQ,SAAT,CAAmBC,GAAnB,EAAwBC,WAAxB,EAAqC;AACjC;AACA;AACA,SAAOD,GAAG,CACLE,KADE,CACI,GADJ,EAEFb,GAFE,CAEEE,uBAFF,EAGFY,IAHE,CAGGF,WAAW,GAAG,KAAH,GAAW,GAHzB,CAAP;AAIH;;AACDxB,OAAO,CAACsB,SAAR,GAAoBA,SAApB;AACA;;;;;;AAKA,SAASK,WAAT,CAAqBC,EAArB,EAAyB;AACrB,SAAO1B,WAAW,CAAC2B,SAAZ,CAAsBD,EAAtB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC;AACvCZ,IAAAA,kBAAkB,EAAGc,SAAD,IAAeR,SAAS,CAACQ,SAAD,EAAY,IAAZ;AADL,GAApC,CAAP;AAGH;;AACD9B,OAAO,CAAC2B,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst querystring = require(\"querystring\");\nfunction normalize(optionsOrCallback, cb) {\n    const options = (typeof optionsOrCallback === 'object'\n        ? optionsOrCallback\n        : {});\n    const callback = (typeof optionsOrCallback === 'function'\n        ? optionsOrCallback\n        : cb);\n    return { options, callback };\n}\nexports.normalize = normalize;\n/**\n * Flatten an object into an Array of arrays, [[key, value], ..].\n * Implements Object.entries() for Node.js <8\n * @internal\n */\nfunction objectEntries(obj) {\n    return Object.keys(obj).map(key => [key, obj[key]]);\n}\nexports.objectEntries = objectEntries;\n/**\n * Encode `str` with encodeURIComponent, plus these\n * reserved characters: `! * ' ( )`.\n *\n * @see [MDN: fixedEncodeURIComponent]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent}\n *\n * @param {string} str The URI component to encode.\n * @return {string} The encoded string.\n */\nfunction fixedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, c => '%' +\n        c\n            .charCodeAt(0)\n            .toString(16)\n            .toUpperCase());\n}\nexports.fixedEncodeURIComponent = fixedEncodeURIComponent;\n/**\n * URI encode `uri` for generating signed URLs, using fixedEncodeURIComponent.\n *\n * Encode every byte except `A-Z a-Z 0-9 ~ - . _`.\n *\n * @param {string} uri The URI to encode.\n * @param [boolean=false] encodeSlash If `true`, the \"/\" character is not encoded.\n * @return {string} The encoded string.\n */\nfunction encodeURI(uri, encodeSlash) {\n    // Split the string by `/`, and conditionally rejoin them with either\n    // %2F if encodeSlash is `true`, or '/' if `false`.\n    return uri\n        .split('/')\n        .map(fixedEncodeURIComponent)\n        .join(encodeSlash ? '%2F' : '/');\n}\nexports.encodeURI = encodeURI;\n/**\n * Serialize an object to a URL query string using util.encodeURI(uri, true).\n * @param {string} url The object to serialize.\n * @return {string} Serialized string.\n */\nfunction qsStringify(qs) {\n    return querystring.stringify(qs, '&', '=', {\n        encodeURIComponent: (component) => encodeURI(component, true),\n    });\n}\nexports.qsStringify = qsStringify;\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"script"}