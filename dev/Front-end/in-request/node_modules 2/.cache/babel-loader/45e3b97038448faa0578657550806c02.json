{"ast":null,"code":"\"use strict\";\n\nmodule.exports = BufferWriter; // extends Writer\n\nvar Writer = require(\"./writer\");\n\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\nvar Buffer = util.Buffer;\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\n\nfunction BufferWriter() {\n  Writer.call(this);\n}\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\n\n\nBufferWriter.alloc = function alloc_buffer(size) {\n  return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\n};\n\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\" ? function writeBytesBuffer_set(val, buf, pos) {\n  buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n  // also works for plain array values\n}\n/* istanbul ignore next */\n: function writeBytesBuffer_copy(val, buf, pos) {\n  if (val.copy) // Buffer values\n    val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;) // plain array values\n  buf[pos++] = val[i++];\n};\n/**\r\n * @override\r\n */\n\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n  if (util.isString(value)) value = util._Buffer_from(value, \"base64\");\n  var len = value.length >>> 0;\n  this.uint32(len);\n  if (len) this._push(writeBytesBuffer, len, value);\n  return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n  if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n    util.utf8.write(val, buf, pos);else buf.utf8Write(val, pos);\n}\n/**\r\n * @override\r\n */\n\n\nBufferWriter.prototype.string = function write_string_buffer(value) {\n  var len = Buffer.byteLength(value);\n  this.uint32(len);\n  if (len) this._push(writeStringBuffer, len, value);\n  return this;\n};\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/protobufjs/src/writer_buffer.js"],"names":["module","exports","BufferWriter","Writer","require","prototype","Object","create","constructor","util","Buffer","call","alloc","alloc_buffer","size","_Buffer_allocUnsafe","writeBytesBuffer","Uint8Array","set","name","writeBytesBuffer_set","val","buf","pos","writeBytesBuffer_copy","copy","length","i","bytes","write_bytes_buffer","value","isString","_Buffer_from","len","uint32","_push","writeStringBuffer","utf8","write","utf8Write","string","write_string_buffer","byteLength"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiBC,YAAjB,C,CAEA;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,CAACF,YAAY,CAACG,SAAb,GAAyBC,MAAM,CAACC,MAAP,CAAcJ,MAAM,CAACE,SAArB,CAA1B,EAA2DG,WAA3D,GAAyEN,YAAzE;;AAEA,IAAIO,IAAI,GAAGL,OAAO,CAAC,gBAAD,CAAlB;;AAEA,IAAIM,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAEA;;;;;;;AAMA,SAASR,YAAT,GAAwB;AACpBC,EAAAA,MAAM,CAACQ,IAAP,CAAY,IAAZ;AACH;AAED;;;;;;;AAKAT,YAAY,CAACU,KAAb,GAAqB,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC7C,SAAO,CAACZ,YAAY,CAACU,KAAb,GAAqBH,IAAI,CAACM,mBAA3B,EAAgDD,IAAhD,CAAP;AACH,CAFD;;AAIA,IAAIE,gBAAgB,GAAGN,MAAM,IAAIA,MAAM,CAACL,SAAP,YAA4BY,UAAtC,IAAoDP,MAAM,CAACL,SAAP,CAAiBa,GAAjB,CAAqBC,IAArB,KAA8B,KAAlF,GACjB,SAASC,oBAAT,CAA8BC,GAA9B,EAAmCC,GAAnC,EAAwCC,GAAxC,EAA6C;AAC3CD,EAAAA,GAAG,CAACJ,GAAJ,CAAQG,GAAR,EAAaE,GAAb,EAD2C,CACxB;AACA;AACtB;AACD;AALmB,EAMjB,SAASC,qBAAT,CAA+BH,GAA/B,EAAoCC,GAApC,EAAyCC,GAAzC,EAA8C;AAC5C,MAAIF,GAAG,CAACI,IAAR,EAAc;AACVJ,IAAAA,GAAG,CAACI,IAAJ,CAASH,GAAT,EAAcC,GAAd,EAAmB,CAAnB,EAAsBF,GAAG,CAACK,MAA1B,EADJ,KAEK,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACK,MAAxB,GAAiC;AAClCJ,EAAAA,GAAG,CAACC,GAAG,EAAJ,CAAH,GAAaF,GAAG,CAACM,CAAC,EAAF,CAAhB;AACP,CAXL;AAaA;;;;AAGAzB,YAAY,CAACG,SAAb,CAAuBuB,KAAvB,GAA+B,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAC9D,MAAIrB,IAAI,CAACsB,QAAL,CAAcD,KAAd,CAAJ,EACIA,KAAK,GAAGrB,IAAI,CAACuB,YAAL,CAAkBF,KAAlB,EAAyB,QAAzB,CAAR;AACJ,MAAIG,GAAG,GAAGH,KAAK,CAACJ,MAAN,KAAiB,CAA3B;AACA,OAAKQ,MAAL,CAAYD,GAAZ;AACA,MAAIA,GAAJ,EACI,KAAKE,KAAL,CAAWnB,gBAAX,EAA6BiB,GAA7B,EAAkCH,KAAlC;AACJ,SAAO,IAAP;AACH,CARD;;AAUA,SAASM,iBAAT,CAA2Bf,GAA3B,EAAgCC,GAAhC,EAAqCC,GAArC,EAA0C;AACtC,MAAIF,GAAG,CAACK,MAAJ,GAAa,EAAjB,EAAqB;AACjBjB,IAAAA,IAAI,CAAC4B,IAAL,CAAUC,KAAV,CAAgBjB,GAAhB,EAAqBC,GAArB,EAA0BC,GAA1B,EADJ,KAGID,GAAG,CAACiB,SAAJ,CAAclB,GAAd,EAAmBE,GAAnB;AACP;AAED;;;;;AAGArB,YAAY,CAACG,SAAb,CAAuBmC,MAAvB,GAAgC,SAASC,mBAAT,CAA6BX,KAA7B,EAAoC;AAChE,MAAIG,GAAG,GAAGvB,MAAM,CAACgC,UAAP,CAAkBZ,KAAlB,CAAV;AACA,OAAKI,MAAL,CAAYD,GAAZ;AACA,MAAIA,GAAJ,EACI,KAAKE,KAAL,CAAWC,iBAAX,EAA8BH,GAA9B,EAAmCH,KAAnC;AACJ,SAAO,IAAP;AACH,CAND;AASA","sourcesContent":["\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"]},"metadata":{},"sourceType":"script"}