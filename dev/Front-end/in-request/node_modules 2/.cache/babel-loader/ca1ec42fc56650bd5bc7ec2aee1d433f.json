{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Accordion) {\n  var DocumentedAccordion = describe(Accordion).availableAt(getAvailableAtBadge('Accordion')).description('An accordion containing collapsible panels.').usage(\"import { Accordion, AccordionPanel } from 'grommet';\\n<Accordion>\\n  <AccordionPanel label='Panel 1'>...</AccordionPanel>\\n  <AccordionPanel label='Panel 2'>...</AccordionPanel>\\n</Accordion>\").intrinsicElement('div');\n  DocumentedAccordion.propTypes = _extends({}, genericProps, {\n    activeIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]).description(\"Active panel index. If specified, Accordion will be a controlled \\ncomponent. This means that future panel changes will not work unless you\\nsubscribe to onActive function and update activeIndex accordingly.\").defaultValue(0),\n    animate: PropTypes.bool.description('Transition content in & out with a slide down animation.').defaultValue(true),\n    children: PropTypes.node.description('Array of AccordionPanels.'),\n    onActive: PropTypes.func.description(\"Function that will be called when the active index changes.\\nIt will always send an array with currently active panel indexes.\"),\n    multiple: PropTypes.bool.description('Allow multiple panels to be opened at once.').defaultValue(false),\n    messages: PropTypes.shape({\n      tabContents: PropTypes.string\n    }).description('Custom messages for Tabs. Used for accessibility by screen readers.').defaultValue({\n      tabContents: 'Tab Contents'\n    })\n  });\n  return DocumentedAccordion;\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/Accordion/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","genericProps","getAvailableAtBadge","doc","Accordion","DocumentedAccordion","availableAt","description","usage","intrinsicElement","propTypes","activeIndex","oneOfType","number","arrayOf","defaultValue","animate","bool","children","node","onActive","func","multiple","messages","shape","tabContents","string"],"mappings":"AAAA,SAASA,QAAT,GAAoB;AAAEA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,UAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,WAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,YAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,UAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,WAAOL,MAAP;AAAgB,GAA5P;;AAA8P,SAAOH,QAAQ,CAACY,KAAT,CAAe,IAAf,EAAqBP,SAArB,CAAP;AAAyC;;AAE7T,SAASQ,QAAT,EAAmBC,SAAnB,QAAoC,YAApC;AACA,SAASC,YAAT,EAAuBC,mBAAvB,QAAkD,aAAlD;AACA,OAAO,IAAIC,GAAG,GAAG,SAASA,GAAT,CAAaC,SAAb,EAAwB;AACvC,MAAIC,mBAAmB,GAAGN,QAAQ,CAACK,SAAD,CAAR,CAAoBE,WAApB,CAAgCJ,mBAAmB,CAAC,WAAD,CAAnD,EAAkEK,WAAlE,CAA8E,6CAA9E,EAA6HC,KAA7H,CAAmI,iMAAnI,EAAsUC,gBAAtU,CAAuV,KAAvV,CAA1B;AACAJ,EAAAA,mBAAmB,CAACK,SAApB,GAAgCxB,QAAQ,CAAC,EAAD,EAAKe,YAAL,EAAmB;AACzDU,IAAAA,WAAW,EAAEX,SAAS,CAACY,SAAV,CAAoB,CAACZ,SAAS,CAACa,MAAX,EAAmBb,SAAS,CAACc,OAAV,CAAkBd,SAAS,CAACa,MAA5B,CAAnB,CAApB,EAA6EN,WAA7E,CAAyF,iNAAzF,EAA4SQ,YAA5S,CAAyT,CAAzT,CAD4C;AAEzDC,IAAAA,OAAO,EAAEhB,SAAS,CAACiB,IAAV,CAAeV,WAAf,CAA2B,0DAA3B,EAAuFQ,YAAvF,CAAoG,IAApG,CAFgD;AAGzDG,IAAAA,QAAQ,EAAElB,SAAS,CAACmB,IAAV,CAAeZ,WAAf,CAA2B,2BAA3B,CAH+C;AAIzDa,IAAAA,QAAQ,EAAEpB,SAAS,CAACqB,IAAV,CAAed,WAAf,CAA2B,gIAA3B,CAJ+C;AAKzDe,IAAAA,QAAQ,EAAEtB,SAAS,CAACiB,IAAV,CAAeV,WAAf,CAA2B,6CAA3B,EAA0EQ,YAA1E,CAAuF,KAAvF,CAL+C;AAMzDQ,IAAAA,QAAQ,EAAEvB,SAAS,CAACwB,KAAV,CAAgB;AACxBC,MAAAA,WAAW,EAAEzB,SAAS,CAAC0B;AADC,KAAhB,EAEPnB,WAFO,CAEK,qEAFL,EAE4EQ,YAF5E,CAEyF;AACjGU,MAAAA,WAAW,EAAE;AADoF,KAFzF;AAN+C,GAAnB,CAAxC;AAYA,SAAOpB,mBAAP;AACD,CAfM","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Accordion) {\n  var DocumentedAccordion = describe(Accordion).availableAt(getAvailableAtBadge('Accordion')).description('An accordion containing collapsible panels.').usage(\"import { Accordion, AccordionPanel } from 'grommet';\\n<Accordion>\\n  <AccordionPanel label='Panel 1'>...</AccordionPanel>\\n  <AccordionPanel label='Panel 2'>...</AccordionPanel>\\n</Accordion>\").intrinsicElement('div');\n  DocumentedAccordion.propTypes = _extends({}, genericProps, {\n    activeIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]).description(\"Active panel index. If specified, Accordion will be a controlled \\ncomponent. This means that future panel changes will not work unless you\\nsubscribe to onActive function and update activeIndex accordingly.\").defaultValue(0),\n    animate: PropTypes.bool.description('Transition content in & out with a slide down animation.').defaultValue(true),\n    children: PropTypes.node.description('Array of AccordionPanels.'),\n    onActive: PropTypes.func.description(\"Function that will be called when the active index changes.\\nIt will always send an array with currently active panel indexes.\"),\n    multiple: PropTypes.bool.description('Allow multiple panels to be opened at once.').defaultValue(false),\n    messages: PropTypes.shape({\n      tabContents: PropTypes.string\n    }).description('Custom messages for Tabs. Used for accessibility by screen readers.').defaultValue({\n      tabContents: 'Tab Contents'\n    })\n  });\n  return DocumentedAccordion;\n};"]},"metadata":{},"sourceType":"module"}