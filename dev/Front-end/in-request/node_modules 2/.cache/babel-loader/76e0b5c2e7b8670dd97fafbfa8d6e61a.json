{"ast":null,"code":"/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"./error\");\n\nvar validator = require(\"./validator\");\n\nvar http = require(\"http\");\n\nvar https = require(\"https\");\n\nvar url = require(\"url\");\n\nvar events_1 = require(\"events\");\n\nvar DefaultHttpResponse =\n/** @class */\nfunction () {\n  /**\n   * Constructs a new HttpResponse from the given LowLevelResponse.\n   */\n  function DefaultHttpResponse(resp) {\n    this.status = resp.status;\n    this.headers = resp.headers;\n    this.text = resp.data;\n\n    try {\n      if (!resp.data) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'HTTP response missing data.');\n      }\n\n      this.parsedData = JSON.parse(resp.data);\n    } catch (err) {\n      this.parsedData = undefined;\n      this.parseError = err;\n    }\n\n    this.request = resp.config.method + \" \" + resp.config.url;\n  }\n\n  Object.defineProperty(DefaultHttpResponse.prototype, \"data\", {\n    get: function () {\n      if (this.isJson()) {\n        return this.parsedData;\n      }\n\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, \"Error while parsing response data: \\\"\" + this.parseError.toString() + \"\\\". Raw server \" + (\"response: \\\"\" + this.text + \"\\\". Status code: \\\"\" + this.status + \"\\\". Outgoing \") + (\"request: \\\"\" + this.request + \".\\\"\"));\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  DefaultHttpResponse.prototype.isJson = function () {\n    return typeof this.parsedData !== 'undefined';\n  };\n\n  return DefaultHttpResponse;\n}();\n/**\n * Represents a multipart HTTP response. Parts that constitute the response body can be accessed\n * via the multipart getter. Getters for text and data throw errors.\n */\n\n\nvar MultipartHttpResponse =\n/** @class */\nfunction () {\n  function MultipartHttpResponse(resp) {\n    this.status = resp.status;\n    this.headers = resp.headers;\n    this.multipart = resp.multipart;\n  }\n\n  Object.defineProperty(MultipartHttpResponse.prototype, \"text\", {\n    get: function () {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, 'Unable to parse multipart payload as text');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MultipartHttpResponse.prototype, \"data\", {\n    get: function () {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, 'Unable to parse multipart payload as JSON');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MultipartHttpResponse.prototype.isJson = function () {\n    return false;\n  };\n\n  return MultipartHttpResponse;\n}();\n\nvar HttpError =\n/** @class */\nfunction (_super) {\n  __extends(HttpError, _super);\n\n  function HttpError(response) {\n    var _this = _super.call(this, \"Server responded with status \" + response.status + \".\") || this;\n\n    _this.response = response; // Set the prototype so that instanceof checks will work correctly.\n    // See: https://github.com/Microsoft/TypeScript/issues/13965\n\n    Object.setPrototypeOf(_this, HttpError.prototype);\n    return _this;\n  }\n\n  return HttpError;\n}(Error);\n\nexports.HttpError = HttpError;\n/**\n * Default retry configuration for HTTP requests. Retries up to 4 times on connection reset and timeout errors\n * as well as HTTP 503 errors. Exposed as a function to ensure that every HttpClient gets its own RetryConfig\n * instance.\n */\n\nfunction defaultRetryConfig() {\n  return {\n    maxRetries: 4,\n    statusCodes: [503],\n    ioErrorCodes: ['ECONNRESET', 'ETIMEDOUT'],\n    backOffFactor: 0.5,\n    maxDelayInMillis: 60 * 1000\n  };\n}\n\nexports.defaultRetryConfig = defaultRetryConfig;\n/**\n * Ensures that the given RetryConfig object is valid.\n *\n * @param retry The configuration to be validated.\n */\n\nfunction validateRetryConfig(retry) {\n  if (!validator.isNumber(retry.maxRetries) || retry.maxRetries < 0) {\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'maxRetries must be a non-negative integer');\n  }\n\n  if (typeof retry.backOffFactor !== 'undefined') {\n    if (!validator.isNumber(retry.backOffFactor) || retry.backOffFactor < 0) {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'backOffFactor must be a non-negative number');\n    }\n  }\n\n  if (!validator.isNumber(retry.maxDelayInMillis) || retry.maxDelayInMillis < 0) {\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'maxDelayInMillis must be a non-negative integer');\n  }\n\n  if (typeof retry.statusCodes !== 'undefined' && !validator.isArray(retry.statusCodes)) {\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'statusCodes must be an array');\n  }\n\n  if (typeof retry.ioErrorCodes !== 'undefined' && !validator.isArray(retry.ioErrorCodes)) {\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'ioErrorCodes must be an array');\n  }\n}\n\nvar HttpClient =\n/** @class */\nfunction () {\n  function HttpClient(retry) {\n    if (retry === void 0) {\n      retry = defaultRetryConfig();\n    }\n\n    this.retry = retry;\n\n    if (this.retry) {\n      validateRetryConfig(this.retry);\n    }\n  }\n  /**\n   * Sends an HTTP request to a remote server. If the server responds with a successful response (2xx), the returned\n   * promise resolves with an HttpResponse. If the server responds with an error (3xx, 4xx, 5xx), the promise rejects\n   * with an HttpError. In case of all other errors, the promise rejects with a FirebaseAppError. If a request fails\n   * due to a low-level network error, transparently retries the request once before rejecting the promise.\n   *\n   * If the request data is specified as an object, it will be serialized into a JSON string. The application/json\n   * content-type header will also be automatically set in this case. For all other payload types, the content-type\n   * header should be explicitly set by the caller. To send a JSON leaf value (e.g. \"foo\", 5), parse it into JSON,\n   * and pass as a string or a Buffer along with the appropriate content-type header.\n   *\n   * @param {HttpRequest} config HTTP request to be sent.\n   * @return {Promise<HttpResponse>} A promise that resolves with the response details.\n   */\n\n\n  HttpClient.prototype.send = function (config) {\n    return this.sendWithRetry(config);\n  };\n  /**\n   * Sends an HTTP request. In the event of an error, retries the HTTP request according to the\n   * RetryConfig set on the HttpClient.\n   *\n   * @param {HttpRequestConfig} config HTTP request to be sent.\n   * @param {number} retryAttempts Number of retries performed up to now.\n   * @return {Promise<HttpResponse>} A promise that resolves with the response details.\n   */\n\n\n  HttpClient.prototype.sendWithRetry = function (config, retryAttempts) {\n    var _this = this;\n\n    if (retryAttempts === void 0) {\n      retryAttempts = 0;\n    }\n\n    return AsyncHttpCall.invoke(config).then(function (resp) {\n      return _this.createHttpResponse(resp);\n    }).catch(function (err) {\n      var _a = _this.getRetryDelayMillis(retryAttempts, err),\n          delayMillis = _a[0],\n          canRetry = _a[1];\n\n      if (canRetry && _this.retry && delayMillis <= _this.retry.maxDelayInMillis) {\n        return _this.waitForRetry(delayMillis).then(function () {\n          return _this.sendWithRetry(config, retryAttempts + 1);\n        });\n      }\n\n      if (err.response) {\n        throw new HttpError(_this.createHttpResponse(err.response));\n      }\n\n      if (err.code === 'ETIMEDOUT') {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_TIMEOUT, \"Error while making request: \" + err.message + \".\");\n      }\n\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_ERROR, \"Error while making request: \" + err.message + \". Error code: \" + err.code);\n    });\n  };\n\n  HttpClient.prototype.createHttpResponse = function (resp) {\n    if (resp.multipart) {\n      return new MultipartHttpResponse(resp);\n    }\n\n    return new DefaultHttpResponse(resp);\n  };\n\n  HttpClient.prototype.waitForRetry = function (delayMillis) {\n    if (delayMillis > 0) {\n      return new Promise(function (resolve) {\n        setTimeout(resolve, delayMillis);\n      });\n    }\n\n    return Promise.resolve();\n  };\n  /**\n   * Checks if a failed request is eligible for a retry, and if so returns the duration to wait before initiating\n   * the retry.\n   *\n   * @param {number} retryAttempts Number of retries completed up to now.\n   * @param {LowLevelError} err The last encountered error.\n   * @returns {[number, boolean]} A 2-tuple where the 1st element is the duration to wait before another retry, and the\n   *     2nd element is a boolean indicating whether the request is eligible for a retry or not.\n   */\n\n\n  HttpClient.prototype.getRetryDelayMillis = function (retryAttempts, err) {\n    if (!this.isRetryEligible(retryAttempts, err)) {\n      return [0, false];\n    }\n\n    var response = err.response;\n\n    if (response && response.headers['retry-after']) {\n      var delayMillis = this.parseRetryAfterIntoMillis(response.headers['retry-after']);\n\n      if (delayMillis > 0) {\n        return [delayMillis, true];\n      }\n    }\n\n    return [this.backOffDelayMillis(retryAttempts), true];\n  };\n\n  HttpClient.prototype.isRetryEligible = function (retryAttempts, err) {\n    if (!this.retry) {\n      return false;\n    }\n\n    if (retryAttempts >= this.retry.maxRetries) {\n      return false;\n    }\n\n    if (err.response) {\n      var statusCodes = this.retry.statusCodes || [];\n      return statusCodes.indexOf(err.response.status) !== -1;\n    }\n\n    if (err.code) {\n      var retryCodes = this.retry.ioErrorCodes || [];\n      return retryCodes.indexOf(err.code) !== -1;\n    }\n\n    return false;\n  };\n  /**\n   * Parses the Retry-After HTTP header as a milliseconds value. Return value is negative if the Retry-After header\n   * contains an expired timestamp or otherwise malformed.\n   */\n\n\n  HttpClient.prototype.parseRetryAfterIntoMillis = function (retryAfter) {\n    var delaySeconds = parseInt(retryAfter, 10);\n\n    if (!isNaN(delaySeconds)) {\n      return delaySeconds * 1000;\n    }\n\n    var date = new Date(retryAfter);\n\n    if (!isNaN(date.getTime())) {\n      return date.getTime() - Date.now();\n    }\n\n    return -1;\n  };\n\n  HttpClient.prototype.backOffDelayMillis = function (retryAttempts) {\n    if (retryAttempts === 0) {\n      return 0;\n    }\n\n    if (!this.retry) {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected this.retry to exist.');\n    }\n\n    var backOffFactor = this.retry.backOffFactor || 0;\n    var delayInSeconds = Math.pow(2, retryAttempts) * backOffFactor;\n    return Math.min(delayInSeconds * 1000, this.retry.maxDelayInMillis);\n  };\n\n  return HttpClient;\n}();\n\nexports.HttpClient = HttpClient;\n/**\n * Parses a full HTTP response message containing both a header and a body.\n *\n * @param {string|Buffer} response The HTTP response to be parsed.\n * @param {HttpRequestConfig} config The request configuration that resulted in the HTTP response.\n * @return {HttpResponse} An object containing the parsed HTTP status, headers and the body.\n */\n\nfunction parseHttpResponse(response, config) {\n  var responseText = validator.isBuffer(response) ? response.toString('utf-8') : response;\n  var endOfHeaderPos = responseText.indexOf('\\r\\n\\r\\n');\n  var headerLines = responseText.substring(0, endOfHeaderPos).split('\\r\\n');\n  var statusLine = headerLines[0];\n  var status = statusLine.trim().split(/\\s/)[1];\n  var headers = {};\n  headerLines.slice(1).forEach(function (line) {\n    var colonPos = line.indexOf(':');\n    var name = line.substring(0, colonPos).trim().toLowerCase();\n    var value = line.substring(colonPos + 1).trim();\n    headers[name] = value;\n  });\n  var data = responseText.substring(endOfHeaderPos + 4);\n\n  if (data.endsWith('\\n')) {\n    data = data.slice(0, -1);\n  }\n\n  if (data.endsWith('\\r')) {\n    data = data.slice(0, -1);\n  }\n\n  var lowLevelResponse = {\n    status: parseInt(status, 10),\n    headers: headers,\n    data: data,\n    config: config,\n    request: null\n  };\n\n  if (!validator.isNumber(lowLevelResponse.status)) {\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Malformed HTTP status line.');\n  }\n\n  return new DefaultHttpResponse(lowLevelResponse);\n}\n\nexports.parseHttpResponse = parseHttpResponse;\n/**\n * A helper class for sending HTTP requests over the wire. This is a wrapper around the standard\n * http and https packages of Node.js, providing content processing, timeouts and error handling.\n * It also wraps the callback API of the Node.js standard library in a more flexible Promise API.\n */\n\nvar AsyncHttpCall =\n/** @class */\nfunction () {\n  function AsyncHttpCall(config) {\n    var _this = this;\n\n    try {\n      this.config = new HttpRequestConfigImpl(config);\n      this.options = this.config.buildRequestOptions();\n      this.entity = this.config.buildEntity(this.options.headers);\n      this.promise = new Promise(function (resolve, reject) {\n        _this.resolve = resolve;\n        _this.reject = reject;\n\n        _this.execute();\n      });\n    } catch (err) {\n      this.promise = Promise.reject(this.enhanceError(err, null));\n    }\n  }\n  /**\n   * Sends an HTTP request based on the provided configuration.\n   */\n\n\n  AsyncHttpCall.invoke = function (config) {\n    return new AsyncHttpCall(config).promise;\n  };\n\n  AsyncHttpCall.prototype.execute = function () {\n    var _this = this;\n\n    var transport = this.options.protocol === 'https:' ? https : http;\n    var req = transport.request(this.options, function (res) {\n      _this.handleResponse(res, req);\n    }); // Handle errors\n\n    req.on('error', function (err) {\n      if (req.aborted) {\n        return;\n      }\n\n      _this.enhanceAndReject(err, null, req);\n    });\n    var timeout = this.config.timeout;\n\n    if (timeout) {\n      // Listen to timeouts and throw an error.\n      req.setTimeout(timeout, function () {\n        req.abort();\n\n        _this.rejectWithError(\"timeout of \" + timeout + \"ms exceeded\", 'ETIMEDOUT', req);\n      });\n    } // Send the request\n\n\n    req.end(this.entity);\n  };\n\n  AsyncHttpCall.prototype.handleResponse = function (res, req) {\n    if (req.aborted) {\n      return;\n    }\n\n    if (!res.statusCode) {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected a statusCode on the response from a ClientRequest');\n    }\n\n    var response = {\n      status: res.statusCode,\n      headers: res.headers,\n      request: req,\n      data: undefined,\n      config: this.config\n    };\n    var boundary = this.getMultipartBoundary(res.headers);\n    var respStream = this.uncompressResponse(res);\n\n    if (boundary) {\n      this.handleMultipartResponse(response, respStream, boundary);\n    } else {\n      this.handleRegularResponse(response, respStream);\n    }\n  };\n  /**\n   * Extracts multipart boundary from the HTTP header. The content-type header of a multipart\n   * response has the form 'multipart/subtype; boundary=string'.\n   *\n   * If the content-type header does not exist, or does not start with\n   * 'multipart/', then null will be returned.\n   */\n\n\n  AsyncHttpCall.prototype.getMultipartBoundary = function (headers) {\n    var contentType = headers['content-type'];\n\n    if (!contentType || !contentType.startsWith('multipart/')) {\n      return null;\n    }\n\n    var segments = contentType.split(';');\n    var emptyObject = {};\n    var headerParams = segments.slice(1).map(function (segment) {\n      return segment.trim().split('=');\n    }).reduce(function (curr, params) {\n      // Parse key=value pairs in the content-type header into properties of an object.\n      if (params.length === 2) {\n        var keyValuePair = {};\n        keyValuePair[params[0]] = params[1];\n        return Object.assign(curr, keyValuePair);\n      }\n\n      return curr;\n    }, emptyObject);\n    return headerParams.boundary;\n  };\n\n  AsyncHttpCall.prototype.uncompressResponse = function (res) {\n    // Uncompress the response body transparently if required.\n    var respStream = res;\n    var encodings = ['gzip', 'compress', 'deflate'];\n\n    if (res.headers['content-encoding'] && encodings.indexOf(res.headers['content-encoding']) !== -1) {\n      // Add the unzipper to the body stream processing pipeline.\n      var zlib = require('zlib');\n\n      respStream = respStream.pipe(zlib.createUnzip()); // Remove the content-encoding in order to not confuse downstream operations.\n\n      delete res.headers['content-encoding'];\n    }\n\n    return respStream;\n  };\n\n  AsyncHttpCall.prototype.handleMultipartResponse = function (response, respStream, boundary) {\n    var _this = this;\n\n    var dicer = require('dicer');\n\n    var multipartParser = new dicer({\n      boundary: boundary\n    });\n    var responseBuffer = [];\n    multipartParser.on('part', function (part) {\n      var tempBuffers = [];\n      part.on('data', function (partData) {\n        tempBuffers.push(partData);\n      });\n      part.on('end', function () {\n        responseBuffer.push(Buffer.concat(tempBuffers));\n      });\n    });\n    multipartParser.on('finish', function () {\n      response.data = undefined;\n      response.multipart = responseBuffer;\n\n      _this.finalizeResponse(response);\n    });\n    respStream.pipe(multipartParser);\n  };\n\n  AsyncHttpCall.prototype.handleRegularResponse = function (response, respStream) {\n    var _this = this;\n\n    var responseBuffer = [];\n    respStream.on('data', function (chunk) {\n      responseBuffer.push(chunk);\n    });\n    respStream.on('error', function (err) {\n      var req = response.request;\n\n      if (req && req.aborted) {\n        return;\n      }\n\n      _this.enhanceAndReject(err, null, req);\n    });\n    respStream.on('end', function () {\n      response.data = Buffer.concat(responseBuffer).toString();\n\n      _this.finalizeResponse(response);\n    });\n  };\n  /**\n   * Finalizes the current HTTP call in-flight by either resolving or rejecting the associated\n   * promise. In the event of an error, adds additional useful information to the returned error.\n   */\n\n\n  AsyncHttpCall.prototype.finalizeResponse = function (response) {\n    if (response.status >= 200 && response.status < 300) {\n      this.resolve(response);\n    } else {\n      this.rejectWithError('Request failed with status code ' + response.status, null, response.request, response);\n    }\n  };\n  /**\n   * Creates a new error from the given message, and enhances it with other information available.\n   * Then the promise associated with this HTTP call is rejected with the resulting error.\n   */\n\n\n  AsyncHttpCall.prototype.rejectWithError = function (message, code, request, response) {\n    var error = new Error(message);\n    this.enhanceAndReject(error, code, request, response);\n  };\n\n  AsyncHttpCall.prototype.enhanceAndReject = function (error, code, request, response) {\n    this.reject(this.enhanceError(error, code, request, response));\n  };\n  /**\n   * Enhances the given error by adding more information to it. Specifically, the HttpRequestConfig,\n   * the underlying request and response will be attached to the error.\n   */\n\n\n  AsyncHttpCall.prototype.enhanceError = function (error, code, request, response) {\n    error.config = this.config;\n\n    if (code) {\n      error.code = code;\n    }\n\n    error.request = request;\n    error.response = response;\n    return error;\n  };\n\n  return AsyncHttpCall;\n}();\n/**\n * An adapter class for extracting options and entity data from an HttpRequestConfig.\n */\n\n\nvar HttpRequestConfigImpl =\n/** @class */\nfunction () {\n  function HttpRequestConfigImpl(config) {\n    this.config = config;\n  }\n\n  Object.defineProperty(HttpRequestConfigImpl.prototype, \"method\", {\n    get: function () {\n      return this.config.method;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpRequestConfigImpl.prototype, \"url\", {\n    get: function () {\n      return this.config.url;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpRequestConfigImpl.prototype, \"headers\", {\n    get: function () {\n      return this.config.headers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpRequestConfigImpl.prototype, \"data\", {\n    get: function () {\n      return this.config.data;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpRequestConfigImpl.prototype, \"timeout\", {\n    get: function () {\n      return this.config.timeout;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpRequestConfigImpl.prototype, \"httpAgent\", {\n    get: function () {\n      return this.config.httpAgent;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  HttpRequestConfigImpl.prototype.buildRequestOptions = function () {\n    var parsed = this.buildUrl();\n    var protocol = parsed.protocol;\n    var port = parsed.port;\n\n    if (!port) {\n      var isHttps = protocol === 'https:';\n      port = isHttps ? '443' : '80';\n    }\n\n    return {\n      protocol: protocol,\n      hostname: parsed.hostname,\n      port: port,\n      path: parsed.path,\n      method: this.method,\n      agent: this.httpAgent,\n      headers: Object.assign({}, this.headers)\n    };\n  };\n\n  HttpRequestConfigImpl.prototype.buildEntity = function (headers) {\n    var data;\n\n    if (!this.hasEntity() || !this.isEntityEnclosingRequest()) {\n      return data;\n    }\n\n    if (validator.isBuffer(this.data)) {\n      data = this.data;\n    } else if (validator.isObject(this.data)) {\n      data = Buffer.from(JSON.stringify(this.data), 'utf-8');\n\n      if (typeof headers['content-type'] === 'undefined') {\n        headers['content-type'] = 'application/json;charset=utf-8';\n      }\n    } else if (validator.isString(this.data)) {\n      data = Buffer.from(this.data, 'utf-8');\n    } else {\n      throw new Error('Request data must be a string, a Buffer or a json serializable object');\n    } // Add Content-Length header if data exists.\n\n\n    headers['Content-Length'] = data.length.toString();\n    return data;\n  };\n\n  HttpRequestConfigImpl.prototype.buildUrl = function () {\n    var fullUrl = this.urlWithProtocol();\n\n    if (!this.hasEntity() || this.isEntityEnclosingRequest()) {\n      return url.parse(fullUrl);\n    }\n\n    if (!validator.isObject(this.data)) {\n      throw new Error(this.method + \" requests cannot have a body\");\n    } // Parse URL and append data to query string.\n\n\n    var parsedUrl = new url.URL(fullUrl);\n    var dataObj = this.data;\n\n    for (var key in dataObj) {\n      if (dataObj.hasOwnProperty(key)) {\n        parsedUrl.searchParams.append(key, dataObj[key]);\n      }\n    }\n\n    return url.parse(parsedUrl.toString());\n  };\n\n  HttpRequestConfigImpl.prototype.urlWithProtocol = function () {\n    var fullUrl = this.url;\n\n    if (fullUrl.startsWith('http://') || fullUrl.startsWith('https://')) {\n      return fullUrl;\n    }\n\n    return \"https://\" + fullUrl;\n  };\n\n  HttpRequestConfigImpl.prototype.hasEntity = function () {\n    return !!this.data;\n  };\n\n  HttpRequestConfigImpl.prototype.isEntityEnclosingRequest = function () {\n    // GET and HEAD requests do not support entity (body) in request.\n    return this.method !== 'GET' && this.method !== 'HEAD';\n  };\n\n  return HttpRequestConfigImpl;\n}();\n\nvar AuthorizedHttpClient =\n/** @class */\nfunction (_super) {\n  __extends(AuthorizedHttpClient, _super);\n\n  function AuthorizedHttpClient(app) {\n    var _this = _super.call(this) || this;\n\n    _this.app = app;\n    return _this;\n  }\n\n  AuthorizedHttpClient.prototype.send = function (request) {\n    var _this = this;\n\n    return this.app.INTERNAL.getToken().then(function (accessTokenObj) {\n      var requestCopy = Object.assign({}, request);\n      requestCopy.headers = Object.assign({}, request.headers);\n      var authHeader = 'Authorization';\n      requestCopy.headers[authHeader] = \"Bearer \" + accessTokenObj.accessToken;\n\n      if (!requestCopy.httpAgent && _this.app.options.httpAgent) {\n        requestCopy.httpAgent = _this.app.options.httpAgent;\n      }\n\n      return _super.prototype.send.call(_this, requestCopy);\n    });\n  };\n\n  return AuthorizedHttpClient;\n}(HttpClient);\n\nexports.AuthorizedHttpClient = AuthorizedHttpClient;\n/**\n * Class that defines all the settings for the backend API endpoint.\n *\n * @param {string} endpoint The Firebase Auth backend endpoint.\n * @param {HttpMethod} httpMethod The http method for that endpoint.\n * @constructor\n */\n\nvar ApiSettings =\n/** @class */\nfunction () {\n  function ApiSettings(endpoint, httpMethod) {\n    if (httpMethod === void 0) {\n      httpMethod = 'POST';\n    }\n\n    this.endpoint = endpoint;\n    this.httpMethod = httpMethod;\n    this.setRequestValidator(null).setResponseValidator(null);\n  }\n  /** @return {string} The backend API endpoint. */\n\n\n  ApiSettings.prototype.getEndpoint = function () {\n    return this.endpoint;\n  };\n  /** @return {HttpMethod} The request HTTP method. */\n\n\n  ApiSettings.prototype.getHttpMethod = function () {\n    return this.httpMethod;\n  };\n  /**\n   * @param {ApiCallbackFunction} requestValidator The request validator.\n   * @return {ApiSettings} The current API settings instance.\n   */\n\n\n  ApiSettings.prototype.setRequestValidator = function (requestValidator) {\n    var nullFunction = function (_) {\n      return undefined;\n    };\n\n    this.requestValidator = requestValidator || nullFunction;\n    return this;\n  };\n  /** @return {ApiCallbackFunction} The request validator. */\n\n\n  ApiSettings.prototype.getRequestValidator = function () {\n    return this.requestValidator;\n  };\n  /**\n   * @param {ApiCallbackFunction} responseValidator The response validator.\n   * @return {ApiSettings} The current API settings instance.\n   */\n\n\n  ApiSettings.prototype.setResponseValidator = function (responseValidator) {\n    var nullFunction = function (_) {\n      return undefined;\n    };\n\n    this.responseValidator = responseValidator || nullFunction;\n    return this;\n  };\n  /** @return {ApiCallbackFunction} The response validator. */\n\n\n  ApiSettings.prototype.getResponseValidator = function () {\n    return this.responseValidator;\n  };\n\n  return ApiSettings;\n}();\n\nexports.ApiSettings = ApiSettings;\n/**\n * Class used for polling an endpoint with exponential backoff.\n *\n * Example usage:\n * ```\n * const poller = new ExponentialBackoffPoller();\n * poller\n *     .poll(() => {\n *       return myRequestToPoll()\n *           .then((responseData: any) => {\n *             if (!isValid(responseData)) {\n *               // Continue polling.\n *               return null;\n *             }\n *\n *             // Polling complete. Resolve promise with final response data.\n *             return responseData;\n *           });\n *     })\n *     .then((responseData: any) => {\n *       console.log(`Final response: ${responseData}`);\n *     });\n * ```\n */\n\nvar ExponentialBackoffPoller =\n/** @class */\nfunction (_super) {\n  __extends(ExponentialBackoffPoller, _super);\n\n  function ExponentialBackoffPoller(initialPollingDelayMillis, maxPollingDelayMillis, masterTimeoutMillis) {\n    if (initialPollingDelayMillis === void 0) {\n      initialPollingDelayMillis = 1000;\n    }\n\n    if (maxPollingDelayMillis === void 0) {\n      maxPollingDelayMillis = 10000;\n    }\n\n    if (masterTimeoutMillis === void 0) {\n      masterTimeoutMillis = 60000;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.initialPollingDelayMillis = initialPollingDelayMillis;\n    _this.maxPollingDelayMillis = maxPollingDelayMillis;\n    _this.masterTimeoutMillis = masterTimeoutMillis;\n    _this.numTries = 0;\n    _this.completed = false;\n    return _this;\n  }\n  /**\n   * Poll the provided callback with exponential backoff.\n   *\n   * @param {() => Promise<object>} callback The callback to be called for each poll. If the\n   *     callback resolves to a falsey value, polling will continue. Otherwise, the truthy\n   *     resolution will be used to resolve the promise returned by this method.\n   * @return {Promise<object>} A Promise which resolves to the truthy value returned by the provided\n   *     callback when polling is complete.\n   */\n\n\n  ExponentialBackoffPoller.prototype.poll = function (callback) {\n    var _this = this;\n\n    if (this.pollCallback) {\n      throw new Error('poll() can only be called once per instance of ExponentialBackoffPoller');\n    }\n\n    this.pollCallback = callback;\n    this.on('poll', this.repoll);\n    this.masterTimer = setTimeout(function () {\n      if (_this.completed) {\n        return;\n      }\n\n      _this.markCompleted();\n\n      _this.reject(new Error('ExponentialBackoffPoller deadline exceeded - Master timeout reached'));\n    }, this.masterTimeoutMillis);\n    return new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n\n      _this.repoll();\n    });\n  };\n\n  ExponentialBackoffPoller.prototype.repoll = function () {\n    var _this = this;\n\n    this.pollCallback().then(function (result) {\n      if (_this.completed) {\n        return;\n      }\n\n      if (!result) {\n        _this.repollTimer = setTimeout(function () {\n          return _this.emit('poll');\n        }, _this.getPollingDelayMillis());\n        _this.numTries++;\n        return;\n      }\n\n      _this.markCompleted();\n\n      _this.resolve(result);\n    }).catch(function (err) {\n      if (_this.completed) {\n        return;\n      }\n\n      _this.markCompleted();\n\n      _this.reject(err);\n    });\n  };\n\n  ExponentialBackoffPoller.prototype.getPollingDelayMillis = function () {\n    var increasedPollingDelay = Math.pow(2, this.numTries) * this.initialPollingDelayMillis;\n    return Math.min(increasedPollingDelay, this.maxPollingDelayMillis);\n  };\n\n  ExponentialBackoffPoller.prototype.markCompleted = function () {\n    this.completed = true;\n\n    if (this.masterTimer) {\n      clearTimeout(this.masterTimer);\n    }\n\n    if (this.repollTimer) {\n      clearTimeout(this.repollTimer);\n    }\n  };\n\n  return ExponentialBackoffPoller;\n}(events_1.EventEmitter);\n\nexports.ExponentialBackoffPoller = ExponentialBackoffPoller;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/firebase-admin/lib/utils/api-request.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","error_1","require","validator","http","https","url","events_1","DefaultHttpResponse","resp","status","headers","text","data","FirebaseAppError","AppErrorCodes","INTERNAL_ERROR","parsedData","JSON","parse","err","undefined","parseError","request","config","method","get","isJson","UNABLE_TO_PARSE_RESPONSE","toString","enumerable","configurable","MultipartHttpResponse","multipart","HttpError","_super","response","_this","call","Error","defaultRetryConfig","maxRetries","statusCodes","ioErrorCodes","backOffFactor","maxDelayInMillis","validateRetryConfig","retry","isNumber","INVALID_ARGUMENT","isArray","HttpClient","send","sendWithRetry","retryAttempts","AsyncHttpCall","invoke","then","createHttpResponse","catch","_a","getRetryDelayMillis","delayMillis","canRetry","waitForRetry","code","NETWORK_TIMEOUT","message","NETWORK_ERROR","Promise","resolve","setTimeout","isRetryEligible","parseRetryAfterIntoMillis","backOffDelayMillis","indexOf","retryCodes","retryAfter","delaySeconds","parseInt","isNaN","date","Date","getTime","now","delayInSeconds","Math","pow","min","parseHttpResponse","responseText","isBuffer","endOfHeaderPos","headerLines","substring","split","statusLine","trim","slice","forEach","line","colonPos","name","toLowerCase","endsWith","lowLevelResponse","HttpRequestConfigImpl","options","buildRequestOptions","entity","buildEntity","promise","reject","execute","enhanceError","transport","protocol","req","res","handleResponse","on","aborted","enhanceAndReject","timeout","abort","rejectWithError","end","statusCode","boundary","getMultipartBoundary","respStream","uncompressResponse","handleMultipartResponse","handleRegularResponse","contentType","startsWith","segments","emptyObject","headerParams","map","segment","reduce","curr","params","length","keyValuePair","assign","encodings","zlib","pipe","createUnzip","dicer","multipartParser","responseBuffer","part","tempBuffers","partData","push","Buffer","concat","finalizeResponse","chunk","error","httpAgent","parsed","buildUrl","port","isHttps","hostname","path","agent","hasEntity","isEntityEnclosingRequest","isObject","from","stringify","isString","fullUrl","urlWithProtocol","parsedUrl","URL","dataObj","key","searchParams","append","AuthorizedHttpClient","app","INTERNAL","getToken","accessTokenObj","requestCopy","authHeader","accessToken","ApiSettings","endpoint","httpMethod","setRequestValidator","setResponseValidator","getEndpoint","getHttpMethod","requestValidator","nullFunction","_","getRequestValidator","responseValidator","getResponseValidator","ExponentialBackoffPoller","initialPollingDelayMillis","maxPollingDelayMillis","masterTimeoutMillis","numTries","completed","poll","callback","pollCallback","repoll","masterTimer","markCompleted","result","repollTimer","emit","getPollingDelayMillis","increasedPollingDelay","clearTimeout","EventEmitter"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar error_1 = require(\"./error\");\nvar validator = require(\"./validator\");\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar url = require(\"url\");\nvar events_1 = require(\"events\");\nvar DefaultHttpResponse = /** @class */ (function () {\n    /**\n     * Constructs a new HttpResponse from the given LowLevelResponse.\n     */\n    function DefaultHttpResponse(resp) {\n        this.status = resp.status;\n        this.headers = resp.headers;\n        this.text = resp.data;\n        try {\n            if (!resp.data) {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'HTTP response missing data.');\n            }\n            this.parsedData = JSON.parse(resp.data);\n        }\n        catch (err) {\n            this.parsedData = undefined;\n            this.parseError = err;\n        }\n        this.request = resp.config.method + \" \" + resp.config.url;\n    }\n    Object.defineProperty(DefaultHttpResponse.prototype, \"data\", {\n        get: function () {\n            if (this.isJson()) {\n                return this.parsedData;\n            }\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, \"Error while parsing response data: \\\"\" + this.parseError.toString() + \"\\\". Raw server \" +\n                (\"response: \\\"\" + this.text + \"\\\". Status code: \\\"\" + this.status + \"\\\". Outgoing \") +\n                (\"request: \\\"\" + this.request + \".\\\"\"));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DefaultHttpResponse.prototype.isJson = function () {\n        return typeof this.parsedData !== 'undefined';\n    };\n    return DefaultHttpResponse;\n}());\n/**\n * Represents a multipart HTTP response. Parts that constitute the response body can be accessed\n * via the multipart getter. Getters for text and data throw errors.\n */\nvar MultipartHttpResponse = /** @class */ (function () {\n    function MultipartHttpResponse(resp) {\n        this.status = resp.status;\n        this.headers = resp.headers;\n        this.multipart = resp.multipart;\n    }\n    Object.defineProperty(MultipartHttpResponse.prototype, \"text\", {\n        get: function () {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, 'Unable to parse multipart payload as text');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultipartHttpResponse.prototype, \"data\", {\n        get: function () {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, 'Unable to parse multipart payload as JSON');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MultipartHttpResponse.prototype.isJson = function () {\n        return false;\n    };\n    return MultipartHttpResponse;\n}());\nvar HttpError = /** @class */ (function (_super) {\n    __extends(HttpError, _super);\n    function HttpError(response) {\n        var _this = _super.call(this, \"Server responded with status \" + response.status + \".\") || this;\n        _this.response = response;\n        // Set the prototype so that instanceof checks will work correctly.\n        // See: https://github.com/Microsoft/TypeScript/issues/13965\n        Object.setPrototypeOf(_this, HttpError.prototype);\n        return _this;\n    }\n    return HttpError;\n}(Error));\nexports.HttpError = HttpError;\n/**\n * Default retry configuration for HTTP requests. Retries up to 4 times on connection reset and timeout errors\n * as well as HTTP 503 errors. Exposed as a function to ensure that every HttpClient gets its own RetryConfig\n * instance.\n */\nfunction defaultRetryConfig() {\n    return {\n        maxRetries: 4,\n        statusCodes: [503],\n        ioErrorCodes: ['ECONNRESET', 'ETIMEDOUT'],\n        backOffFactor: 0.5,\n        maxDelayInMillis: 60 * 1000,\n    };\n}\nexports.defaultRetryConfig = defaultRetryConfig;\n/**\n * Ensures that the given RetryConfig object is valid.\n *\n * @param retry The configuration to be validated.\n */\nfunction validateRetryConfig(retry) {\n    if (!validator.isNumber(retry.maxRetries) || retry.maxRetries < 0) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'maxRetries must be a non-negative integer');\n    }\n    if (typeof retry.backOffFactor !== 'undefined') {\n        if (!validator.isNumber(retry.backOffFactor) || retry.backOffFactor < 0) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'backOffFactor must be a non-negative number');\n        }\n    }\n    if (!validator.isNumber(retry.maxDelayInMillis) || retry.maxDelayInMillis < 0) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'maxDelayInMillis must be a non-negative integer');\n    }\n    if (typeof retry.statusCodes !== 'undefined' && !validator.isArray(retry.statusCodes)) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'statusCodes must be an array');\n    }\n    if (typeof retry.ioErrorCodes !== 'undefined' && !validator.isArray(retry.ioErrorCodes)) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'ioErrorCodes must be an array');\n    }\n}\nvar HttpClient = /** @class */ (function () {\n    function HttpClient(retry) {\n        if (retry === void 0) { retry = defaultRetryConfig(); }\n        this.retry = retry;\n        if (this.retry) {\n            validateRetryConfig(this.retry);\n        }\n    }\n    /**\n     * Sends an HTTP request to a remote server. If the server responds with a successful response (2xx), the returned\n     * promise resolves with an HttpResponse. If the server responds with an error (3xx, 4xx, 5xx), the promise rejects\n     * with an HttpError. In case of all other errors, the promise rejects with a FirebaseAppError. If a request fails\n     * due to a low-level network error, transparently retries the request once before rejecting the promise.\n     *\n     * If the request data is specified as an object, it will be serialized into a JSON string. The application/json\n     * content-type header will also be automatically set in this case. For all other payload types, the content-type\n     * header should be explicitly set by the caller. To send a JSON leaf value (e.g. \"foo\", 5), parse it into JSON,\n     * and pass as a string or a Buffer along with the appropriate content-type header.\n     *\n     * @param {HttpRequest} config HTTP request to be sent.\n     * @return {Promise<HttpResponse>} A promise that resolves with the response details.\n     */\n    HttpClient.prototype.send = function (config) {\n        return this.sendWithRetry(config);\n    };\n    /**\n     * Sends an HTTP request. In the event of an error, retries the HTTP request according to the\n     * RetryConfig set on the HttpClient.\n     *\n     * @param {HttpRequestConfig} config HTTP request to be sent.\n     * @param {number} retryAttempts Number of retries performed up to now.\n     * @return {Promise<HttpResponse>} A promise that resolves with the response details.\n     */\n    HttpClient.prototype.sendWithRetry = function (config, retryAttempts) {\n        var _this = this;\n        if (retryAttempts === void 0) { retryAttempts = 0; }\n        return AsyncHttpCall.invoke(config)\n            .then(function (resp) {\n            return _this.createHttpResponse(resp);\n        })\n            .catch(function (err) {\n            var _a = _this.getRetryDelayMillis(retryAttempts, err), delayMillis = _a[0], canRetry = _a[1];\n            if (canRetry && _this.retry && delayMillis <= _this.retry.maxDelayInMillis) {\n                return _this.waitForRetry(delayMillis).then(function () {\n                    return _this.sendWithRetry(config, retryAttempts + 1);\n                });\n            }\n            if (err.response) {\n                throw new HttpError(_this.createHttpResponse(err.response));\n            }\n            if (err.code === 'ETIMEDOUT') {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_TIMEOUT, \"Error while making request: \" + err.message + \".\");\n            }\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_ERROR, \"Error while making request: \" + err.message + \". Error code: \" + err.code);\n        });\n    };\n    HttpClient.prototype.createHttpResponse = function (resp) {\n        if (resp.multipart) {\n            return new MultipartHttpResponse(resp);\n        }\n        return new DefaultHttpResponse(resp);\n    };\n    HttpClient.prototype.waitForRetry = function (delayMillis) {\n        if (delayMillis > 0) {\n            return new Promise(function (resolve) {\n                setTimeout(resolve, delayMillis);\n            });\n        }\n        return Promise.resolve();\n    };\n    /**\n     * Checks if a failed request is eligible for a retry, and if so returns the duration to wait before initiating\n     * the retry.\n     *\n     * @param {number} retryAttempts Number of retries completed up to now.\n     * @param {LowLevelError} err The last encountered error.\n     * @returns {[number, boolean]} A 2-tuple where the 1st element is the duration to wait before another retry, and the\n     *     2nd element is a boolean indicating whether the request is eligible for a retry or not.\n     */\n    HttpClient.prototype.getRetryDelayMillis = function (retryAttempts, err) {\n        if (!this.isRetryEligible(retryAttempts, err)) {\n            return [0, false];\n        }\n        var response = err.response;\n        if (response && response.headers['retry-after']) {\n            var delayMillis = this.parseRetryAfterIntoMillis(response.headers['retry-after']);\n            if (delayMillis > 0) {\n                return [delayMillis, true];\n            }\n        }\n        return [this.backOffDelayMillis(retryAttempts), true];\n    };\n    HttpClient.prototype.isRetryEligible = function (retryAttempts, err) {\n        if (!this.retry) {\n            return false;\n        }\n        if (retryAttempts >= this.retry.maxRetries) {\n            return false;\n        }\n        if (err.response) {\n            var statusCodes = this.retry.statusCodes || [];\n            return statusCodes.indexOf(err.response.status) !== -1;\n        }\n        if (err.code) {\n            var retryCodes = this.retry.ioErrorCodes || [];\n            return retryCodes.indexOf(err.code) !== -1;\n        }\n        return false;\n    };\n    /**\n     * Parses the Retry-After HTTP header as a milliseconds value. Return value is negative if the Retry-After header\n     * contains an expired timestamp or otherwise malformed.\n     */\n    HttpClient.prototype.parseRetryAfterIntoMillis = function (retryAfter) {\n        var delaySeconds = parseInt(retryAfter, 10);\n        if (!isNaN(delaySeconds)) {\n            return delaySeconds * 1000;\n        }\n        var date = new Date(retryAfter);\n        if (!isNaN(date.getTime())) {\n            return date.getTime() - Date.now();\n        }\n        return -1;\n    };\n    HttpClient.prototype.backOffDelayMillis = function (retryAttempts) {\n        if (retryAttempts === 0) {\n            return 0;\n        }\n        if (!this.retry) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected this.retry to exist.');\n        }\n        var backOffFactor = this.retry.backOffFactor || 0;\n        var delayInSeconds = (Math.pow(2, retryAttempts)) * backOffFactor;\n        return Math.min(delayInSeconds * 1000, this.retry.maxDelayInMillis);\n    };\n    return HttpClient;\n}());\nexports.HttpClient = HttpClient;\n/**\n * Parses a full HTTP response message containing both a header and a body.\n *\n * @param {string|Buffer} response The HTTP response to be parsed.\n * @param {HttpRequestConfig} config The request configuration that resulted in the HTTP response.\n * @return {HttpResponse} An object containing the parsed HTTP status, headers and the body.\n */\nfunction parseHttpResponse(response, config) {\n    var responseText = validator.isBuffer(response) ?\n        response.toString('utf-8') : response;\n    var endOfHeaderPos = responseText.indexOf('\\r\\n\\r\\n');\n    var headerLines = responseText.substring(0, endOfHeaderPos).split('\\r\\n');\n    var statusLine = headerLines[0];\n    var status = statusLine.trim().split(/\\s/)[1];\n    var headers = {};\n    headerLines.slice(1).forEach(function (line) {\n        var colonPos = line.indexOf(':');\n        var name = line.substring(0, colonPos).trim().toLowerCase();\n        var value = line.substring(colonPos + 1).trim();\n        headers[name] = value;\n    });\n    var data = responseText.substring(endOfHeaderPos + 4);\n    if (data.endsWith('\\n')) {\n        data = data.slice(0, -1);\n    }\n    if (data.endsWith('\\r')) {\n        data = data.slice(0, -1);\n    }\n    var lowLevelResponse = {\n        status: parseInt(status, 10),\n        headers: headers,\n        data: data,\n        config: config,\n        request: null,\n    };\n    if (!validator.isNumber(lowLevelResponse.status)) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Malformed HTTP status line.');\n    }\n    return new DefaultHttpResponse(lowLevelResponse);\n}\nexports.parseHttpResponse = parseHttpResponse;\n/**\n * A helper class for sending HTTP requests over the wire. This is a wrapper around the standard\n * http and https packages of Node.js, providing content processing, timeouts and error handling.\n * It also wraps the callback API of the Node.js standard library in a more flexible Promise API.\n */\nvar AsyncHttpCall = /** @class */ (function () {\n    function AsyncHttpCall(config) {\n        var _this = this;\n        try {\n            this.config = new HttpRequestConfigImpl(config);\n            this.options = this.config.buildRequestOptions();\n            this.entity = this.config.buildEntity(this.options.headers);\n            this.promise = new Promise(function (resolve, reject) {\n                _this.resolve = resolve;\n                _this.reject = reject;\n                _this.execute();\n            });\n        }\n        catch (err) {\n            this.promise = Promise.reject(this.enhanceError(err, null));\n        }\n    }\n    /**\n     * Sends an HTTP request based on the provided configuration.\n     */\n    AsyncHttpCall.invoke = function (config) {\n        return new AsyncHttpCall(config).promise;\n    };\n    AsyncHttpCall.prototype.execute = function () {\n        var _this = this;\n        var transport = this.options.protocol === 'https:' ? https : http;\n        var req = transport.request(this.options, function (res) {\n            _this.handleResponse(res, req);\n        });\n        // Handle errors\n        req.on('error', function (err) {\n            if (req.aborted) {\n                return;\n            }\n            _this.enhanceAndReject(err, null, req);\n        });\n        var timeout = this.config.timeout;\n        if (timeout) {\n            // Listen to timeouts and throw an error.\n            req.setTimeout(timeout, function () {\n                req.abort();\n                _this.rejectWithError(\"timeout of \" + timeout + \"ms exceeded\", 'ETIMEDOUT', req);\n            });\n        }\n        // Send the request\n        req.end(this.entity);\n    };\n    AsyncHttpCall.prototype.handleResponse = function (res, req) {\n        if (req.aborted) {\n            return;\n        }\n        if (!res.statusCode) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected a statusCode on the response from a ClientRequest');\n        }\n        var response = {\n            status: res.statusCode,\n            headers: res.headers,\n            request: req,\n            data: undefined,\n            config: this.config,\n        };\n        var boundary = this.getMultipartBoundary(res.headers);\n        var respStream = this.uncompressResponse(res);\n        if (boundary) {\n            this.handleMultipartResponse(response, respStream, boundary);\n        }\n        else {\n            this.handleRegularResponse(response, respStream);\n        }\n    };\n    /**\n     * Extracts multipart boundary from the HTTP header. The content-type header of a multipart\n     * response has the form 'multipart/subtype; boundary=string'.\n     *\n     * If the content-type header does not exist, or does not start with\n     * 'multipart/', then null will be returned.\n     */\n    AsyncHttpCall.prototype.getMultipartBoundary = function (headers) {\n        var contentType = headers['content-type'];\n        if (!contentType || !contentType.startsWith('multipart/')) {\n            return null;\n        }\n        var segments = contentType.split(';');\n        var emptyObject = {};\n        var headerParams = segments.slice(1)\n            .map(function (segment) { return segment.trim().split('='); })\n            .reduce(function (curr, params) {\n            // Parse key=value pairs in the content-type header into properties of an object.\n            if (params.length === 2) {\n                var keyValuePair = {};\n                keyValuePair[params[0]] = params[1];\n                return Object.assign(curr, keyValuePair);\n            }\n            return curr;\n        }, emptyObject);\n        return headerParams.boundary;\n    };\n    AsyncHttpCall.prototype.uncompressResponse = function (res) {\n        // Uncompress the response body transparently if required.\n        var respStream = res;\n        var encodings = ['gzip', 'compress', 'deflate'];\n        if (res.headers['content-encoding'] && encodings.indexOf(res.headers['content-encoding']) !== -1) {\n            // Add the unzipper to the body stream processing pipeline.\n            var zlib = require('zlib');\n            respStream = respStream.pipe(zlib.createUnzip());\n            // Remove the content-encoding in order to not confuse downstream operations.\n            delete res.headers['content-encoding'];\n        }\n        return respStream;\n    };\n    AsyncHttpCall.prototype.handleMultipartResponse = function (response, respStream, boundary) {\n        var _this = this;\n        var dicer = require('dicer');\n        var multipartParser = new dicer({ boundary: boundary });\n        var responseBuffer = [];\n        multipartParser.on('part', function (part) {\n            var tempBuffers = [];\n            part.on('data', function (partData) {\n                tempBuffers.push(partData);\n            });\n            part.on('end', function () {\n                responseBuffer.push(Buffer.concat(tempBuffers));\n            });\n        });\n        multipartParser.on('finish', function () {\n            response.data = undefined;\n            response.multipart = responseBuffer;\n            _this.finalizeResponse(response);\n        });\n        respStream.pipe(multipartParser);\n    };\n    AsyncHttpCall.prototype.handleRegularResponse = function (response, respStream) {\n        var _this = this;\n        var responseBuffer = [];\n        respStream.on('data', function (chunk) {\n            responseBuffer.push(chunk);\n        });\n        respStream.on('error', function (err) {\n            var req = response.request;\n            if (req && req.aborted) {\n                return;\n            }\n            _this.enhanceAndReject(err, null, req);\n        });\n        respStream.on('end', function () {\n            response.data = Buffer.concat(responseBuffer).toString();\n            _this.finalizeResponse(response);\n        });\n    };\n    /**\n     * Finalizes the current HTTP call in-flight by either resolving or rejecting the associated\n     * promise. In the event of an error, adds additional useful information to the returned error.\n     */\n    AsyncHttpCall.prototype.finalizeResponse = function (response) {\n        if (response.status >= 200 && response.status < 300) {\n            this.resolve(response);\n        }\n        else {\n            this.rejectWithError('Request failed with status code ' + response.status, null, response.request, response);\n        }\n    };\n    /**\n     * Creates a new error from the given message, and enhances it with other information available.\n     * Then the promise associated with this HTTP call is rejected with the resulting error.\n     */\n    AsyncHttpCall.prototype.rejectWithError = function (message, code, request, response) {\n        var error = new Error(message);\n        this.enhanceAndReject(error, code, request, response);\n    };\n    AsyncHttpCall.prototype.enhanceAndReject = function (error, code, request, response) {\n        this.reject(this.enhanceError(error, code, request, response));\n    };\n    /**\n     * Enhances the given error by adding more information to it. Specifically, the HttpRequestConfig,\n     * the underlying request and response will be attached to the error.\n     */\n    AsyncHttpCall.prototype.enhanceError = function (error, code, request, response) {\n        error.config = this.config;\n        if (code) {\n            error.code = code;\n        }\n        error.request = request;\n        error.response = response;\n        return error;\n    };\n    return AsyncHttpCall;\n}());\n/**\n * An adapter class for extracting options and entity data from an HttpRequestConfig.\n */\nvar HttpRequestConfigImpl = /** @class */ (function () {\n    function HttpRequestConfigImpl(config) {\n        this.config = config;\n    }\n    Object.defineProperty(HttpRequestConfigImpl.prototype, \"method\", {\n        get: function () {\n            return this.config.method;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HttpRequestConfigImpl.prototype, \"url\", {\n        get: function () {\n            return this.config.url;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HttpRequestConfigImpl.prototype, \"headers\", {\n        get: function () {\n            return this.config.headers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HttpRequestConfigImpl.prototype, \"data\", {\n        get: function () {\n            return this.config.data;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HttpRequestConfigImpl.prototype, \"timeout\", {\n        get: function () {\n            return this.config.timeout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HttpRequestConfigImpl.prototype, \"httpAgent\", {\n        get: function () {\n            return this.config.httpAgent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HttpRequestConfigImpl.prototype.buildRequestOptions = function () {\n        var parsed = this.buildUrl();\n        var protocol = parsed.protocol;\n        var port = parsed.port;\n        if (!port) {\n            var isHttps = protocol === 'https:';\n            port = isHttps ? '443' : '80';\n        }\n        return {\n            protocol: protocol,\n            hostname: parsed.hostname,\n            port: port,\n            path: parsed.path,\n            method: this.method,\n            agent: this.httpAgent,\n            headers: Object.assign({}, this.headers),\n        };\n    };\n    HttpRequestConfigImpl.prototype.buildEntity = function (headers) {\n        var data;\n        if (!this.hasEntity() || !this.isEntityEnclosingRequest()) {\n            return data;\n        }\n        if (validator.isBuffer(this.data)) {\n            data = this.data;\n        }\n        else if (validator.isObject(this.data)) {\n            data = Buffer.from(JSON.stringify(this.data), 'utf-8');\n            if (typeof headers['content-type'] === 'undefined') {\n                headers['content-type'] = 'application/json;charset=utf-8';\n            }\n        }\n        else if (validator.isString(this.data)) {\n            data = Buffer.from(this.data, 'utf-8');\n        }\n        else {\n            throw new Error('Request data must be a string, a Buffer or a json serializable object');\n        }\n        // Add Content-Length header if data exists.\n        headers['Content-Length'] = data.length.toString();\n        return data;\n    };\n    HttpRequestConfigImpl.prototype.buildUrl = function () {\n        var fullUrl = this.urlWithProtocol();\n        if (!this.hasEntity() || this.isEntityEnclosingRequest()) {\n            return url.parse(fullUrl);\n        }\n        if (!validator.isObject(this.data)) {\n            throw new Error(this.method + \" requests cannot have a body\");\n        }\n        // Parse URL and append data to query string.\n        var parsedUrl = new url.URL(fullUrl);\n        var dataObj = this.data;\n        for (var key in dataObj) {\n            if (dataObj.hasOwnProperty(key)) {\n                parsedUrl.searchParams.append(key, dataObj[key]);\n            }\n        }\n        return url.parse(parsedUrl.toString());\n    };\n    HttpRequestConfigImpl.prototype.urlWithProtocol = function () {\n        var fullUrl = this.url;\n        if (fullUrl.startsWith('http://') || fullUrl.startsWith('https://')) {\n            return fullUrl;\n        }\n        return \"https://\" + fullUrl;\n    };\n    HttpRequestConfigImpl.prototype.hasEntity = function () {\n        return !!this.data;\n    };\n    HttpRequestConfigImpl.prototype.isEntityEnclosingRequest = function () {\n        // GET and HEAD requests do not support entity (body) in request.\n        return this.method !== 'GET' && this.method !== 'HEAD';\n    };\n    return HttpRequestConfigImpl;\n}());\nvar AuthorizedHttpClient = /** @class */ (function (_super) {\n    __extends(AuthorizedHttpClient, _super);\n    function AuthorizedHttpClient(app) {\n        var _this = _super.call(this) || this;\n        _this.app = app;\n        return _this;\n    }\n    AuthorizedHttpClient.prototype.send = function (request) {\n        var _this = this;\n        return this.app.INTERNAL.getToken().then(function (accessTokenObj) {\n            var requestCopy = Object.assign({}, request);\n            requestCopy.headers = Object.assign({}, request.headers);\n            var authHeader = 'Authorization';\n            requestCopy.headers[authHeader] = \"Bearer \" + accessTokenObj.accessToken;\n            if (!requestCopy.httpAgent && _this.app.options.httpAgent) {\n                requestCopy.httpAgent = _this.app.options.httpAgent;\n            }\n            return _super.prototype.send.call(_this, requestCopy);\n        });\n    };\n    return AuthorizedHttpClient;\n}(HttpClient));\nexports.AuthorizedHttpClient = AuthorizedHttpClient;\n/**\n * Class that defines all the settings for the backend API endpoint.\n *\n * @param {string} endpoint The Firebase Auth backend endpoint.\n * @param {HttpMethod} httpMethod The http method for that endpoint.\n * @constructor\n */\nvar ApiSettings = /** @class */ (function () {\n    function ApiSettings(endpoint, httpMethod) {\n        if (httpMethod === void 0) { httpMethod = 'POST'; }\n        this.endpoint = endpoint;\n        this.httpMethod = httpMethod;\n        this.setRequestValidator(null)\n            .setResponseValidator(null);\n    }\n    /** @return {string} The backend API endpoint. */\n    ApiSettings.prototype.getEndpoint = function () {\n        return this.endpoint;\n    };\n    /** @return {HttpMethod} The request HTTP method. */\n    ApiSettings.prototype.getHttpMethod = function () {\n        return this.httpMethod;\n    };\n    /**\n     * @param {ApiCallbackFunction} requestValidator The request validator.\n     * @return {ApiSettings} The current API settings instance.\n     */\n    ApiSettings.prototype.setRequestValidator = function (requestValidator) {\n        var nullFunction = function (_) { return undefined; };\n        this.requestValidator = requestValidator || nullFunction;\n        return this;\n    };\n    /** @return {ApiCallbackFunction} The request validator. */\n    ApiSettings.prototype.getRequestValidator = function () {\n        return this.requestValidator;\n    };\n    /**\n     * @param {ApiCallbackFunction} responseValidator The response validator.\n     * @return {ApiSettings} The current API settings instance.\n     */\n    ApiSettings.prototype.setResponseValidator = function (responseValidator) {\n        var nullFunction = function (_) { return undefined; };\n        this.responseValidator = responseValidator || nullFunction;\n        return this;\n    };\n    /** @return {ApiCallbackFunction} The response validator. */\n    ApiSettings.prototype.getResponseValidator = function () {\n        return this.responseValidator;\n    };\n    return ApiSettings;\n}());\nexports.ApiSettings = ApiSettings;\n/**\n * Class used for polling an endpoint with exponential backoff.\n *\n * Example usage:\n * ```\n * const poller = new ExponentialBackoffPoller();\n * poller\n *     .poll(() => {\n *       return myRequestToPoll()\n *           .then((responseData: any) => {\n *             if (!isValid(responseData)) {\n *               // Continue polling.\n *               return null;\n *             }\n *\n *             // Polling complete. Resolve promise with final response data.\n *             return responseData;\n *           });\n *     })\n *     .then((responseData: any) => {\n *       console.log(`Final response: ${responseData}`);\n *     });\n * ```\n */\nvar ExponentialBackoffPoller = /** @class */ (function (_super) {\n    __extends(ExponentialBackoffPoller, _super);\n    function ExponentialBackoffPoller(initialPollingDelayMillis, maxPollingDelayMillis, masterTimeoutMillis) {\n        if (initialPollingDelayMillis === void 0) { initialPollingDelayMillis = 1000; }\n        if (maxPollingDelayMillis === void 0) { maxPollingDelayMillis = 10000; }\n        if (masterTimeoutMillis === void 0) { masterTimeoutMillis = 60000; }\n        var _this = _super.call(this) || this;\n        _this.initialPollingDelayMillis = initialPollingDelayMillis;\n        _this.maxPollingDelayMillis = maxPollingDelayMillis;\n        _this.masterTimeoutMillis = masterTimeoutMillis;\n        _this.numTries = 0;\n        _this.completed = false;\n        return _this;\n    }\n    /**\n     * Poll the provided callback with exponential backoff.\n     *\n     * @param {() => Promise<object>} callback The callback to be called for each poll. If the\n     *     callback resolves to a falsey value, polling will continue. Otherwise, the truthy\n     *     resolution will be used to resolve the promise returned by this method.\n     * @return {Promise<object>} A Promise which resolves to the truthy value returned by the provided\n     *     callback when polling is complete.\n     */\n    ExponentialBackoffPoller.prototype.poll = function (callback) {\n        var _this = this;\n        if (this.pollCallback) {\n            throw new Error('poll() can only be called once per instance of ExponentialBackoffPoller');\n        }\n        this.pollCallback = callback;\n        this.on('poll', this.repoll);\n        this.masterTimer = setTimeout(function () {\n            if (_this.completed) {\n                return;\n            }\n            _this.markCompleted();\n            _this.reject(new Error('ExponentialBackoffPoller deadline exceeded - Master timeout reached'));\n        }, this.masterTimeoutMillis);\n        return new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n            _this.repoll();\n        });\n    };\n    ExponentialBackoffPoller.prototype.repoll = function () {\n        var _this = this;\n        this.pollCallback()\n            .then(function (result) {\n            if (_this.completed) {\n                return;\n            }\n            if (!result) {\n                _this.repollTimer =\n                    setTimeout(function () { return _this.emit('poll'); }, _this.getPollingDelayMillis());\n                _this.numTries++;\n                return;\n            }\n            _this.markCompleted();\n            _this.resolve(result);\n        })\n            .catch(function (err) {\n            if (_this.completed) {\n                return;\n            }\n            _this.markCompleted();\n            _this.reject(err);\n        });\n    };\n    ExponentialBackoffPoller.prototype.getPollingDelayMillis = function () {\n        var increasedPollingDelay = Math.pow(2, this.numTries) * this.initialPollingDelayMillis;\n        return Math.min(increasedPollingDelay, this.maxPollingDelayMillis);\n    };\n    ExponentialBackoffPoller.prototype.markCompleted = function () {\n        this.completed = true;\n        if (this.masterTimer) {\n            clearTimeout(this.masterTimer);\n        }\n        if (this.repollTimer) {\n            clearTimeout(this.repollTimer);\n        }\n    };\n    return ExponentialBackoffPoller;\n}(events_1.EventEmitter));\nexports.ExponentialBackoffPoller = ExponentialBackoffPoller;\n"]},"metadata":{},"sourceType":"script"}