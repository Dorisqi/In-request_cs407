{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tls_1 = require(\"tls\");\n\nconst call_credentials_1 = require(\"./call-credentials\");\n\nconst tls_helpers_1 = require(\"./tls-helpers\"); // tslint:disable-next-line:no-any\n\n\nfunction verifyIsBufferOrNull(obj, friendlyName) {\n  if (obj && !(obj instanceof Buffer)) {\n    throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);\n  }\n}\n\nfunction bufferOrNullEqual(buf1, buf2) {\n  if (buf1 === null && buf2 === null) {\n    return true;\n  } else {\n    return buf1 !== null && buf2 !== null && buf1.equals(buf2);\n  }\n}\n/**\n * A class that contains credentials for communicating over a channel, as well\n * as a set of per-call credentials, which are applied to every method call made\n * over a channel initialized with an instance of this class.\n */\n\n\nclass ChannelCredentials {\n  constructor(callCredentials) {\n    this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();\n  }\n  /**\n   * Gets the set of per-call credentials associated with this instance.\n   */\n\n\n  _getCallCredentials() {\n    return this.callCredentials;\n  }\n  /**\n   * Return a new ChannelCredentials instance with a given set of credentials.\n   * The resulting instance can be used to construct a Channel that communicates\n   * over TLS.\n   * @param rootCerts The root certificate data.\n   * @param privateKey The client certificate private key, if available.\n   * @param certChain The client certificate key chain, if available.\n   */\n\n\n  static createSsl(rootCerts, privateKey, certChain, verifyOptions) {\n    verifyIsBufferOrNull(rootCerts, 'Root certificate');\n    verifyIsBufferOrNull(privateKey, 'Private key');\n    verifyIsBufferOrNull(certChain, 'Certificate chain');\n\n    if (privateKey && !certChain) {\n      throw new Error('Private key must be given with accompanying certificate chain');\n    }\n\n    if (!privateKey && certChain) {\n      throw new Error('Certificate chain must be given with accompanying private key');\n    }\n\n    return new SecureChannelCredentialsImpl(rootCerts || tls_helpers_1.getDefaultRootsData(), privateKey || null, certChain || null, verifyOptions || {});\n  }\n  /**\n   * Return a new ChannelCredentials instance with no credentials.\n   */\n\n\n  static createInsecure() {\n    return new InsecureChannelCredentialsImpl();\n  }\n\n}\n\nexports.ChannelCredentials = ChannelCredentials;\n\nclass InsecureChannelCredentialsImpl extends ChannelCredentials {\n  constructor(callCredentials) {\n    super(callCredentials);\n  }\n\n  compose(callCredentials) {\n    throw new Error('Cannot compose insecure credentials');\n  }\n\n  _getConnectionOptions() {\n    return null;\n  }\n\n  _isSecure() {\n    return false;\n  }\n\n  _equals(other) {\n    return other instanceof InsecureChannelCredentialsImpl;\n  }\n\n}\n\nclass SecureChannelCredentialsImpl extends ChannelCredentials {\n  constructor(rootCerts, privateKey, certChain, verifyOptions) {\n    super();\n    this.rootCerts = rootCerts;\n    this.privateKey = privateKey;\n    this.certChain = certChain;\n    this.verifyOptions = verifyOptions;\n    const secureContext = tls_1.createSecureContext({\n      ca: rootCerts || undefined,\n      key: privateKey || undefined,\n      cert: certChain || undefined,\n      ciphers: tls_helpers_1.CIPHER_SUITES\n    });\n    this.connectionOptions = {\n      secureContext\n    };\n\n    if (verifyOptions && verifyOptions.checkServerIdentity) {\n      this.connectionOptions.checkServerIdentity = (host, cert) => {\n        return verifyOptions.checkServerIdentity(host, {\n          raw: cert.raw\n        });\n      };\n    }\n  }\n\n  compose(callCredentials) {\n    const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n    return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);\n  }\n\n  _getConnectionOptions() {\n    return this.connectionOptions;\n  }\n\n  _isSecure() {\n    return true;\n  }\n\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof SecureChannelCredentialsImpl) {\n      if (!bufferOrNullEqual(this.rootCerts, other.rootCerts)) {\n        return false;\n      }\n\n      if (!bufferOrNullEqual(this.privateKey, other.privateKey)) {\n        return false;\n      }\n\n      if (!bufferOrNullEqual(this.certChain, other.certChain)) {\n        return false;\n      }\n\n      return this.verifyOptions.checkServerIdentity === other.verifyOptions.checkServerIdentity;\n    } else {\n      return false;\n    }\n  }\n\n}\n\nclass ComposedChannelCredentialsImpl extends ChannelCredentials {\n  constructor(channelCredentials, callCreds) {\n    super(callCreds);\n    this.channelCredentials = channelCredentials;\n  }\n\n  compose(callCredentials) {\n    const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n    return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);\n  }\n\n  _getConnectionOptions() {\n    return this.channelCredentials._getConnectionOptions();\n  }\n\n  _isSecure() {\n    return true;\n  }\n\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof ComposedChannelCredentialsImpl) {\n      return this.channelCredentials._equals(other.channelCredentials) && this.callCredentials._equals(other.callCredentials);\n    } else {\n      return false;\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/channel-credentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tls_1 = require(\"tls\");\nconst call_credentials_1 = require(\"./call-credentials\");\nconst tls_helpers_1 = require(\"./tls-helpers\");\n// tslint:disable-next-line:no-any\nfunction verifyIsBufferOrNull(obj, friendlyName) {\n    if (obj && !(obj instanceof Buffer)) {\n        throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);\n    }\n}\nfunction bufferOrNullEqual(buf1, buf2) {\n    if (buf1 === null && buf2 === null) {\n        return true;\n    }\n    else {\n        return buf1 !== null && buf2 !== null && buf1.equals(buf2);\n    }\n}\n/**\n * A class that contains credentials for communicating over a channel, as well\n * as a set of per-call credentials, which are applied to every method call made\n * over a channel initialized with an instance of this class.\n */\nclass ChannelCredentials {\n    constructor(callCredentials) {\n        this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();\n    }\n    /**\n     * Gets the set of per-call credentials associated with this instance.\n     */\n    _getCallCredentials() {\n        return this.callCredentials;\n    }\n    /**\n     * Return a new ChannelCredentials instance with a given set of credentials.\n     * The resulting instance can be used to construct a Channel that communicates\n     * over TLS.\n     * @param rootCerts The root certificate data.\n     * @param privateKey The client certificate private key, if available.\n     * @param certChain The client certificate key chain, if available.\n     */\n    static createSsl(rootCerts, privateKey, certChain, verifyOptions) {\n        verifyIsBufferOrNull(rootCerts, 'Root certificate');\n        verifyIsBufferOrNull(privateKey, 'Private key');\n        verifyIsBufferOrNull(certChain, 'Certificate chain');\n        if (privateKey && !certChain) {\n            throw new Error('Private key must be given with accompanying certificate chain');\n        }\n        if (!privateKey && certChain) {\n            throw new Error('Certificate chain must be given with accompanying private key');\n        }\n        return new SecureChannelCredentialsImpl(rootCerts || tls_helpers_1.getDefaultRootsData(), privateKey || null, certChain || null, verifyOptions || {});\n    }\n    /**\n     * Return a new ChannelCredentials instance with no credentials.\n     */\n    static createInsecure() {\n        return new InsecureChannelCredentialsImpl();\n    }\n}\nexports.ChannelCredentials = ChannelCredentials;\nclass InsecureChannelCredentialsImpl extends ChannelCredentials {\n    constructor(callCredentials) {\n        super(callCredentials);\n    }\n    compose(callCredentials) {\n        throw new Error('Cannot compose insecure credentials');\n    }\n    _getConnectionOptions() {\n        return null;\n    }\n    _isSecure() {\n        return false;\n    }\n    _equals(other) {\n        return other instanceof InsecureChannelCredentialsImpl;\n    }\n}\nclass SecureChannelCredentialsImpl extends ChannelCredentials {\n    constructor(rootCerts, privateKey, certChain, verifyOptions) {\n        super();\n        this.rootCerts = rootCerts;\n        this.privateKey = privateKey;\n        this.certChain = certChain;\n        this.verifyOptions = verifyOptions;\n        const secureContext = tls_1.createSecureContext({\n            ca: rootCerts || undefined,\n            key: privateKey || undefined,\n            cert: certChain || undefined,\n            ciphers: tls_helpers_1.CIPHER_SUITES,\n        });\n        this.connectionOptions = { secureContext };\n        if (verifyOptions && verifyOptions.checkServerIdentity) {\n            this.connectionOptions.checkServerIdentity = (host, cert) => {\n                return verifyOptions.checkServerIdentity(host, { raw: cert.raw });\n            };\n        }\n    }\n    compose(callCredentials) {\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n        return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);\n    }\n    _getConnectionOptions() {\n        return this.connectionOptions;\n    }\n    _isSecure() {\n        return true;\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof SecureChannelCredentialsImpl) {\n            if (!bufferOrNullEqual(this.rootCerts, other.rootCerts)) {\n                return false;\n            }\n            if (!bufferOrNullEqual(this.privateKey, other.privateKey)) {\n                return false;\n            }\n            if (!bufferOrNullEqual(this.certChain, other.certChain)) {\n                return false;\n            }\n            return (this.verifyOptions.checkServerIdentity ===\n                other.verifyOptions.checkServerIdentity);\n        }\n        else {\n            return false;\n        }\n    }\n}\nclass ComposedChannelCredentialsImpl extends ChannelCredentials {\n    constructor(channelCredentials, callCreds) {\n        super(callCreds);\n        this.channelCredentials = channelCredentials;\n    }\n    compose(callCredentials) {\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n        return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);\n    }\n    _getConnectionOptions() {\n        return this.channelCredentials._getConnectionOptions();\n    }\n    _isSecure() {\n        return true;\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ComposedChannelCredentialsImpl) {\n            return (this.channelCredentials._equals(other.channelCredentials) &&\n                this.callCredentials._equals(other.callCredentials));\n        }\n        else {\n            return false;\n        }\n    }\n}\n//# sourceMappingURL=channel-credentials.js.map"]},"metadata":{},"sourceType":"script"}