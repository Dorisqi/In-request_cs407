{"ast":null,"code":"/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar credential_1 = require(\"../auth/credential\");\n\nvar validator = require(\"./validator\");\n/**\n * Renames properties on an object given a mapping from old to new property names.\n *\n * For example, this can be used to map underscore_cased properties to camelCase.\n *\n * @param {object} obj The object whose properties to rename.\n * @param {object} keyMap The mapping from old to new property names.\n */\n\n\nfunction renameProperties(obj, keyMap) {\n  Object.keys(keyMap).forEach(function (oldKey) {\n    if (oldKey in obj) {\n      var newKey = keyMap[oldKey]; // The old key's value takes precedence over the new key's value.\n\n      obj[newKey] = obj[oldKey];\n      delete obj[oldKey];\n    }\n  });\n}\n\nexports.renameProperties = renameProperties;\n/**\n * Defines a new read-only property directly on an object and returns the object.\n *\n * @param {object} obj The object on which to define the property.\n * @param {string} prop The name of the property to be defined or modified.\n * @param {any} value The value associated with the property.\n */\n\nfunction addReadonlyGetter(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value: value,\n    // Make this property read-only.\n    writable: false,\n    // Include this property during enumeration of obj's properties.\n    enumerable: true\n  });\n}\n\nexports.addReadonlyGetter = addReadonlyGetter;\n/**\n * Returns the Google Cloud project ID associated with a Firebase app, if it's explicitly\n * specified in either the Firebase app options, credentials or the local environment.\n * Otherwise returns null.\n *\n * @param {FirebaseApp} app A Firebase app to get the project ID from.\n *\n * @return {string} A project ID string or null.\n */\n\nfunction getExplicitProjectId(app) {\n  var options = app.options;\n\n  if (validator.isNonEmptyString(options.projectId)) {\n    return options.projectId;\n  }\n\n  var credential = app.options.credential;\n\n  if (credential instanceof credential_1.ServiceAccountCredential) {\n    return credential.projectId;\n  }\n\n  var projectId = process.env.GOOGLE_CLOUD_PROJECT || process.env.GCLOUD_PROJECT;\n\n  if (validator.isNonEmptyString(projectId)) {\n    return projectId;\n  }\n\n  return null;\n}\n\nexports.getExplicitProjectId = getExplicitProjectId;\n/**\n * Determines the Google Cloud project ID associated with a Firebase app. This method\n * first checks if a project ID is explicitly specified in either the Firebase app options,\n * credentials or the local environment in that order. If no explicit project ID is\n * configured, but the SDK has been initialized with ComputeEngineCredentials, this\n * method attempts to discover the project ID from the local metadata service.\n *\n * @param {FirebaseApp} app A Firebase app to get the project ID from.\n *\n * @return {Promise<string | null>} A project ID string or null.\n */\n\nfunction findProjectId(app) {\n  var projectId = getExplicitProjectId(app);\n\n  if (projectId) {\n    return Promise.resolve(projectId);\n  }\n\n  var credential = app.options.credential;\n\n  if (credential instanceof credential_1.ComputeEngineCredential) {\n    return credential.getProjectId();\n  }\n\n  return Promise.resolve(null);\n}\n\nexports.findProjectId = findProjectId;\n/**\n * Encodes data using web-safe-base64.\n *\n * @param {Buffer} data The raw data byte input.\n * @return {string} The base64-encoded result.\n */\n\nfunction toWebSafeBase64(data) {\n  return data.toString('base64').replace(/\\//g, '_').replace(/\\+/g, '-');\n}\n\nexports.toWebSafeBase64 = toWebSafeBase64;\n/**\n * Formats a string of form 'project/{projectId}/{api}' and replaces\n * with corresponding arguments {projectId: '1234', api: 'resource'}\n * and returns output: 'project/1234/resource'.\n *\n * @param {string} str The original string where the param need to be\n *     replaced.\n * @param {object=} params The optional parameters to replace in the\n *     string.\n * @return {string} The resulting formatted string.\n */\n\nfunction formatString(str, params) {\n  var formatted = str;\n  Object.keys(params || {}).forEach(function (key) {\n    formatted = formatted.replace(new RegExp('{' + key + '}', 'g'), params[key]);\n  });\n  return formatted;\n}\n\nexports.formatString = formatString;\n/**\n * Generates the update mask for the provided object.\n * Note this will ignore the last key with value undefined.\n *\n * @param {[key: string]: any} obj The object to generate the update mask for.\n * @return {Array<string>} The computed update mask list.\n */\n\nfunction generateUpdateMask(obj) {\n  var updateMask = [];\n\n  if (!validator.isNonNullObject(obj)) {\n    return updateMask;\n  }\n\n  var _loop_1 = function (key) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n      var maskList = generateUpdateMask(obj[key]);\n\n      if (maskList.length > 0) {\n        maskList.forEach(function (mask) {\n          updateMask.push(key + \".\" + mask);\n        });\n      } else {\n        updateMask.push(key);\n      }\n    }\n  };\n\n  for (var key in obj) {\n    _loop_1(key);\n  }\n\n  return updateMask;\n}\n\nexports.generateUpdateMask = generateUpdateMask;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/firebase-admin/lib/utils/index.js"],"names":["Object","defineProperty","exports","value","credential_1","require","validator","renameProperties","obj","keyMap","keys","forEach","oldKey","newKey","addReadonlyGetter","prop","writable","enumerable","getExplicitProjectId","app","options","isNonEmptyString","projectId","credential","ServiceAccountCredential","process","env","GOOGLE_CLOUD_PROJECT","GCLOUD_PROJECT","findProjectId","Promise","resolve","ComputeEngineCredential","getProjectId","toWebSafeBase64","data","toString","replace","formatString","str","params","formatted","key","RegExp","generateUpdateMask","updateMask","isNonNullObject","_loop_1","hasOwnProperty","maskList","length","mask","push"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar credential_1 = require(\"../auth/credential\");\nvar validator = require(\"./validator\");\n/**\n * Renames properties on an object given a mapping from old to new property names.\n *\n * For example, this can be used to map underscore_cased properties to camelCase.\n *\n * @param {object} obj The object whose properties to rename.\n * @param {object} keyMap The mapping from old to new property names.\n */\nfunction renameProperties(obj, keyMap) {\n    Object.keys(keyMap).forEach(function (oldKey) {\n        if (oldKey in obj) {\n            var newKey = keyMap[oldKey];\n            // The old key's value takes precedence over the new key's value.\n            obj[newKey] = obj[oldKey];\n            delete obj[oldKey];\n        }\n    });\n}\nexports.renameProperties = renameProperties;\n/**\n * Defines a new read-only property directly on an object and returns the object.\n *\n * @param {object} obj The object on which to define the property.\n * @param {string} prop The name of the property to be defined or modified.\n * @param {any} value The value associated with the property.\n */\nfunction addReadonlyGetter(obj, prop, value) {\n    Object.defineProperty(obj, prop, {\n        value: value,\n        // Make this property read-only.\n        writable: false,\n        // Include this property during enumeration of obj's properties.\n        enumerable: true,\n    });\n}\nexports.addReadonlyGetter = addReadonlyGetter;\n/**\n * Returns the Google Cloud project ID associated with a Firebase app, if it's explicitly\n * specified in either the Firebase app options, credentials or the local environment.\n * Otherwise returns null.\n *\n * @param {FirebaseApp} app A Firebase app to get the project ID from.\n *\n * @return {string} A project ID string or null.\n */\nfunction getExplicitProjectId(app) {\n    var options = app.options;\n    if (validator.isNonEmptyString(options.projectId)) {\n        return options.projectId;\n    }\n    var credential = app.options.credential;\n    if (credential instanceof credential_1.ServiceAccountCredential) {\n        return credential.projectId;\n    }\n    var projectId = process.env.GOOGLE_CLOUD_PROJECT || process.env.GCLOUD_PROJECT;\n    if (validator.isNonEmptyString(projectId)) {\n        return projectId;\n    }\n    return null;\n}\nexports.getExplicitProjectId = getExplicitProjectId;\n/**\n * Determines the Google Cloud project ID associated with a Firebase app. This method\n * first checks if a project ID is explicitly specified in either the Firebase app options,\n * credentials or the local environment in that order. If no explicit project ID is\n * configured, but the SDK has been initialized with ComputeEngineCredentials, this\n * method attempts to discover the project ID from the local metadata service.\n *\n * @param {FirebaseApp} app A Firebase app to get the project ID from.\n *\n * @return {Promise<string | null>} A project ID string or null.\n */\nfunction findProjectId(app) {\n    var projectId = getExplicitProjectId(app);\n    if (projectId) {\n        return Promise.resolve(projectId);\n    }\n    var credential = app.options.credential;\n    if (credential instanceof credential_1.ComputeEngineCredential) {\n        return credential.getProjectId();\n    }\n    return Promise.resolve(null);\n}\nexports.findProjectId = findProjectId;\n/**\n * Encodes data using web-safe-base64.\n *\n * @param {Buffer} data The raw data byte input.\n * @return {string} The base64-encoded result.\n */\nfunction toWebSafeBase64(data) {\n    return data.toString('base64').replace(/\\//g, '_').replace(/\\+/g, '-');\n}\nexports.toWebSafeBase64 = toWebSafeBase64;\n/**\n * Formats a string of form 'project/{projectId}/{api}' and replaces\n * with corresponding arguments {projectId: '1234', api: 'resource'}\n * and returns output: 'project/1234/resource'.\n *\n * @param {string} str The original string where the param need to be\n *     replaced.\n * @param {object=} params The optional parameters to replace in the\n *     string.\n * @return {string} The resulting formatted string.\n */\nfunction formatString(str, params) {\n    var formatted = str;\n    Object.keys(params || {}).forEach(function (key) {\n        formatted = formatted.replace(new RegExp('{' + key + '}', 'g'), params[key]);\n    });\n    return formatted;\n}\nexports.formatString = formatString;\n/**\n * Generates the update mask for the provided object.\n * Note this will ignore the last key with value undefined.\n *\n * @param {[key: string]: any} obj The object to generate the update mask for.\n * @return {Array<string>} The computed update mask list.\n */\nfunction generateUpdateMask(obj) {\n    var updateMask = [];\n    if (!validator.isNonNullObject(obj)) {\n        return updateMask;\n    }\n    var _loop_1 = function (key) {\n        if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n            var maskList = generateUpdateMask(obj[key]);\n            if (maskList.length > 0) {\n                maskList.forEach(function (mask) {\n                    updateMask.push(key + \".\" + mask);\n                });\n            }\n            else {\n                updateMask.push(key);\n            }\n        }\n    };\n    for (var key in obj) {\n        _loop_1(key);\n    }\n    return updateMask;\n}\nexports.generateUpdateMask = generateUpdateMask;\n"]},"metadata":{},"sourceType":"script"}