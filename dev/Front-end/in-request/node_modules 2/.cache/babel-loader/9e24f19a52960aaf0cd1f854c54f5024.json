{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { FormSearch } from 'grommet-icons/icons/FormSearch';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Keyboard } from '../Keyboard';\nimport { Text } from '../Text';\nimport { TextInput } from '../TextInput';\nimport { normalizeColor } from '../../utils';\n\nvar Searcher = function Searcher(_ref) {\n  var filtering = _ref.filtering,\n      filters = _ref.filters,\n      onFilter = _ref.onFilter,\n      onFiltering = _ref.onFiltering,\n      property = _ref.property,\n      theme = _ref.theme;\n  var inputRef = useRef();\n  var needsFocus = filtering === property;\n  useEffect(function () {\n    if (inputRef && needsFocus) {\n      inputRef.current.focus();\n    }\n  }, [needsFocus, inputRef]);\n  return filtering === property ? React.createElement(Keyboard, {\n    onEsc: function onEsc() {\n      return onFiltering(undefined);\n    }\n  }, React.createElement(Box, {\n    flex: true,\n    pad: {\n      horizontal: 'small'\n    }\n  }, React.createElement(TextInput, {\n    name: \"search-\" + property,\n    ref: inputRef,\n    value: filters[property],\n    onChange: function onChange(event) {\n      return onFilter(property, event.target.value);\n    },\n    onBlur: function onBlur() {\n      return onFiltering(undefined);\n    }\n  }))) : React.createElement(React.Fragment, null, filters[property] ? React.createElement(Box, {\n    flex: false,\n    pad: {\n      horizontal: 'small'\n    },\n    direction: \"row\",\n    align: \"center\"\n  }, React.createElement(Text, null, filters[property])) : null, React.createElement(Button, {\n    a11yTitle: \"focus-search-\" + property,\n    icon: React.createElement(FormSearch, {\n      color: normalizeColor(filtering === property ? 'brand' : 'border', theme)\n    }),\n    hoverIndicator: true,\n    onClick: function onClick() {\n      return onFiltering(filtering === property ? undefined : property);\n    }\n  }));\n};\n\nSearcher.defaultProps = {};\nObject.setPrototypeOf(Searcher.defaultProps, defaultProps);\nvar SearcherWrapper = compose(withTheme)(Searcher);\nexport { SearcherWrapper as Searcher };","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/DataTable/Searcher.js"],"names":["React","useEffect","useRef","compose","withTheme","FormSearch","defaultProps","Box","Button","Keyboard","Text","TextInput","normalizeColor","Searcher","_ref","filtering","filters","onFilter","onFiltering","property","theme","inputRef","needsFocus","current","focus","createElement","onEsc","undefined","flex","pad","horizontal","name","ref","value","onChange","event","target","onBlur","Fragment","direction","align","a11yTitle","icon","color","hoverIndicator","onClick","Object","setPrototypeOf","SearcherWrapper"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { FormSearch } from 'grommet-icons/icons/FormSearch';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Keyboard } from '../Keyboard';\nimport { Text } from '../Text';\nimport { TextInput } from '../TextInput';\nimport { normalizeColor } from '../../utils';\n\nvar Searcher = function Searcher(_ref) {\n  var filtering = _ref.filtering,\n      filters = _ref.filters,\n      onFilter = _ref.onFilter,\n      onFiltering = _ref.onFiltering,\n      property = _ref.property,\n      theme = _ref.theme;\n  var inputRef = useRef();\n  var needsFocus = filtering === property;\n  useEffect(function () {\n    if (inputRef && needsFocus) {\n      inputRef.current.focus();\n    }\n  }, [needsFocus, inputRef]);\n  return filtering === property ? React.createElement(Keyboard, {\n    onEsc: function onEsc() {\n      return onFiltering(undefined);\n    }\n  }, React.createElement(Box, {\n    flex: true,\n    pad: {\n      horizontal: 'small'\n    }\n  }, React.createElement(TextInput, {\n    name: \"search-\" + property,\n    ref: inputRef,\n    value: filters[property],\n    onChange: function onChange(event) {\n      return onFilter(property, event.target.value);\n    },\n    onBlur: function onBlur() {\n      return onFiltering(undefined);\n    }\n  }))) : React.createElement(React.Fragment, null, filters[property] ? React.createElement(Box, {\n    flex: false,\n    pad: {\n      horizontal: 'small'\n    },\n    direction: \"row\",\n    align: \"center\"\n  }, React.createElement(Text, null, filters[property])) : null, React.createElement(Button, {\n    a11yTitle: \"focus-search-\" + property,\n    icon: React.createElement(FormSearch, {\n      color: normalizeColor(filtering === property ? 'brand' : 'border', theme)\n    }),\n    hoverIndicator: true,\n    onClick: function onClick() {\n      return onFiltering(filtering === property ? undefined : property);\n    }\n  }));\n};\n\nSearcher.defaultProps = {};\nObject.setPrototypeOf(Searcher.defaultProps, defaultProps);\nvar SearcherWrapper = compose(withTheme)(Searcher);\nexport { SearcherWrapper as Searcher };"]},"metadata":{},"sourceType":"module"}