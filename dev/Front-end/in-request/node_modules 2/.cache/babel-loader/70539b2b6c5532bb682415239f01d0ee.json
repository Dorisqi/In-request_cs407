{"ast":null,"code":"'use strict';\n\nconst mimicFn = require('mimic-fn');\n\nconst calledFunctions = new WeakMap();\n\nconst oneTime = (fn, options = {}) => {\n  if (typeof fn !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  let ret;\n  let isCalled = false;\n  let callCount = 0;\n  const functionName = fn.displayName || fn.name || '<anonymous>';\n\n  const onetime = function (...args) {\n    calledFunctions.set(onetime, ++callCount);\n\n    if (isCalled) {\n      if (options.throw === true) {\n        throw new Error(`Function \\`${functionName}\\` can only be called once`);\n      }\n\n      return ret;\n    }\n\n    isCalled = true;\n    ret = fn.apply(this, args);\n    fn = null;\n    return ret;\n  };\n\n  mimicFn(onetime, fn);\n  calledFunctions.set(onetime, callCount);\n  return onetime;\n};\n\nmodule.exports = oneTime; // TODO: Remove this for the next major release\n\nmodule.exports.default = oneTime;\n\nmodule.exports.callCount = fn => {\n  if (!calledFunctions.has(fn)) {\n    throw new Error(`The given function \\`${fn.name}\\` is not wrapped by the \\`onetime\\` package`);\n  }\n\n  return calledFunctions.get(fn);\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/onetime/index.js"],"names":["mimicFn","require","calledFunctions","WeakMap","oneTime","fn","options","TypeError","ret","isCalled","callCount","functionName","displayName","name","onetime","args","set","throw","Error","apply","module","exports","default","has","get"],"mappings":"AAAA;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAMC,eAAe,GAAG,IAAIC,OAAJ,EAAxB;;AAEA,MAAMC,OAAO,GAAG,CAACC,EAAD,EAAKC,OAAO,GAAG,EAAf,KAAsB;AACrC,MAAI,OAAOD,EAAP,KAAc,UAAlB,EAA8B;AAC7B,UAAM,IAAIE,SAAJ,CAAc,qBAAd,CAAN;AACA;;AAED,MAAIC,GAAJ;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,QAAMC,YAAY,GAAGN,EAAE,CAACO,WAAH,IAAkBP,EAAE,CAACQ,IAArB,IAA6B,aAAlD;;AAEA,QAAMC,OAAO,GAAG,UAAU,GAAGC,IAAb,EAAmB;AAClCb,IAAAA,eAAe,CAACc,GAAhB,CAAoBF,OAApB,EAA6B,EAAEJ,SAA/B;;AAEA,QAAID,QAAJ,EAAc;AACb,UAAIH,OAAO,CAACW,KAAR,KAAkB,IAAtB,EAA4B;AAC3B,cAAM,IAAIC,KAAJ,CAAW,cAAaP,YAAa,4BAArC,CAAN;AACA;;AAED,aAAOH,GAAP;AACA;;AAEDC,IAAAA,QAAQ,GAAG,IAAX;AACAD,IAAAA,GAAG,GAAGH,EAAE,CAACc,KAAH,CAAS,IAAT,EAAeJ,IAAf,CAAN;AACAV,IAAAA,EAAE,GAAG,IAAL;AAEA,WAAOG,GAAP;AACA,GAhBD;;AAkBAR,EAAAA,OAAO,CAACc,OAAD,EAAUT,EAAV,CAAP;AACAH,EAAAA,eAAe,CAACc,GAAhB,CAAoBF,OAApB,EAA6BJ,SAA7B;AAEA,SAAOI,OAAP;AACA,CAhCD;;AAkCAM,MAAM,CAACC,OAAP,GAAiBjB,OAAjB,C,CACA;;AACAgB,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBlB,OAAzB;;AAEAgB,MAAM,CAACC,OAAP,CAAeX,SAAf,GAA2BL,EAAE,IAAI;AAChC,MAAI,CAACH,eAAe,CAACqB,GAAhB,CAAoBlB,EAApB,CAAL,EAA8B;AAC7B,UAAM,IAAIa,KAAJ,CAAW,wBAAuBb,EAAE,CAACQ,IAAK,8CAA1C,CAAN;AACA;;AAED,SAAOX,eAAe,CAACsB,GAAhB,CAAoBnB,EAApB,CAAP;AACA,CAND","sourcesContent":["'use strict';\nconst mimicFn = require('mimic-fn');\n\nconst calledFunctions = new WeakMap();\n\nconst oneTime = (fn, options = {}) => {\n\tif (typeof fn !== 'function') {\n\t\tthrow new TypeError('Expected a function');\n\t}\n\n\tlet ret;\n\tlet isCalled = false;\n\tlet callCount = 0;\n\tconst functionName = fn.displayName || fn.name || '<anonymous>';\n\n\tconst onetime = function (...args) {\n\t\tcalledFunctions.set(onetime, ++callCount);\n\n\t\tif (isCalled) {\n\t\t\tif (options.throw === true) {\n\t\t\t\tthrow new Error(`Function \\`${functionName}\\` can only be called once`);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\tisCalled = true;\n\t\tret = fn.apply(this, args);\n\t\tfn = null;\n\n\t\treturn ret;\n\t};\n\n\tmimicFn(onetime, fn);\n\tcalledFunctions.set(onetime, callCount);\n\n\treturn onetime;\n};\n\nmodule.exports = oneTime;\n// TODO: Remove this for the next major release\nmodule.exports.default = oneTime;\n\nmodule.exports.callCount = fn => {\n\tif (!calledFunctions.has(fn)) {\n\t\tthrow new Error(`The given function \\`${fn.name}\\` is not wrapped by the \\`onetime\\` package`);\n\t}\n\n\treturn calledFunctions.get(fn);\n};\n"]},"metadata":{},"sourceType":"script"}