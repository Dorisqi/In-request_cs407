{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst gax = require(\"google-gax\");\n\nconst path = require(\"path\");\n\nconst gapicConfig = require(\"./firestore_client_config.json\");\n\nconst version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore service.\n *\n *  Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL\n *  document database that simplifies storing, syncing, and querying data for\n *  your mobile, web, and IoT apps at global scale. Its client libraries provide\n *  live synchronization and offline support, while its security features and\n *  integrations with Firebase and Google Cloud Platform (GCP) accelerate\n *  building truly serverless apps.\n * @class\n * @memberof v1\n */\n\n\nclass FirestoreClient {\n  /**\n   * Construct an instance of FirestoreClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {function} [options.promise] - Custom promise module to use instead\n   *     of native Promises.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   */\n  constructor(opts) {\n    this._descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {}\n    };\n    this._terminated = false; // Ensure that options include the service address and port.\n\n    const staticMembers = this.constructor;\n    const servicePath = opts && opts.servicePath ? opts.servicePath : opts && opts.apiEndpoint ? opts.apiEndpoint : staticMembers.servicePath;\n    const port = opts && opts.port ? opts.port : staticMembers.port;\n\n    if (!opts) {\n      opts = {\n        servicePath,\n        port\n      };\n    }\n\n    opts.servicePath = opts.servicePath || servicePath;\n    opts.port = opts.port || port;\n    opts.clientConfig = opts.clientConfig || {};\n    const isBrowser = typeof window !== 'undefined';\n\n    if (isBrowser) {\n      opts.fallback = true;\n    } // If we are in browser, we are already using fallback because of the\n    // \"browser\" field in package.json.\n    // But if we were explicitly requested to use fallback, let's do it now.\n\n\n    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n\n    opts.scopes = this.constructor.scopes;\n    const gaxGrpc = new gaxModule.GrpcClient(opts); // Save the auth object to the client, for use by other methods.\n\n    this.auth = gaxGrpc.auth; // Determine the client header string.\n\n    const clientHeader = [`gax/${gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    const protos = gaxGrpc.loadProto(opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath); // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this._descriptors.page = {\n      listDocuments: new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n      listCollectionIds: new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds')\n    }; // Some of the methods on this service provide streaming responses.\n    // Provide descriptors for these.\n\n    this._descriptors.stream = {\n      batchGetDocuments: new gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n      runQuery: new gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n      write: new gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n      listen: new gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING)\n    }; // Put together the default options sent with requests.\n\n    const defaults = gaxGrpc.constructSettings('google.firestore.v1.Firestore', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this._innerApiCalls = {}; // Put together the \"service stub\" for\n    // google.firestore.v1.Firestore.\n\n    this.firestoreStub = gaxGrpc.createStub(opts.fallback ? protos.lookupService('google.firestore.v1.Firestore') : // tslint:disable-next-line no-any\n    protos.google.firestore.v1.Firestore, opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const firestoreStubMethods = ['getDocument', 'listDocuments', 'createDocument', 'updateDocument', 'deleteDocument', 'batchGetDocuments', 'beginTransaction', 'commit', 'rollback', 'runQuery', 'write', 'listen', 'listCollectionIds'];\n\n    for (const methodName of firestoreStubMethods) {\n      const innerCallPromise = this.firestoreStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        return stub[methodName].apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const apiCall = gaxModule.createApiCall(innerCallPromise, defaults[methodName], this._descriptors.page[methodName] || this._descriptors.stream[methodName] || this._descriptors.longrunning[methodName]);\n\n      this._innerApiCalls[methodName] = (argument, callOptions, callback) => {\n        return apiCall(argument, callOptions, callback);\n      };\n    }\n  }\n  /**\n   * The DNS address for this API service.\n   */\n\n\n  static get servicePath() {\n    return 'firestore.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n\n\n  static get apiEndpoint() {\n    return 'firestore.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/datastore'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @param {function(Error, string)} callback - the callback to\n   *   be called with the current project Id.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Gets a single document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The resource name of the Document to get. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   * @param {google.firestore.v1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If the document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {Buffer} request.transaction\n   *   Reads the document in a transaction.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads the version of the document at the given time.\n   *   This may not be older than 60 seconds.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Document]{@link google.firestore.v1.Document}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  getDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    return this._innerApiCalls.getDocument(request, options, callback);\n  }\n  /**\n   * Creates a new document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource. For example:\n   *   `projects/{project_id}/databases/{database_id}/documents` or\n   *   `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`\n   * @param {string} request.collectionId\n   *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.\n   * @param {string} request.documentId\n   *   The client-assigned document ID to use for this document.\n   *\n   *   Optional. If not specified, an ID will be assigned by the service.\n   * @param {google.firestore.v1.Document} request.document\n   *   Required. The document to create. `name` must not be set.\n   * @param {google.firestore.v1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If the document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Document]{@link google.firestore.v1.Document}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  createDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    return this._innerApiCalls.createDocument(request, options, callback);\n  }\n  /**\n   * Updates or inserts a document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.firestore.v1.Document} request.document\n   *   Required. The updated document.\n   *   Creates the document if it does not already exist.\n   * @param {google.firestore.v1.DocumentMask} request.updateMask\n   *   The fields to update.\n   *   None of the field paths in the mask may contain a reserved name.\n   *\n   *   If the document exists on the server and has fields not referenced in the\n   *   mask, they are left unchanged.\n   *   Fields referenced in the mask, but not present in the input document, are\n   *   deleted from the document on the server.\n   * @param {google.firestore.v1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If the document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {google.firestore.v1.Precondition} request.currentDocument\n   *   An optional precondition on the document.\n   *   The request will fail if this is set and not met by the target document.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Document]{@link google.firestore.v1.Document}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  updateDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'document.name': request.document.name || ''\n    });\n    return this._innerApiCalls.updateDocument(request, options, callback);\n  }\n  /**\n   * Deletes a document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The resource name of the Document to delete. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   * @param {google.firestore.v1.Precondition} request.currentDocument\n   *   An optional precondition on the document.\n   *   The request will fail if this is set and not met by the target document.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  deleteDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    return this._innerApiCalls.deleteDocument(request, options, callback);\n  }\n  /**\n   * Starts a new transaction.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.database\n   *   Required. The database name. In the format:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {google.firestore.v1.TransactionOptions} request.options\n   *   The options for the transaction.\n   *   Defaults to a read-write transaction.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [BeginTransactionResponse]{@link google.firestore.v1.BeginTransactionResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  beginTransaction(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      database: request.database || ''\n    });\n    return this._innerApiCalls.beginTransaction(request, options, callback);\n  }\n  /**\n   * Commits a transaction, while optionally updating documents.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.database\n   *   Required. The database name. In the format:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {number[]} request.writes\n   *   The writes to apply.\n   *\n   *   Always executed atomically and in order.\n   * @param {Buffer} request.transaction\n   *   If set, applies all writes in this transaction, and commits it.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [CommitResponse]{@link google.firestore.v1.CommitResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  commit(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      database: request.database || ''\n    });\n    return this._innerApiCalls.commit(request, options, callback);\n  }\n  /**\n   * Rolls back a transaction.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.database\n   *   Required. The database name. In the format:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {Buffer} request.transaction\n   *   Required. The transaction to roll back.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  rollback(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      database: request.database || ''\n    });\n    return this._innerApiCalls.rollback(request, options, callback);\n  }\n  /**\n   * Gets multiple documents.\n   *\n   * Documents returned by this method are not guaranteed to be returned in the\n   * same order that they were requested.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.database\n   *   Required. The database name. In the format:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {string[]} request.documents\n   *   The names of the documents to retrieve. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   The request will fail if any of the document is not a child resource of the\n   *   given `database`. Duplicate names will be elided.\n   * @param {google.firestore.v1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If a document has a field that is not present in this mask, that field will\n   *   not be returned in the response.\n   * @param {Buffer} request.transaction\n   *   Reads documents in a transaction.\n   * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n   *   Starts a new transaction and reads the documents.\n   *   Defaults to a read-only transaction.\n   *   The new transaction ID will be returned as the first response in the\n   *   stream.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads documents as they were at the given time.\n   *   This may not be older than 60 seconds.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits [BatchGetDocumentsResponse]{@link google.firestore.v1.BatchGetDocumentsResponse} on 'data' event.\n   */\n\n\n  batchGetDocuments(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      database: request.database || ''\n    });\n    return this._innerApiCalls.batchGetDocuments(request, options);\n  }\n  /**\n   * Runs a query.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource name. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents` or\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents` or\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n   *   A structured query.\n   * @param {Buffer} request.transaction\n   *   Reads documents in a transaction.\n   * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n   *   Starts a new transaction and reads the documents.\n   *   Defaults to a read-only transaction.\n   *   The new transaction ID will be returned as the first response in the\n   *   stream.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads documents as they were at the given time.\n   *   This may not be older than 60 seconds.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits [RunQueryResponse]{@link google.firestore.v1.RunQueryResponse} on 'data' event.\n   */\n\n\n  runQuery(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    return this._innerApiCalls.runQuery(request, options);\n  }\n  /**\n   * Streams batches of document updates and deletes, in order.\n   *\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which is both readable and writable. It accepts objects\n   *   representing [WriteRequest]{@link google.firestore.v1.WriteRequest} for write() method, and\n   *   will emit objects representing [WriteResponse]{@link google.firestore.v1.WriteResponse} on 'data' event asynchronously.\n   */\n\n\n  write(options) {\n    return this._innerApiCalls.write(options);\n  }\n  /**\n   * Listens to changes.\n   *\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which is both readable and writable. It accepts objects\n   *   representing [ListenRequest]{@link google.firestore.v1.ListenRequest} for write() method, and\n   *   will emit objects representing [ListenResponse]{@link google.firestore.v1.ListenResponse} on 'data' event asynchronously.\n   */\n\n\n  listen(options) {\n    return this._innerApiCalls.listen({}, options);\n  }\n  /**\n   * Lists documents.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource name. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents` or\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents` or\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {string} request.collectionId\n   *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n   *   or `messages`.\n   * @param {number} request.pageSize\n   *   The maximum number of documents to return.\n   * @param {string} request.pageToken\n   *   The `next_page_token` value returned from a previous List request, if any.\n   * @param {string} request.orderBy\n   *   The order to sort results by. For example: `priority desc, name`.\n   * @param {google.firestore.v1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If a document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {Buffer} request.transaction\n   *   Reads documents in a transaction.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads documents as they were at the given time.\n   *   This may not be older than 60 seconds.\n   * @param {boolean} request.showMissing\n   *   If the list should show missing documents. A missing document is a\n   *   document that does not exist but has sub-documents. These documents will\n   *   be returned with a key but will not have fields, [Document.create_time][google.firestore.v1.Document.create_time],\n   *   or [Document.update_time][google.firestore.v1.Document.update_time] set.\n   *\n   *   Requests with `show_missing` may not specify `where` or\n   *   `order_by`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Document]{@link google.firestore.v1.Document}.\n   *   The client library support auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Document]{@link google.firestore.v1.Document} that corresponds to\n   *   the one page received from the API server.\n   *   If the second element is not null it contains the request object of type [ListDocumentsRequest]{@link google.firestore.v1.ListDocumentsRequest}\n   *   that can be used to obtain the next page of the results.\n   *   If it is null, the next page does not exist.\n   *   The third element contains the raw response received from the API server. Its type is\n   *   [ListDocumentsResponse]{@link google.firestore.v1.ListDocumentsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  listDocuments(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    return this._innerApiCalls.listDocuments(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listDocuments}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listDocuments} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource name. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents` or\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents` or\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {string} request.collectionId\n   *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n   *   or `messages`.\n   * @param {number} request.pageSize\n   *   The maximum number of documents to return.\n   * @param {string} request.pageToken\n   *   The `next_page_token` value returned from a previous List request, if any.\n   * @param {string} request.orderBy\n   *   The order to sort results by. For example: `priority desc, name`.\n   * @param {google.firestore.v1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If a document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {Buffer} request.transaction\n   *   Reads documents in a transaction.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads documents as they were at the given time.\n   *   This may not be older than 60 seconds.\n   * @param {boolean} request.showMissing\n   *   If the list should show missing documents. A missing document is a\n   *   document that does not exist but has sub-documents. These documents will\n   *   be returned with a key but will not have fields, [Document.create_time][google.firestore.v1.Document.create_time],\n   *   or [Document.update_time][google.firestore.v1.Document.update_time] set.\n   *\n   *   Requests with `show_missing` may not specify `where` or\n   *   `order_by`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Document]{@link google.firestore.v1.Document} on 'data' event.\n   */\n\n\n  listDocumentsStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    return this._descriptors.page.listDocuments.createStream(this._innerApiCalls.listDocuments, request, callSettings);\n  }\n  /**\n   * Lists all the collection IDs underneath a document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent document. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {number} request.pageSize\n   *   The maximum number of results to return.\n   * @param {string} request.pageToken\n   *   A page token. Must be a value from\n   *   [ListCollectionIdsResponse][google.firestore.v1.ListCollectionIdsResponse].\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of string.\n   *   The client library support auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of string that corresponds to\n   *   the one page received from the API server.\n   *   If the second element is not null it contains the request object of type [ListCollectionIdsRequest]{@link google.firestore.v1.ListCollectionIdsRequest}\n   *   that can be used to obtain the next page of the results.\n   *   If it is null, the next page does not exist.\n   *   The third element contains the raw response received from the API server. Its type is\n   *   [ListCollectionIdsResponse]{@link google.firestore.v1.ListCollectionIdsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  listCollectionIds(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    return this._innerApiCalls.listCollectionIds(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listCollectionIds}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listCollectionIds} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent document. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {number} request.pageSize\n   *   The maximum number of results to return.\n   * @param {string} request.pageToken\n   *   A page token. Must be a value from\n   *   [ListCollectionIdsResponse][google.firestore.v1.ListCollectionIdsResponse].\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing string on 'data' event.\n   */\n\n\n  listCollectionIdsStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    return this._descriptors.page.listCollectionIds.createStream(this._innerApiCalls.listCollectionIds, request, callSettings);\n  }\n  /**\n   * Terminate the GRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   */\n\n\n  close() {\n    if (!this._terminated) {\n      return this.firestoreStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.FirestoreClient = FirestoreClient;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/@google-cloud/firestore/build/src/v1/firestore_client.js"],"names":["Object","defineProperty","exports","value","gax","require","path","gapicConfig","version","FirestoreClient","constructor","opts","_descriptors","page","stream","longrunning","_terminated","staticMembers","servicePath","apiEndpoint","port","clientConfig","isBrowser","window","fallback","gaxModule","scopes","gaxGrpc","GrpcClient","auth","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","nodejsProtoPath","join","__dirname","protos","loadProto","listDocuments","PageDescriptor","listCollectionIds","batchGetDocuments","StreamDescriptor","StreamType","SERVER_STREAMING","runQuery","write","BIDI_STREAMING","listen","defaults","constructSettings","_innerApiCalls","firestoreStub","createStub","lookupService","google","firestore","v1","Firestore","firestoreStubMethods","methodName","innerCallPromise","then","stub","args","Promise","reject","apply","err","apiCall","createApiCall","argument","callOptions","callback","getProjectId","getDocument","request","optionsOrCallback","options","undefined","otherArgs","headers","routingHeader","fromParams","name","createDocument","parent","updateDocument","document","deleteDocument","beginTransaction","database","commit","rollback","listDocumentsStream","callSettings","CallSettings","createStream","listCollectionIdsStream","close","resolve"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gax = require(\"google-gax\");\nconst path = require(\"path\");\nconst gapicConfig = require(\"./firestore_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore service.\n *\n *  Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL\n *  document database that simplifies storing, syncing, and querying data for\n *  your mobile, web, and IoT apps at global scale. Its client libraries provide\n *  live synchronization and offline support, while its security features and\n *  integrations with Firebase and Google Cloud Platform (GCP) accelerate\n *  building truly serverless apps.\n * @class\n * @memberof v1\n */\nclass FirestoreClient {\n    /**\n     * Construct an instance of FirestoreClient.\n     *\n     * @param {object} [options] - The configuration object. See the subsequent\n     *   parameters for more details.\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {function} [options.promise] - Custom promise module to use instead\n     *     of native Promises.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     */\n    constructor(opts) {\n        this._descriptors = { page: {}, stream: {}, longrunning: {} };\n        this._terminated = false;\n        // Ensure that options include the service address and port.\n        const staticMembers = this.constructor;\n        const servicePath = opts && opts.servicePath\n            ? opts.servicePath\n            : opts && opts.apiEndpoint\n                ? opts.apiEndpoint\n                : staticMembers.servicePath;\n        const port = opts && opts.port ? opts.port : staticMembers.port;\n        if (!opts) {\n            opts = { servicePath, port };\n        }\n        opts.servicePath = opts.servicePath || servicePath;\n        opts.port = opts.port || port;\n        opts.clientConfig = opts.clientConfig || {};\n        const isBrowser = typeof window !== 'undefined';\n        if (isBrowser) {\n            opts.fallback = true;\n        }\n        // If we are in browser, we are already using fallback because of the\n        // \"browser\" field in package.json.\n        // But if we were explicitly requested to use fallback, let's do it now.\n        const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options\n        // sent to the client.\n        opts.scopes = this.constructor.scopes;\n        const gaxGrpc = new gaxModule.GrpcClient(opts);\n        // Save the auth object to the client, for use by other methods.\n        this.auth = gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [`gax/${gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        // For Node.js, pass the path to JSON proto file.\n        // For browsers, pass the JSON content.\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n        const protos = gaxGrpc.loadProto(opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath);\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this._descriptors.page = {\n            listDocuments: new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n            listCollectionIds: new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds'),\n        };\n        // Some of the methods on this service provide streaming responses.\n        // Provide descriptors for these.\n        this._descriptors.stream = {\n            batchGetDocuments: new gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n            runQuery: new gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n            write: new gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n            listen: new gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n        };\n        // Put together the default options sent with requests.\n        const defaults = gaxGrpc.constructSettings('google.firestore.v1.Firestore', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this._innerApiCalls = {};\n        // Put together the \"service stub\" for\n        // google.firestore.v1.Firestore.\n        this.firestoreStub = gaxGrpc.createStub(opts.fallback\n            ? protos.lookupService('google.firestore.v1.Firestore')\n            : // tslint:disable-next-line no-any\n                protos.google.firestore.v1.Firestore, opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const firestoreStubMethods = [\n            'getDocument',\n            'listDocuments',\n            'createDocument',\n            'updateDocument',\n            'deleteDocument',\n            'batchGetDocuments',\n            'beginTransaction',\n            'commit',\n            'rollback',\n            'runQuery',\n            'write',\n            'listen',\n            'listCollectionIds',\n        ];\n        for (const methodName of firestoreStubMethods) {\n            const innerCallPromise = this.firestoreStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                return stub[methodName].apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const apiCall = gaxModule.createApiCall(innerCallPromise, defaults[methodName], this._descriptors.page[methodName] ||\n                this._descriptors.stream[methodName] ||\n                this._descriptors.longrunning[methodName]);\n            this._innerApiCalls[methodName] = (argument, callOptions, callback) => {\n                return apiCall(argument, callOptions, callback);\n            };\n        }\n    }\n    /**\n     * The DNS address for this API service.\n     */\n    static get servicePath() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n    static get apiEndpoint() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/datastore',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @param {function(Error, string)} callback - the callback to\n     *   be called with the current project Id.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Gets a single document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the Document to get. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads the document in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads the version of the document at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1.Document}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    getDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        return this._innerApiCalls.getDocument(request, options, callback);\n    }\n    /**\n     * Creates a new document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource. For example:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.\n     * @param {string} request.documentId\n     *   The client-assigned document ID to use for this document.\n     *\n     *   Optional. If not specified, an ID will be assigned by the service.\n     * @param {google.firestore.v1.Document} request.document\n     *   Required. The document to create. `name` must not be set.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1.Document}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    createDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        return this._innerApiCalls.createDocument(request, options, callback);\n    }\n    /**\n     * Updates or inserts a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.firestore.v1.Document} request.document\n     *   Required. The updated document.\n     *   Creates the document if it does not already exist.\n     * @param {google.firestore.v1.DocumentMask} request.updateMask\n     *   The fields to update.\n     *   None of the field paths in the mask may contain a reserved name.\n     *\n     *   If the document exists on the server and has fields not referenced in the\n     *   mask, they are left unchanged.\n     *   Fields referenced in the mask, but not present in the input document, are\n     *   deleted from the document on the server.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {google.firestore.v1.Precondition} request.currentDocument\n     *   An optional precondition on the document.\n     *   The request will fail if this is set and not met by the target document.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1.Document}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    updateDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            'document.name': request.document.name || '',\n        });\n        return this._innerApiCalls.updateDocument(request, options, callback);\n    }\n    /**\n     * Deletes a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the Document to delete. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     * @param {google.firestore.v1.Precondition} request.currentDocument\n     *   An optional precondition on the document.\n     *   The request will fail if this is set and not met by the target document.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    deleteDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        return this._innerApiCalls.deleteDocument(request, options, callback);\n    }\n    /**\n     * Starts a new transaction.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {google.firestore.v1.TransactionOptions} request.options\n     *   The options for the transaction.\n     *   Defaults to a read-write transaction.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [BeginTransactionResponse]{@link google.firestore.v1.BeginTransactionResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    beginTransaction(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        return this._innerApiCalls.beginTransaction(request, options, callback);\n    }\n    /**\n     * Commits a transaction, while optionally updating documents.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {number[]} request.writes\n     *   The writes to apply.\n     *\n     *   Always executed atomically and in order.\n     * @param {Buffer} request.transaction\n     *   If set, applies all writes in this transaction, and commits it.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [CommitResponse]{@link google.firestore.v1.CommitResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    commit(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        return this._innerApiCalls.commit(request, options, callback);\n    }\n    /**\n     * Rolls back a transaction.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {Buffer} request.transaction\n     *   Required. The transaction to roll back.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    rollback(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        return this._innerApiCalls.rollback(request, options, callback);\n    }\n    /**\n     * Gets multiple documents.\n     *\n     * Documents returned by this method are not guaranteed to be returned in the\n     * same order that they were requested.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.documents\n     *   The names of the documents to retrieve. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   The request will fail if any of the document is not a child resource of the\n     *   given `database`. Duplicate names will be elided.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field will\n     *   not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits [BatchGetDocumentsResponse]{@link google.firestore.v1.BatchGetDocumentsResponse} on 'data' event.\n     */\n    batchGetDocuments(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        return this._innerApiCalls.batchGetDocuments(request, options);\n    }\n    /**\n     * Runs a query.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits [RunQueryResponse]{@link google.firestore.v1.RunQueryResponse} on 'data' event.\n     */\n    runQuery(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        return this._innerApiCalls.runQuery(request, options);\n    }\n    /**\n     * Streams batches of document updates and deletes, in order.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [WriteRequest]{@link google.firestore.v1.WriteRequest} for write() method, and\n     *   will emit objects representing [WriteResponse]{@link google.firestore.v1.WriteResponse} on 'data' event asynchronously.\n     */\n    write(options) {\n        return this._innerApiCalls.write(options);\n    }\n    /**\n     * Listens to changes.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [ListenRequest]{@link google.firestore.v1.ListenRequest} for write() method, and\n     *   will emit objects representing [ListenResponse]{@link google.firestore.v1.ListenResponse} on 'data' event asynchronously.\n     */\n    listen(options) {\n        return this._innerApiCalls.listen({}, options);\n    }\n    /**\n     * Lists documents.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, [Document.create_time][google.firestore.v1.Document.create_time],\n     *   or [Document.update_time][google.firestore.v1.Document.update_time] set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Document]{@link google.firestore.v1.Document}.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of [Document]{@link google.firestore.v1.Document} that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListDocumentsRequest]{@link google.firestore.v1.ListDocumentsRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListDocumentsResponse]{@link google.firestore.v1.ListDocumentsResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    listDocuments(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        return this._innerApiCalls.listDocuments(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listDocuments}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listDocuments} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, [Document.create_time][google.firestore.v1.Document.create_time],\n     *   or [Document.update_time][google.firestore.v1.Document.update_time] set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Document]{@link google.firestore.v1.Document} on 'data' event.\n     */\n    listDocumentsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        return this._descriptors.page.listDocuments.createStream(this._innerApiCalls.listDocuments, request, callSettings);\n    }\n    /**\n     * Lists all the collection IDs underneath a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   [ListCollectionIdsResponse][google.firestore.v1.ListCollectionIdsResponse].\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of string.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of string that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListCollectionIdsRequest]{@link google.firestore.v1.ListCollectionIdsRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListCollectionIdsResponse]{@link google.firestore.v1.ListCollectionIdsResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    listCollectionIds(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        return this._innerApiCalls.listCollectionIds(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listCollectionIds}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listCollectionIds} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   [ListCollectionIdsResponse][google.firestore.v1.ListCollectionIdsResponse].\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing string on 'data' event.\n     */\n    listCollectionIdsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        return this._descriptors.page.listCollectionIds.createStream(this._innerApiCalls.listCollectionIds, request, callSettings);\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n    close() {\n        if (!this._terminated) {\n            return this.firestoreStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.FirestoreClient = FirestoreClient;\n//# sourceMappingURL=firestore_client.js.map"]},"metadata":{},"sourceType":"script"}