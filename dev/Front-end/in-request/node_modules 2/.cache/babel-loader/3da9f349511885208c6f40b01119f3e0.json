{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar http_1 = require(\"http\");\n\nvar https_1 = require(\"https\");\n\nvar pool = new Map();\n/**\n * Returns a custom request Agent if one is found, otherwise returns undefined\n * which will result in the global http(s) Agent being used.\n * @private\n * @param {string} uri The request uri\n * @param {object} reqOpts The request options\n * @returns {Agent|undefined}\n */\n\nfunction getAgent(uri, reqOpts) {\n  var isHttp = uri.startsWith('http://');\n  var proxy = reqOpts.proxy || process.env.HTTP_PROXY || process.env.http_proxy || process.env.HTTPS_PROXY || process.env.https_proxy;\n\n  if (proxy) {\n    // tslint:disable-next-line variable-name\n    var Agent = isHttp ? require('http-proxy-agent') : require('https-proxy-agent');\n    return new Agent(proxy);\n  }\n\n  var key = isHttp ? 'http' : 'https';\n\n  if (reqOpts.forever) {\n    key += ':forever';\n\n    if (!pool.has(key)) {\n      // tslint:disable-next-line variable-name\n      var Agent = isHttp ? http_1.Agent : https_1.Agent;\n      pool.set(key, new Agent({\n        keepAlive: true\n      }));\n    }\n  }\n\n  return pool.get(key);\n}\n\nexports.getAgent = getAgent;","map":{"version":3,"sources":["../../src/agents.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA,IAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAGA,IAAM,IAAI,GAAG,IAAI,GAAJ,EAAb;AAEA;;;;;;;;;AAQA,SAAgB,QAAhB,CAAyB,GAAzB,EAAsC,OAAtC,EAAsD;AACpD,MAAM,MAAM,GAAG,GAAG,CAAC,UAAJ,CAAe,SAAf,CAAf;AACA,MAAM,KAAK,GACT,OAAO,CAAC,KAAR,IACA,OAAO,CAAC,GAAR,CAAY,UADZ,IAEA,OAAO,CAAC,GAAR,CAAY,UAFZ,IAGA,OAAO,CAAC,GAAR,CAAY,WAHZ,IAIA,OAAO,CAAC,GAAR,CAAY,WALd;;AAOA,MAAI,KAAJ,EAAW;AACT;AACA,QAAM,KAAK,GAAG,MAAM,GAChB,OAAO,CAAC,kBAAD,CADS,GAEhB,OAAO,CAAC,mBAAD,CAFX;AAIA,WAAO,IAAI,KAAJ,CAAU,KAAV,CAAP;AACD;;AAED,MAAI,GAAG,GAAG,MAAM,GAAG,MAAH,GAAY,OAA5B;;AAEA,MAAI,OAAO,CAAC,OAAZ,EAAqB;AACnB,IAAA,GAAG,IAAI,UAAP;;AAEA,QAAI,CAAC,IAAI,CAAC,GAAL,CAAS,GAAT,CAAL,EAAoB;AAClB;AACA,UAAM,KAAK,GAAG,MAAM,GAAG,MAAA,CAAA,KAAH,GAAe,OAAA,CAAA,KAAnC;AACA,MAAA,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,IAAI,KAAJ,CAAU;AAAC,QAAA,SAAS,EAAE;AAAZ,OAAV,CAAd;AACD;AACF;;AAED,SAAO,IAAI,CAAC,GAAL,CAAS,GAAT,CAAP;AACD;;AA/BD,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar http_1 = require(\"http\");\nvar https_1 = require(\"https\");\nvar pool = new Map();\n/**\n * Returns a custom request Agent if one is found, otherwise returns undefined\n * which will result in the global http(s) Agent being used.\n * @private\n * @param {string} uri The request uri\n * @param {object} reqOpts The request options\n * @returns {Agent|undefined}\n */\nfunction getAgent(uri, reqOpts) {\n    var isHttp = uri.startsWith('http://');\n    var proxy = reqOpts.proxy ||\n        process.env.HTTP_PROXY ||\n        process.env.http_proxy ||\n        process.env.HTTPS_PROXY ||\n        process.env.https_proxy;\n    if (proxy) {\n        // tslint:disable-next-line variable-name\n        var Agent = isHttp\n            ? require('http-proxy-agent')\n            : require('https-proxy-agent');\n        return new Agent(proxy);\n    }\n    var key = isHttp ? 'http' : 'https';\n    if (reqOpts.forever) {\n        key += ':forever';\n        if (!pool.has(key)) {\n            // tslint:disable-next-line variable-name\n            var Agent = isHttp ? http_1.Agent : https_1.Agent;\n            pool.set(key, new Agent({ keepAlive: true }));\n        }\n    }\n    return pool.get(key);\n}\nexports.getAgent = getAgent;\n//# sourceMappingURL=agents.js.map"]},"metadata":{},"sourceType":"script"}