{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.translateEndAngle = exports.arcCommands = exports.polarToCartesian = exports.baseUnit = void 0;\nvar POST_DECIMAL_DIGITS = 10;\nvar baseUnit = 24;\nexports.baseUnit = baseUnit;\n\nvar polarToCartesian = function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n  var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians)\n  };\n};\n\nexports.polarToCartesian = polarToCartesian;\n\nvar arcCommands = function arcCommands(centerX, centerY, radius, startAngle, endAngle) {\n  // handle that we can't draw a complete circle\n  var normalizedEndAngle = endAngle;\n\n  if (endAngle - startAngle >= 360) {\n    normalizedEndAngle = startAngle + 359.99;\n  }\n\n  var start = polarToCartesian(centerX, centerY, radius, normalizedEndAngle);\n  var end = polarToCartesian(centerX, centerY, radius, startAngle);\n  var arcSweep = normalizedEndAngle - startAngle <= 180 ? '0' : '1';\n  var d = ['M', start.x.toFixed(POST_DECIMAL_DIGITS), start.y.toFixed(POST_DECIMAL_DIGITS), 'A', radius.toFixed(POST_DECIMAL_DIGITS), radius.toFixed(POST_DECIMAL_DIGITS), 0, arcSweep, 0, end.x.toFixed(POST_DECIMAL_DIGITS), end.y.toFixed(POST_DECIMAL_DIGITS)].join(' ');\n  return d;\n};\n\nexports.arcCommands = arcCommands;\n\nvar translateEndAngle = function translateEndAngle(startAngle, anglePer, value) {\n  return Math.min(360, Math.max(0, startAngle + anglePer * value));\n};\n\nexports.translateEndAngle = translateEndAngle;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/utils/graphics.js"],"names":["exports","__esModule","translateEndAngle","arcCommands","polarToCartesian","baseUnit","POST_DECIMAL_DIGITS","centerX","centerY","radius","angleInDegrees","angleInRadians","Math","PI","x","cos","y","sin","startAngle","endAngle","normalizedEndAngle","start","end","arcSweep","d","toFixed","join","anglePer","value","min","max"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,iBAAR,GAA4BF,OAAO,CAACG,WAAR,GAAsBH,OAAO,CAACI,gBAAR,GAA2BJ,OAAO,CAACK,QAAR,GAAmB,KAAK,CAArG;AACA,IAAIC,mBAAmB,GAAG,EAA1B;AACA,IAAID,QAAQ,GAAG,EAAf;AACAL,OAAO,CAACK,QAAR,GAAmBA,QAAnB;;AAEA,IAAID,gBAAgB,GAAG,SAASA,gBAAT,CAA0BG,OAA1B,EAAmCC,OAAnC,EAA4CC,MAA5C,EAAoDC,cAApD,EAAoE;AACzF,MAAIC,cAAc,GAAG,CAACD,cAAc,GAAG,EAAlB,IAAwBE,IAAI,CAACC,EAA7B,GAAkC,KAAvD;AACA,SAAO;AACLC,IAAAA,CAAC,EAAEP,OAAO,GAAGE,MAAM,GAAGG,IAAI,CAACG,GAAL,CAASJ,cAAT,CADjB;AAELK,IAAAA,CAAC,EAAER,OAAO,GAAGC,MAAM,GAAGG,IAAI,CAACK,GAAL,CAASN,cAAT;AAFjB,GAAP;AAID,CAND;;AAQAX,OAAO,CAACI,gBAAR,GAA2BA,gBAA3B;;AAEA,IAAID,WAAW,GAAG,SAASA,WAAT,CAAqBI,OAArB,EAA8BC,OAA9B,EAAuCC,MAAvC,EAA+CS,UAA/C,EAA2DC,QAA3D,EAAqE;AACrF;AACA,MAAIC,kBAAkB,GAAGD,QAAzB;;AAEA,MAAIA,QAAQ,GAAGD,UAAX,IAAyB,GAA7B,EAAkC;AAChCE,IAAAA,kBAAkB,GAAGF,UAAU,GAAG,MAAlC;AACD;;AAED,MAAIG,KAAK,GAAGjB,gBAAgB,CAACG,OAAD,EAAUC,OAAV,EAAmBC,MAAnB,EAA2BW,kBAA3B,CAA5B;AACA,MAAIE,GAAG,GAAGlB,gBAAgB,CAACG,OAAD,EAAUC,OAAV,EAAmBC,MAAnB,EAA2BS,UAA3B,CAA1B;AACA,MAAIK,QAAQ,GAAGH,kBAAkB,GAAGF,UAArB,IAAmC,GAAnC,GAAyC,GAAzC,GAA+C,GAA9D;AACA,MAAIM,CAAC,GAAG,CAAC,GAAD,EAAMH,KAAK,CAACP,CAAN,CAAQW,OAAR,CAAgBnB,mBAAhB,CAAN,EAA4Ce,KAAK,CAACL,CAAN,CAAQS,OAAR,CAAgBnB,mBAAhB,CAA5C,EAAkF,GAAlF,EAAuFG,MAAM,CAACgB,OAAP,CAAenB,mBAAf,CAAvF,EAA4HG,MAAM,CAACgB,OAAP,CAAenB,mBAAf,CAA5H,EAAiK,CAAjK,EAAoKiB,QAApK,EAA8K,CAA9K,EAAiLD,GAAG,CAACR,CAAJ,CAAMW,OAAN,CAAcnB,mBAAd,CAAjL,EAAqNgB,GAAG,CAACN,CAAJ,CAAMS,OAAN,CAAcnB,mBAAd,CAArN,EAAyPoB,IAAzP,CAA8P,GAA9P,CAAR;AACA,SAAOF,CAAP;AACD,CAbD;;AAeAxB,OAAO,CAACG,WAAR,GAAsBA,WAAtB;;AAEA,IAAID,iBAAiB,GAAG,SAASA,iBAAT,CAA2BgB,UAA3B,EAAuCS,QAAvC,EAAiDC,KAAjD,EAAwD;AAC9E,SAAOhB,IAAI,CAACiB,GAAL,CAAS,GAAT,EAAcjB,IAAI,CAACkB,GAAL,CAAS,CAAT,EAAYZ,UAAU,GAAGS,QAAQ,GAAGC,KAApC,CAAd,CAAP;AACD,CAFD;;AAIA5B,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.translateEndAngle = exports.arcCommands = exports.polarToCartesian = exports.baseUnit = void 0;\nvar POST_DECIMAL_DIGITS = 10;\nvar baseUnit = 24;\nexports.baseUnit = baseUnit;\n\nvar polarToCartesian = function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n  var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians)\n  };\n};\n\nexports.polarToCartesian = polarToCartesian;\n\nvar arcCommands = function arcCommands(centerX, centerY, radius, startAngle, endAngle) {\n  // handle that we can't draw a complete circle\n  var normalizedEndAngle = endAngle;\n\n  if (endAngle - startAngle >= 360) {\n    normalizedEndAngle = startAngle + 359.99;\n  }\n\n  var start = polarToCartesian(centerX, centerY, radius, normalizedEndAngle);\n  var end = polarToCartesian(centerX, centerY, radius, startAngle);\n  var arcSweep = normalizedEndAngle - startAngle <= 180 ? '0' : '1';\n  var d = ['M', start.x.toFixed(POST_DECIMAL_DIGITS), start.y.toFixed(POST_DECIMAL_DIGITS), 'A', radius.toFixed(POST_DECIMAL_DIGITS), radius.toFixed(POST_DECIMAL_DIGITS), 0, arcSweep, 0, end.x.toFixed(POST_DECIMAL_DIGITS), end.y.toFixed(POST_DECIMAL_DIGITS)].join(' ');\n  return d;\n};\n\nexports.arcCommands = arcCommands;\n\nvar translateEndAngle = function translateEndAngle(startAngle, anglePer, value) {\n  return Math.min(360, Math.max(0, startAngle + anglePer * value));\n};\n\nexports.translateEndAngle = translateEndAngle;"]},"metadata":{},"sourceType":"script"}