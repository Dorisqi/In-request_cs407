{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst metadata_1 = require(\"./metadata\");\n\nconst constants_1 = require(\"./constants\");\n\nvar PickResultType;\n\n(function (PickResultType) {\n  PickResultType[PickResultType[\"COMPLETE\"] = 0] = \"COMPLETE\";\n  PickResultType[PickResultType[\"QUEUE\"] = 1] = \"QUEUE\";\n  PickResultType[PickResultType[\"TRANSIENT_FAILURE\"] = 2] = \"TRANSIENT_FAILURE\";\n})(PickResultType = exports.PickResultType || (exports.PickResultType = {}));\n/**\n * A standard picker representing a load balancer in the TRANSIENT_FAILURE\n * state. Always responds to every pick request with an UNAVAILABLE status.\n */\n\n\nclass UnavailablePicker {\n  constructor(status) {\n    if (status !== undefined) {\n      this.status = status;\n    } else {\n      this.status = {\n        code: constants_1.Status.UNAVAILABLE,\n        details: 'No connection established',\n        metadata: new metadata_1.Metadata()\n      };\n    }\n  }\n\n  pick(pickArgs) {\n    return {\n      pickResultType: PickResultType.TRANSIENT_FAILURE,\n      subchannel: null,\n      status: this.status\n    };\n  }\n\n}\n\nexports.UnavailablePicker = UnavailablePicker;\n/**\n * A standard picker representing a load balancer in the IDLE or CONNECTING\n * state. Always responds to every pick request with a QUEUE pick result\n * indicating that the pick should be tried again with the next `Picker`. Also\n * reports back to the load balancer that a connection should be established\n * once any pick is attempted.\n */\n\nclass QueuePicker {\n  // Constructed with a load balancer. Calls exitIdle on it the first time pick is called\n  constructor(loadBalancer) {\n    this.loadBalancer = loadBalancer;\n    this.calledExitIdle = false;\n  }\n\n  pick(pickArgs) {\n    if (!this.calledExitIdle) {\n      process.nextTick(() => {\n        this.loadBalancer.exitIdle();\n      });\n      this.calledExitIdle = true;\n    }\n\n    return {\n      pickResultType: PickResultType.QUEUE,\n      subchannel: null,\n      status: null\n    };\n  }\n\n}\n\nexports.QueuePicker = QueuePicker;","map":{"version":3,"sources":["../../src/picker.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAmBA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAGA,IAAY,cAAZ;;AAAA,CAAA,UAAY,cAAZ,EAA0B;AACxB,EAAA,cAAA,CAAA,cAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,EAAA,cAAA,CAAA,cAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA,EAAA,cAAA,CAAA,cAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mBAAA;AACD,CAJD,EAAY,cAAc,GAAd,OAAA,CAAA,cAAA,KAAA,OAAA,CAAA,cAAA,GAAc,EAAd,CAAZ;AAoDA;;;;;;AAIA,MAAa,iBAAb,CAA8B;AAE5B,EAAA,WAAA,CAAY,MAAZ,EAAiC;AAC/B,QAAI,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAK,MAAL,GAAc,MAAd;AACD,KAFD,MAEO;AACL,WAAK,MAAL,GAAc;AACZ,QAAA,IAAI,EAAE,WAAA,CAAA,MAAA,CAAO,WADD;AAEZ,QAAA,OAAO,EAAE,2BAFG;AAGZ,QAAA,QAAQ,EAAE,IAAI,UAAA,CAAA,QAAJ;AAHE,OAAd;AAKD;AACF;;AACD,EAAA,IAAI,CAAC,QAAD,EAAmB;AACrB,WAAO;AACL,MAAA,cAAc,EAAE,cAAc,CAAC,iBAD1B;AAEL,MAAA,UAAU,EAAE,IAFP;AAGL,MAAA,MAAM,EAAE,KAAK;AAHR,KAAP;AAKD;;AAnB2B;;AAA9B,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAsBA;;;;;;;;AAOA,MAAa,WAAb,CAAwB;AAEtB;AACA,EAAA,WAAA,CAAoB,YAApB,EAA8C;AAA1B,SAAA,YAAA,GAAA,YAAA;AAFZ,SAAA,cAAA,GAAiB,KAAjB;AAE0C;;AAElD,EAAA,IAAI,CAAC,QAAD,EAAmB;AACrB,QAAI,CAAC,KAAK,cAAV,EAA0B;AACxB,MAAA,OAAO,CAAC,QAAR,CAAiB,MAAK;AACpB,aAAK,YAAL,CAAkB,QAAlB;AACD,OAFD;AAGA,WAAK,cAAL,GAAsB,IAAtB;AACD;;AACD,WAAO;AACL,MAAA,cAAc,EAAE,cAAc,CAAC,KAD1B;AAEL,MAAA,UAAU,EAAE,IAFP;AAGL,MAAA,MAAM,EAAE;AAHH,KAAP;AAKD;;AAjBqB;;AAAxB,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst metadata_1 = require(\"./metadata\");\nconst constants_1 = require(\"./constants\");\nvar PickResultType;\n(function (PickResultType) {\n    PickResultType[PickResultType[\"COMPLETE\"] = 0] = \"COMPLETE\";\n    PickResultType[PickResultType[\"QUEUE\"] = 1] = \"QUEUE\";\n    PickResultType[PickResultType[\"TRANSIENT_FAILURE\"] = 2] = \"TRANSIENT_FAILURE\";\n})(PickResultType = exports.PickResultType || (exports.PickResultType = {}));\n/**\n * A standard picker representing a load balancer in the TRANSIENT_FAILURE\n * state. Always responds to every pick request with an UNAVAILABLE status.\n */\nclass UnavailablePicker {\n    constructor(status) {\n        if (status !== undefined) {\n            this.status = status;\n        }\n        else {\n            this.status = {\n                code: constants_1.Status.UNAVAILABLE,\n                details: 'No connection established',\n                metadata: new metadata_1.Metadata(),\n            };\n        }\n    }\n    pick(pickArgs) {\n        return {\n            pickResultType: PickResultType.TRANSIENT_FAILURE,\n            subchannel: null,\n            status: this.status,\n        };\n    }\n}\nexports.UnavailablePicker = UnavailablePicker;\n/**\n * A standard picker representing a load balancer in the IDLE or CONNECTING\n * state. Always responds to every pick request with a QUEUE pick result\n * indicating that the pick should be tried again with the next `Picker`. Also\n * reports back to the load balancer that a connection should be established\n * once any pick is attempted.\n */\nclass QueuePicker {\n    // Constructed with a load balancer. Calls exitIdle on it the first time pick is called\n    constructor(loadBalancer) {\n        this.loadBalancer = loadBalancer;\n        this.calledExitIdle = false;\n    }\n    pick(pickArgs) {\n        if (!this.calledExitIdle) {\n            process.nextTick(() => {\n                this.loadBalancer.exitIdle();\n            });\n            this.calledExitIdle = true;\n        }\n        return {\n            pickResultType: PickResultType.QUEUE,\n            subchannel: null,\n            status: null,\n        };\n    }\n}\nexports.QueuePicker = QueuePicker;\n//# sourceMappingURL=picker.js.map"]},"metadata":{},"sourceType":"script"}