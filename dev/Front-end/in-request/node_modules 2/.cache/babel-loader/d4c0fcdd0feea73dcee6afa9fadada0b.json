{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { colorPropType, genericProps, getAvailableAtBadge } from '../../utils';\nexport var themeDoc = {\n  'worldMap.color': {\n    description: 'The color for each individual dot when a color is not passed as a prop',\n    type: 'string',\n    defaultValue: 'light-3'\n  },\n  'worldMap.continent.active': {\n    description: \"The size of the visual dots belonging to a continent when the\\ncontinent is being hovered.\",\n    type: 'string',\n    defaultValue: '8px'\n  },\n  'worldMap.continent.base': {\n    description: \"The size of the visual dots belonging to a continent that is\\nnot being hovered.\",\n    type: 'string',\n    defaultValue: '6px'\n  },\n  'worldMap.hover.color': {\n    description: 'The color for an individual dot when it is being hovered',\n    type: 'string',\n    defaultValue: 'light-4'\n  },\n  'worldMap.place.active': {\n    description: \"The size of a visual dot for an individual place in the map \\nwhen it is being hovered.\",\n    type: 'string',\n    defaultValue: '20px'\n  },\n  'worldMap.place.base': {\n    description: \"The size of the visual dot representing an individual place \\nin the map when it is not being hovered.\",\n    type: 'string',\n    defaultValue: '8px'\n  },\n  'worldMap.extend': {\n    description: 'Any additional style for the WorldMap.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n};\nexport var doc = function doc(WorldMap) {\n  var DocumentedWorldMap = describe(WorldMap).availableAt(getAvailableAtBadge('WorldMap')).description('A map of the world, or a continent.').usage(\"import { WorldMap } from 'grommet';\\n<WorldMap />\").intrinsicElement('svg');\n  DocumentedWorldMap.propTypes = _extends({}, genericProps, {\n    color: colorPropType.description('Default color'),\n    continents: PropTypes.arrayOf(PropTypes.shape({\n      color: colorPropType,\n      name: PropTypes.oneOf(['Africa', 'Asia', 'Australia', 'Europe', 'North America', 'South America']).isRequired,\n      onClick: PropTypes.func,\n      onHover: PropTypes.func\n    })).description('Continent details.'),\n    fill: PropTypes.oneOfType([PropTypes.oneOf(['horizontal', 'vertical']), PropTypes.bool]).description('Whether the width and/or height should fill the container.'),\n    onSelectPlace: PropTypes.func.description(\"Called when the user clicks on a place.\\n        It is passed the location.\"),\n    places: PropTypes.arrayOf(PropTypes.shape({\n      color: colorPropType,\n      name: PropTypes.string,\n      // for a11y aria-label\n      location: PropTypes.arrayOf(PropTypes.number).isRequired,\n      onClick: PropTypes.func,\n      onHover: PropTypes.func\n    })).description('Place details.'),\n    hoverColor: colorPropType.description('Color when hovering over places while selecting.')\n  });\n  return DocumentedWorldMap;\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/WorldMap/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","colorPropType","genericProps","getAvailableAtBadge","themeDoc","description","type","defaultValue","undefined","doc","WorldMap","DocumentedWorldMap","availableAt","usage","intrinsicElement","propTypes","color","continents","arrayOf","shape","name","oneOf","isRequired","onClick","func","onHover","fill","oneOfType","bool","onSelectPlace","places","string","location","number","hoverColor"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { colorPropType, genericProps, getAvailableAtBadge } from '../../utils';\nexport var themeDoc = {\n  'worldMap.color': {\n    description: 'The color for each individual dot when a color is not passed as a prop',\n    type: 'string',\n    defaultValue: 'light-3'\n  },\n  'worldMap.continent.active': {\n    description: \"The size of the visual dots belonging to a continent when the\\ncontinent is being hovered.\",\n    type: 'string',\n    defaultValue: '8px'\n  },\n  'worldMap.continent.base': {\n    description: \"The size of the visual dots belonging to a continent that is\\nnot being hovered.\",\n    type: 'string',\n    defaultValue: '6px'\n  },\n  'worldMap.hover.color': {\n    description: 'The color for an individual dot when it is being hovered',\n    type: 'string',\n    defaultValue: 'light-4'\n  },\n  'worldMap.place.active': {\n    description: \"The size of a visual dot for an individual place in the map \\nwhen it is being hovered.\",\n    type: 'string',\n    defaultValue: '20px'\n  },\n  'worldMap.place.base': {\n    description: \"The size of the visual dot representing an individual place \\nin the map when it is not being hovered.\",\n    type: 'string',\n    defaultValue: '8px'\n  },\n  'worldMap.extend': {\n    description: 'Any additional style for the WorldMap.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n};\nexport var doc = function doc(WorldMap) {\n  var DocumentedWorldMap = describe(WorldMap).availableAt(getAvailableAtBadge('WorldMap')).description('A map of the world, or a continent.').usage(\"import { WorldMap } from 'grommet';\\n<WorldMap />\").intrinsicElement('svg');\n  DocumentedWorldMap.propTypes = _extends({}, genericProps, {\n    color: colorPropType.description('Default color'),\n    continents: PropTypes.arrayOf(PropTypes.shape({\n      color: colorPropType,\n      name: PropTypes.oneOf(['Africa', 'Asia', 'Australia', 'Europe', 'North America', 'South America']).isRequired,\n      onClick: PropTypes.func,\n      onHover: PropTypes.func\n    })).description('Continent details.'),\n    fill: PropTypes.oneOfType([PropTypes.oneOf(['horizontal', 'vertical']), PropTypes.bool]).description('Whether the width and/or height should fill the container.'),\n    onSelectPlace: PropTypes.func.description(\"Called when the user clicks on a place.\\n        It is passed the location.\"),\n    places: PropTypes.arrayOf(PropTypes.shape({\n      color: colorPropType,\n      name: PropTypes.string,\n      // for a11y aria-label\n      location: PropTypes.arrayOf(PropTypes.number).isRequired,\n      onClick: PropTypes.func,\n      onHover: PropTypes.func\n    })).description('Place details.'),\n    hoverColor: colorPropType.description('Color when hovering over places while selecting.')\n  });\n  return DocumentedWorldMap;\n};"]},"metadata":{},"sourceType":"module"}