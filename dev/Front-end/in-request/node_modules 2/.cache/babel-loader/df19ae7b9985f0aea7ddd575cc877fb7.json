{"ast":null,"code":"\"use strict\"; // Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst gcpMetadata = require(\"gcp-metadata\");\n\nvar GCPEnv;\n\n(function (GCPEnv) {\n  GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\n  GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\n  GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\n  GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\n  GCPEnv[\"NONE\"] = \"NONE\";\n})(GCPEnv = exports.GCPEnv || (exports.GCPEnv = {}));\n\nlet envPromise;\n\nfunction clear() {\n  envPromise = undefined;\n}\n\nexports.clear = clear;\n\nasync function getEnv() {\n  if (envPromise) {\n    return envPromise;\n  }\n\n  envPromise = getEnvMemoized();\n  return envPromise;\n}\n\nexports.getEnv = getEnv;\n\nasync function getEnvMemoized() {\n  let env = GCPEnv.NONE;\n\n  if (isAppEngine()) {\n    env = GCPEnv.APP_ENGINE;\n  } else if (isCloudFunction()) {\n    env = GCPEnv.CLOUD_FUNCTIONS;\n  } else if (await isComputeEngine()) {\n    if (await isKubernetesEngine()) {\n      env = GCPEnv.KUBERNETES_ENGINE;\n    } else {\n      env = GCPEnv.COMPUTE_ENGINE;\n    }\n  } else {\n    env = GCPEnv.NONE;\n  }\n\n  return env;\n}\n\nfunction isAppEngine() {\n  return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n}\n\nfunction isCloudFunction() {\n  return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);\n}\n\nasync function isKubernetesEngine() {\n  try {\n    await gcpMetadata.instance('attributes/cluster-name');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nasync function isComputeEngine() {\n  return gcpMetadata.isAvailable();\n}","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/google-auth-library/build/src/auth/envDetect.js"],"names":["Object","defineProperty","exports","value","gcpMetadata","require","GCPEnv","envPromise","clear","undefined","getEnv","getEnvMemoized","env","NONE","isAppEngine","APP_ENGINE","isCloudFunction","CLOUD_FUNCTIONS","isComputeEngine","isKubernetesEngine","KUBERNETES_ENGINE","COMPUTE_ENGINE","process","GAE_SERVICE","GAE_MODULE_NAME","FUNCTION_NAME","FUNCTION_TARGET","instance","e","isAvailable"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AACA,IAAIC,MAAJ;;AACA,CAAC,UAAUA,MAAV,EAAkB;AACfA,EAAAA,MAAM,CAAC,YAAD,CAAN,GAAuB,YAAvB;AACAA,EAAAA,MAAM,CAAC,mBAAD,CAAN,GAA8B,mBAA9B;AACAA,EAAAA,MAAM,CAAC,iBAAD,CAAN,GAA4B,iBAA5B;AACAA,EAAAA,MAAM,CAAC,gBAAD,CAAN,GAA2B,gBAA3B;AACAA,EAAAA,MAAM,CAAC,MAAD,CAAN,GAAiB,MAAjB;AACH,CAND,EAMGA,MAAM,GAAGJ,OAAO,CAACI,MAAR,KAAmBJ,OAAO,CAACI,MAAR,GAAiB,EAApC,CANZ;;AAOA,IAAIC,UAAJ;;AACA,SAASC,KAAT,GAAiB;AACbD,EAAAA,UAAU,GAAGE,SAAb;AACH;;AACDP,OAAO,CAACM,KAAR,GAAgBA,KAAhB;;AACA,eAAeE,MAAf,GAAwB;AACpB,MAAIH,UAAJ,EAAgB;AACZ,WAAOA,UAAP;AACH;;AACDA,EAAAA,UAAU,GAAGI,cAAc,EAA3B;AACA,SAAOJ,UAAP;AACH;;AACDL,OAAO,CAACQ,MAAR,GAAiBA,MAAjB;;AACA,eAAeC,cAAf,GAAgC;AAC5B,MAAIC,GAAG,GAAGN,MAAM,CAACO,IAAjB;;AACA,MAAIC,WAAW,EAAf,EAAmB;AACfF,IAAAA,GAAG,GAAGN,MAAM,CAACS,UAAb;AACH,GAFD,MAGK,IAAIC,eAAe,EAAnB,EAAuB;AACxBJ,IAAAA,GAAG,GAAGN,MAAM,CAACW,eAAb;AACH,GAFI,MAGA,IAAI,MAAMC,eAAe,EAAzB,EAA6B;AAC9B,QAAI,MAAMC,kBAAkB,EAA5B,EAAgC;AAC5BP,MAAAA,GAAG,GAAGN,MAAM,CAACc,iBAAb;AACH,KAFD,MAGK;AACDR,MAAAA,GAAG,GAAGN,MAAM,CAACe,cAAb;AACH;AACJ,GAPI,MAQA;AACDT,IAAAA,GAAG,GAAGN,MAAM,CAACO,IAAb;AACH;;AACD,SAAOD,GAAP;AACH;;AACD,SAASE,WAAT,GAAuB;AACnB,SAAO,CAAC,EAAEQ,OAAO,CAACV,GAAR,CAAYW,WAAZ,IAA2BD,OAAO,CAACV,GAAR,CAAYY,eAAzC,CAAR;AACH;;AACD,SAASR,eAAT,GAA2B;AACvB,SAAO,CAAC,EAAEM,OAAO,CAACV,GAAR,CAAYa,aAAZ,IAA6BH,OAAO,CAACV,GAAR,CAAYc,eAA3C,CAAR;AACH;;AACD,eAAeP,kBAAf,GAAoC;AAChC,MAAI;AACA,UAAMf,WAAW,CAACuB,QAAZ,CAAqB,yBAArB,CAAN;AACA,WAAO,IAAP;AACH,GAHD,CAIA,OAAOC,CAAP,EAAU;AACN,WAAO,KAAP;AACH;AACJ;;AACD,eAAeV,eAAf,GAAiC;AAC7B,SAAOd,WAAW,CAACyB,WAAZ,EAAP;AACH","sourcesContent":["\"use strict\";\n// Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gcpMetadata = require(\"gcp-metadata\");\nvar GCPEnv;\n(function (GCPEnv) {\n    GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\n    GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\n    GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\n    GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\n    GCPEnv[\"NONE\"] = \"NONE\";\n})(GCPEnv = exports.GCPEnv || (exports.GCPEnv = {}));\nlet envPromise;\nfunction clear() {\n    envPromise = undefined;\n}\nexports.clear = clear;\nasync function getEnv() {\n    if (envPromise) {\n        return envPromise;\n    }\n    envPromise = getEnvMemoized();\n    return envPromise;\n}\nexports.getEnv = getEnv;\nasync function getEnvMemoized() {\n    let env = GCPEnv.NONE;\n    if (isAppEngine()) {\n        env = GCPEnv.APP_ENGINE;\n    }\n    else if (isCloudFunction()) {\n        env = GCPEnv.CLOUD_FUNCTIONS;\n    }\n    else if (await isComputeEngine()) {\n        if (await isKubernetesEngine()) {\n            env = GCPEnv.KUBERNETES_ENGINE;\n        }\n        else {\n            env = GCPEnv.COMPUTE_ENGINE;\n        }\n    }\n    else {\n        env = GCPEnv.NONE;\n    }\n    return env;\n}\nfunction isAppEngine() {\n    return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n}\nfunction isCloudFunction() {\n    return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);\n}\nasync function isKubernetesEngine() {\n    try {\n        await gcpMetadata.instance('attributes/cluster-name');\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n}\nasync function isComputeEngine() {\n    return gcpMetadata.isAvailable();\n}\n//# sourceMappingURL=envDetect.js.map"]},"metadata":{},"sourceType":"script"}