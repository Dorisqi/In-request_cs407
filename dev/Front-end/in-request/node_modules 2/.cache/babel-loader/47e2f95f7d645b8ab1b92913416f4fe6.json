{"ast":null,"code":"/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar util = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar jwt = require(\"jsonwebtoken\");\n\nvar api_request_1 = require(\"../utils/api-request\"); // Audience to use for Firebase Auth Custom tokens\n\n\nvar FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\nexports.ALGORITHM_RS256 = 'RS256'; // URL containing the public keys for the Google certs (whose private keys are used to sign Firebase\n// Auth ID tokens)\n\nvar CLIENT_CERT_URL = 'https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com'; // URL containing the public keys for Firebase session cookies. This will be updated to a different URL soon.\n\nvar SESSION_COOKIE_CERT_URL = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/publicKeys';\n/** User facing token information related to the Firebase ID token. */\n\nexports.ID_TOKEN_INFO = {\n  url: 'https://firebase.google.com/docs/auth/admin/verify-id-tokens',\n  verifyApiName: 'verifyIdToken()',\n  jwtName: 'Firebase ID token',\n  shortName: 'ID token',\n  expiredErrorCode: error_1.AuthClientErrorCode.ID_TOKEN_EXPIRED\n};\n/** User facing token information related to the Firebase session cookie. */\n\nexports.SESSION_COOKIE_INFO = {\n  url: 'https://firebase.google.com/docs/auth/admin/manage-cookies',\n  verifyApiName: 'verifySessionCookie()',\n  jwtName: 'Firebase session cookie',\n  shortName: 'session cookie',\n  expiredErrorCode: error_1.AuthClientErrorCode.SESSION_COOKIE_EXPIRED\n};\n/**\n * Class for verifying general purpose Firebase JWTs. This verifies ID tokens and session cookies.\n */\n\nvar FirebaseTokenVerifier =\n/** @class */\nfunction () {\n  function FirebaseTokenVerifier(clientCertUrl, algorithm, issuer, tokenInfo, app) {\n    this.clientCertUrl = clientCertUrl;\n    this.algorithm = algorithm;\n    this.issuer = issuer;\n    this.tokenInfo = tokenInfo;\n    this.app = app;\n\n    if (!validator.isURL(clientCertUrl)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The provided public client certificate URL is an invalid URL.\");\n    } else if (!validator.isNonEmptyString(algorithm)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The provided JWT algorithm is an empty string.\");\n    } else if (!validator.isURL(issuer)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The provided JWT issuer is an invalid URL.\");\n    } else if (!validator.isNonNullObject(tokenInfo)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The provided JWT information is not an object or null.\");\n    } else if (!validator.isURL(tokenInfo.url)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The provided JWT verification documentation URL is invalid.\");\n    } else if (!validator.isNonEmptyString(tokenInfo.verifyApiName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The JWT verify API name must be a non-empty string.\");\n    } else if (!validator.isNonEmptyString(tokenInfo.jwtName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The JWT public full name must be a non-empty string.\");\n    } else if (!validator.isNonEmptyString(tokenInfo.shortName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The JWT public short name must be a non-empty string.\");\n    } else if (!validator.isNonNullObject(tokenInfo.expiredErrorCode) || !('code' in tokenInfo.expiredErrorCode)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The JWT expiration error code must be a non-null ErrorInfo object.\");\n    }\n\n    this.shortNameArticle = tokenInfo.shortName.charAt(0).match(/[aeiou]/i) ? 'an' : 'a'; // For backward compatibility, the project ID is validated in the verification call.\n  }\n  /**\n   * Verifies the format and signature of a Firebase Auth JWT token.\n   *\n   * @param {string} jwtToken The Firebase Auth JWT token to verify.\n   * @return {Promise<DecodedIdToken>} A promise fulfilled with the decoded claims of the Firebase Auth ID\n   *                           token.\n   */\n\n\n  FirebaseTokenVerifier.prototype.verifyJWT = function (jwtToken) {\n    var _this = this;\n\n    if (!validator.isString(jwtToken)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"First argument to \" + this.tokenInfo.verifyApiName + \" must be a \" + this.tokenInfo.jwtName + \" string.\");\n    }\n\n    return util.findProjectId(this.app).then(function (projectId) {\n      return _this.verifyJWTWithProjectId(jwtToken, projectId);\n    });\n  };\n\n  FirebaseTokenVerifier.prototype.verifyJWTWithProjectId = function (jwtToken, projectId) {\n    var _this = this;\n\n    if (!validator.isNonEmptyString(projectId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, \"Must initialize app with a cert credential or set your Firebase project ID as the \" + (\"GOOGLE_CLOUD_PROJECT environment variable to call \" + this.tokenInfo.verifyApiName + \".\"));\n    }\n\n    var fullDecodedToken = jwt.decode(jwtToken, {\n      complete: true\n    });\n    var header = fullDecodedToken && fullDecodedToken.header;\n    var payload = fullDecodedToken && fullDecodedToken.payload;\n    var projectIdMatchMessage = \" Make sure the \" + this.tokenInfo.shortName + \" comes from the same \" + \"Firebase project as the service account used to authenticate this SDK.\";\n    var verifyJwtTokenDocsMessage = \" See \" + this.tokenInfo.url + \" \" + (\"for details on how to retrieve \" + this.shortNameArticle + \" \" + this.tokenInfo.shortName + \".\");\n    var errorMessage;\n\n    if (!fullDecodedToken) {\n      errorMessage = \"Decoding \" + this.tokenInfo.jwtName + \" failed. Make sure you passed the entire string JWT \" + (\"which represents \" + this.shortNameArticle + \" \" + this.tokenInfo.shortName + \".\") + verifyJwtTokenDocsMessage;\n    } else if (typeof header.kid === 'undefined') {\n      var isCustomToken = payload.aud === FIREBASE_AUDIENCE;\n      var isLegacyCustomToken = header.alg === 'HS256' && payload.v === 0 && 'd' in payload && 'uid' in payload.d;\n\n      if (isCustomToken) {\n        errorMessage = this.tokenInfo.verifyApiName + \" expects \" + this.shortNameArticle + \" \" + (this.tokenInfo.shortName + \", but was given a custom token.\");\n      } else if (isLegacyCustomToken) {\n        errorMessage = this.tokenInfo.verifyApiName + \" expects \" + this.shortNameArticle + \" \" + (this.tokenInfo.shortName + \", but was given a legacy custom token.\");\n      } else {\n        errorMessage = 'Firebase ID token has no \"kid\" claim.';\n      }\n\n      errorMessage += verifyJwtTokenDocsMessage;\n    } else if (header.alg !== this.algorithm) {\n      errorMessage = this.tokenInfo.jwtName + \" has incorrect algorithm. Expected \\\"\" + this.algorithm + \"\\\" but got \" + \"\\\"\" + header.alg + \"\\\".\" + verifyJwtTokenDocsMessage;\n    } else if (payload.aud !== projectId) {\n      errorMessage = this.tokenInfo.jwtName + \" has incorrect \\\"aud\\\" (audience) claim. Expected \\\"\" + projectId + \"\\\" but got \\\"\" + payload.aud + \"\\\".\" + projectIdMatchMessage + verifyJwtTokenDocsMessage;\n    } else if (payload.iss !== this.issuer + projectId) {\n      errorMessage = this.tokenInfo.jwtName + \" has incorrect \\\"iss\\\" (issuer) claim. Expected \" + (\"\\\"\" + this.issuer + \"\\\"\") + projectId + \"\\\" but got \\\"\" + payload.iss + \"\\\".\" + projectIdMatchMessage + verifyJwtTokenDocsMessage;\n    } else if (typeof payload.sub !== 'string') {\n      errorMessage = this.tokenInfo.jwtName + \" has no \\\"sub\\\" (subject) claim.\" + verifyJwtTokenDocsMessage;\n    } else if (payload.sub === '') {\n      errorMessage = this.tokenInfo.jwtName + \" has an empty string \\\"sub\\\" (subject) claim.\" + verifyJwtTokenDocsMessage;\n    } else if (payload.sub.length > 128) {\n      errorMessage = this.tokenInfo.jwtName + \" has \\\"sub\\\" (subject) claim longer than 128 characters.\" + verifyJwtTokenDocsMessage;\n    }\n\n    if (errorMessage) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage));\n    }\n\n    return this.fetchPublicKeys().then(function (publicKeys) {\n      if (!publicKeys.hasOwnProperty(header.kid)) {\n        return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, _this.tokenInfo.jwtName + \" has \\\"kid\\\" claim which does not correspond to a known public key. \" + (\"Most likely the \" + _this.tokenInfo.shortName + \" is expired, so get a fresh token from your \") + \"client app and try again.\"));\n      } else {\n        return _this.verifyJwtSignatureWithKey(jwtToken, publicKeys[header.kid]);\n      }\n    });\n  };\n  /**\n   * Verifies the JWT signature using the provided public key.\n   * @param {string} jwtToken The JWT token to verify.\n   * @param {string} publicKey The public key certificate.\n   * @return {Promise<DecodedIdToken>} A promise that resolves with the decoded JWT claims on successful\n   *     verification.\n   */\n\n\n  FirebaseTokenVerifier.prototype.verifyJwtSignatureWithKey = function (jwtToken, publicKey) {\n    var _this = this;\n\n    var verifyJwtTokenDocsMessage = \" See \" + this.tokenInfo.url + \" \" + (\"for details on how to retrieve \" + this.shortNameArticle + \" \" + this.tokenInfo.shortName + \".\");\n    return new Promise(function (resolve, reject) {\n      jwt.verify(jwtToken, publicKey, {\n        algorithms: [_this.algorithm]\n      }, function (error, decodedToken) {\n        if (error) {\n          if (error.name === 'TokenExpiredError') {\n            var errorMessage = _this.tokenInfo.jwtName + \" has expired. Get a fresh \" + _this.tokenInfo.shortName + (\" from your client app and try again (auth/\" + _this.tokenInfo.expiredErrorCode.code + \").\") + verifyJwtTokenDocsMessage;\n            return reject(new error_1.FirebaseAuthError(_this.tokenInfo.expiredErrorCode, errorMessage));\n          } else if (error.name === 'JsonWebTokenError') {\n            var errorMessage = _this.tokenInfo.jwtName + \" has invalid signature.\" + verifyJwtTokenDocsMessage;\n            return reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage));\n          }\n\n          return reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, error.message));\n        } else {\n          // TODO(rsgowman): I think the typing on jwt.verify is wrong. It claims that this can be either a string or an\n          // object, but the code always seems to call it as an object. Investigate and upstream typing changes if this\n          // is actually correct.\n          if (typeof decodedToken === 'string') {\n            return reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, \"Unexpected decodedToken. Expected an object but got a string: '\" + decodedToken + \"'\"));\n          } else {\n            var decodedIdToken = decodedToken;\n            decodedIdToken.uid = decodedIdToken.sub;\n            resolve(decodedIdToken);\n          }\n        }\n      });\n    });\n  };\n  /**\n   * Fetches the public keys for the Google certs.\n   *\n   * @return {Promise<object>} A promise fulfilled with public keys for the Google certs.\n   */\n\n\n  FirebaseTokenVerifier.prototype.fetchPublicKeys = function () {\n    var _this = this;\n\n    var publicKeysExist = typeof this.publicKeys !== 'undefined';\n    var publicKeysExpiredExists = typeof this.publicKeysExpireAt !== 'undefined';\n    var publicKeysStillValid = publicKeysExpiredExists && Date.now() < this.publicKeysExpireAt;\n\n    if (publicKeysExist && publicKeysStillValid) {\n      return Promise.resolve(this.publicKeys);\n    }\n\n    var client = new api_request_1.HttpClient();\n    var request = {\n      method: 'GET',\n      url: this.clientCertUrl,\n      httpAgent: this.app.options.httpAgent\n    };\n    return client.send(request).then(function (resp) {\n      if (!resp.isJson() || resp.data.error) {\n        // Treat all non-json messages and messages with an 'error' field as\n        // error responses.\n        throw new api_request_1.HttpError(resp);\n      }\n\n      if (resp.headers.hasOwnProperty('cache-control')) {\n        var cacheControlHeader = resp.headers['cache-control'];\n        var parts = cacheControlHeader.split(',');\n        parts.forEach(function (part) {\n          var subParts = part.trim().split('=');\n\n          if (subParts[0] === 'max-age') {\n            var maxAge = +subParts[1];\n            _this.publicKeysExpireAt = Date.now() + maxAge * 1000;\n          }\n        });\n      }\n\n      _this.publicKeys = resp.data;\n      return resp.data;\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        var errorMessage = 'Error fetching public keys for Google certs: ';\n        var resp = err.response;\n\n        if (resp.isJson() && resp.data.error) {\n          errorMessage += \"\" + resp.data.error;\n\n          if (resp.data.error_description) {\n            errorMessage += ' (' + resp.data.error_description + ')';\n          }\n        } else {\n          errorMessage += \"\" + resp.text;\n        }\n\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, errorMessage);\n      }\n\n      throw err;\n    });\n  };\n\n  return FirebaseTokenVerifier;\n}();\n\nexports.FirebaseTokenVerifier = FirebaseTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase ID tokens.\n *\n * @param {FirebaseApp} app Firebase app instance.\n * @return {FirebaseTokenVerifier}\n */\n\nfunction createIdTokenVerifier(app) {\n  return new FirebaseTokenVerifier(CLIENT_CERT_URL, exports.ALGORITHM_RS256, 'https://securetoken.google.com/', exports.ID_TOKEN_INFO, app);\n}\n\nexports.createIdTokenVerifier = createIdTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase session cookies.\n *\n * @param {FirebaseApp} app Firebase app instance.\n * @return {FirebaseTokenVerifier}\n */\n\nfunction createSessionCookieVerifier(app) {\n  return new FirebaseTokenVerifier(SESSION_COOKIE_CERT_URL, exports.ALGORITHM_RS256, 'https://session.firebase.google.com/', exports.SESSION_COOKIE_INFO, app);\n}\n\nexports.createSessionCookieVerifier = createSessionCookieVerifier;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/firebase-admin/lib/auth/token-verifier.js"],"names":["Object","defineProperty","exports","value","error_1","require","util","validator","jwt","api_request_1","FIREBASE_AUDIENCE","ALGORITHM_RS256","CLIENT_CERT_URL","SESSION_COOKIE_CERT_URL","ID_TOKEN_INFO","url","verifyApiName","jwtName","shortName","expiredErrorCode","AuthClientErrorCode","ID_TOKEN_EXPIRED","SESSION_COOKIE_INFO","SESSION_COOKIE_EXPIRED","FirebaseTokenVerifier","clientCertUrl","algorithm","issuer","tokenInfo","app","isURL","FirebaseAuthError","INVALID_ARGUMENT","isNonEmptyString","isNonNullObject","shortNameArticle","charAt","match","prototype","verifyJWT","jwtToken","_this","isString","findProjectId","then","projectId","verifyJWTWithProjectId","INVALID_CREDENTIAL","fullDecodedToken","decode","complete","header","payload","projectIdMatchMessage","verifyJwtTokenDocsMessage","errorMessage","kid","isCustomToken","aud","isLegacyCustomToken","alg","v","d","iss","sub","length","Promise","reject","fetchPublicKeys","publicKeys","hasOwnProperty","verifyJwtSignatureWithKey","publicKey","resolve","verify","algorithms","error","decodedToken","name","code","message","INTERNAL_ERROR","decodedIdToken","uid","publicKeysExist","publicKeysExpiredExists","publicKeysExpireAt","publicKeysStillValid","Date","now","client","HttpClient","request","method","httpAgent","options","send","resp","isJson","data","HttpError","headers","cacheControlHeader","parts","split","forEach","part","subParts","trim","maxAge","catch","err","response","error_description","text","createIdTokenVerifier","createSessionCookieVerifier"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar error_1 = require(\"../utils/error\");\nvar util = require(\"../utils/index\");\nvar validator = require(\"../utils/validator\");\nvar jwt = require(\"jsonwebtoken\");\nvar api_request_1 = require(\"../utils/api-request\");\n// Audience to use for Firebase Auth Custom tokens\nvar FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\nexports.ALGORITHM_RS256 = 'RS256';\n// URL containing the public keys for the Google certs (whose private keys are used to sign Firebase\n// Auth ID tokens)\nvar CLIENT_CERT_URL = 'https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com';\n// URL containing the public keys for Firebase session cookies. This will be updated to a different URL soon.\nvar SESSION_COOKIE_CERT_URL = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/publicKeys';\n/** User facing token information related to the Firebase ID token. */\nexports.ID_TOKEN_INFO = {\n    url: 'https://firebase.google.com/docs/auth/admin/verify-id-tokens',\n    verifyApiName: 'verifyIdToken()',\n    jwtName: 'Firebase ID token',\n    shortName: 'ID token',\n    expiredErrorCode: error_1.AuthClientErrorCode.ID_TOKEN_EXPIRED,\n};\n/** User facing token information related to the Firebase session cookie. */\nexports.SESSION_COOKIE_INFO = {\n    url: 'https://firebase.google.com/docs/auth/admin/manage-cookies',\n    verifyApiName: 'verifySessionCookie()',\n    jwtName: 'Firebase session cookie',\n    shortName: 'session cookie',\n    expiredErrorCode: error_1.AuthClientErrorCode.SESSION_COOKIE_EXPIRED,\n};\n/**\n * Class for verifying general purpose Firebase JWTs. This verifies ID tokens and session cookies.\n */\nvar FirebaseTokenVerifier = /** @class */ (function () {\n    function FirebaseTokenVerifier(clientCertUrl, algorithm, issuer, tokenInfo, app) {\n        this.clientCertUrl = clientCertUrl;\n        this.algorithm = algorithm;\n        this.issuer = issuer;\n        this.tokenInfo = tokenInfo;\n        this.app = app;\n        if (!validator.isURL(clientCertUrl)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The provided public client certificate URL is an invalid URL.\");\n        }\n        else if (!validator.isNonEmptyString(algorithm)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The provided JWT algorithm is an empty string.\");\n        }\n        else if (!validator.isURL(issuer)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The provided JWT issuer is an invalid URL.\");\n        }\n        else if (!validator.isNonNullObject(tokenInfo)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The provided JWT information is not an object or null.\");\n        }\n        else if (!validator.isURL(tokenInfo.url)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The provided JWT verification documentation URL is invalid.\");\n        }\n        else if (!validator.isNonEmptyString(tokenInfo.verifyApiName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The JWT verify API name must be a non-empty string.\");\n        }\n        else if (!validator.isNonEmptyString(tokenInfo.jwtName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The JWT public full name must be a non-empty string.\");\n        }\n        else if (!validator.isNonEmptyString(tokenInfo.shortName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The JWT public short name must be a non-empty string.\");\n        }\n        else if (!validator.isNonNullObject(tokenInfo.expiredErrorCode) || !('code' in tokenInfo.expiredErrorCode)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"The JWT expiration error code must be a non-null ErrorInfo object.\");\n        }\n        this.shortNameArticle = tokenInfo.shortName.charAt(0).match(/[aeiou]/i) ? 'an' : 'a';\n        // For backward compatibility, the project ID is validated in the verification call.\n    }\n    /**\n     * Verifies the format and signature of a Firebase Auth JWT token.\n     *\n     * @param {string} jwtToken The Firebase Auth JWT token to verify.\n     * @return {Promise<DecodedIdToken>} A promise fulfilled with the decoded claims of the Firebase Auth ID\n     *                           token.\n     */\n    FirebaseTokenVerifier.prototype.verifyJWT = function (jwtToken) {\n        var _this = this;\n        if (!validator.isString(jwtToken)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"First argument to \" + this.tokenInfo.verifyApiName + \" must be a \" + this.tokenInfo.jwtName + \" string.\");\n        }\n        return util.findProjectId(this.app)\n            .then(function (projectId) {\n            return _this.verifyJWTWithProjectId(jwtToken, projectId);\n        });\n    };\n    FirebaseTokenVerifier.prototype.verifyJWTWithProjectId = function (jwtToken, projectId) {\n        var _this = this;\n        if (!validator.isNonEmptyString(projectId)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, \"Must initialize app with a cert credential or set your Firebase project ID as the \" +\n                (\"GOOGLE_CLOUD_PROJECT environment variable to call \" + this.tokenInfo.verifyApiName + \".\"));\n        }\n        var fullDecodedToken = jwt.decode(jwtToken, {\n            complete: true,\n        });\n        var header = fullDecodedToken && fullDecodedToken.header;\n        var payload = fullDecodedToken && fullDecodedToken.payload;\n        var projectIdMatchMessage = \" Make sure the \" + this.tokenInfo.shortName + \" comes from the same \" +\n            \"Firebase project as the service account used to authenticate this SDK.\";\n        var verifyJwtTokenDocsMessage = \" See \" + this.tokenInfo.url + \" \" +\n            (\"for details on how to retrieve \" + this.shortNameArticle + \" \" + this.tokenInfo.shortName + \".\");\n        var errorMessage;\n        if (!fullDecodedToken) {\n            errorMessage = \"Decoding \" + this.tokenInfo.jwtName + \" failed. Make sure you passed the entire string JWT \" +\n                (\"which represents \" + this.shortNameArticle + \" \" + this.tokenInfo.shortName + \".\") + verifyJwtTokenDocsMessage;\n        }\n        else if (typeof header.kid === 'undefined') {\n            var isCustomToken = (payload.aud === FIREBASE_AUDIENCE);\n            var isLegacyCustomToken = (header.alg === 'HS256' && payload.v === 0 && 'd' in payload && 'uid' in payload.d);\n            if (isCustomToken) {\n                errorMessage = this.tokenInfo.verifyApiName + \" expects \" + this.shortNameArticle + \" \" +\n                    (this.tokenInfo.shortName + \", but was given a custom token.\");\n            }\n            else if (isLegacyCustomToken) {\n                errorMessage = this.tokenInfo.verifyApiName + \" expects \" + this.shortNameArticle + \" \" +\n                    (this.tokenInfo.shortName + \", but was given a legacy custom token.\");\n            }\n            else {\n                errorMessage = 'Firebase ID token has no \"kid\" claim.';\n            }\n            errorMessage += verifyJwtTokenDocsMessage;\n        }\n        else if (header.alg !== this.algorithm) {\n            errorMessage = this.tokenInfo.jwtName + \" has incorrect algorithm. Expected \\\"\" + this.algorithm + \"\\\" but got \" +\n                \"\\\"\" + header.alg + \"\\\".\" + verifyJwtTokenDocsMessage;\n        }\n        else if (payload.aud !== projectId) {\n            errorMessage = this.tokenInfo.jwtName + \" has incorrect \\\"aud\\\" (audience) claim. Expected \\\"\" +\n                projectId + \"\\\" but got \\\"\" + payload.aud + \"\\\".\" + projectIdMatchMessage +\n                verifyJwtTokenDocsMessage;\n        }\n        else if (payload.iss !== this.issuer + projectId) {\n            errorMessage = this.tokenInfo.jwtName + \" has incorrect \\\"iss\\\" (issuer) claim. Expected \" +\n                (\"\\\"\" + this.issuer + \"\\\"\") + projectId + \"\\\" but got \\\"\" +\n                payload.iss + \"\\\".\" + projectIdMatchMessage + verifyJwtTokenDocsMessage;\n        }\n        else if (typeof payload.sub !== 'string') {\n            errorMessage = this.tokenInfo.jwtName + \" has no \\\"sub\\\" (subject) claim.\" + verifyJwtTokenDocsMessage;\n        }\n        else if (payload.sub === '') {\n            errorMessage = this.tokenInfo.jwtName + \" has an empty string \\\"sub\\\" (subject) claim.\" + verifyJwtTokenDocsMessage;\n        }\n        else if (payload.sub.length > 128) {\n            errorMessage = this.tokenInfo.jwtName + \" has \\\"sub\\\" (subject) claim longer than 128 characters.\" +\n                verifyJwtTokenDocsMessage;\n        }\n        if (errorMessage) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage));\n        }\n        return this.fetchPublicKeys().then(function (publicKeys) {\n            if (!publicKeys.hasOwnProperty(header.kid)) {\n                return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, _this.tokenInfo.jwtName + \" has \\\"kid\\\" claim which does not correspond to a known public key. \" +\n                    (\"Most likely the \" + _this.tokenInfo.shortName + \" is expired, so get a fresh token from your \") +\n                    \"client app and try again.\"));\n            }\n            else {\n                return _this.verifyJwtSignatureWithKey(jwtToken, publicKeys[header.kid]);\n            }\n        });\n    };\n    /**\n     * Verifies the JWT signature using the provided public key.\n     * @param {string} jwtToken The JWT token to verify.\n     * @param {string} publicKey The public key certificate.\n     * @return {Promise<DecodedIdToken>} A promise that resolves with the decoded JWT claims on successful\n     *     verification.\n     */\n    FirebaseTokenVerifier.prototype.verifyJwtSignatureWithKey = function (jwtToken, publicKey) {\n        var _this = this;\n        var verifyJwtTokenDocsMessage = \" See \" + this.tokenInfo.url + \" \" +\n            (\"for details on how to retrieve \" + this.shortNameArticle + \" \" + this.tokenInfo.shortName + \".\");\n        return new Promise(function (resolve, reject) {\n            jwt.verify(jwtToken, publicKey, {\n                algorithms: [_this.algorithm],\n            }, function (error, decodedToken) {\n                if (error) {\n                    if (error.name === 'TokenExpiredError') {\n                        var errorMessage = _this.tokenInfo.jwtName + \" has expired. Get a fresh \" + _this.tokenInfo.shortName +\n                            (\" from your client app and try again (auth/\" + _this.tokenInfo.expiredErrorCode.code + \").\") +\n                            verifyJwtTokenDocsMessage;\n                        return reject(new error_1.FirebaseAuthError(_this.tokenInfo.expiredErrorCode, errorMessage));\n                    }\n                    else if (error.name === 'JsonWebTokenError') {\n                        var errorMessage = _this.tokenInfo.jwtName + \" has invalid signature.\" + verifyJwtTokenDocsMessage;\n                        return reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage));\n                    }\n                    return reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, error.message));\n                }\n                else {\n                    // TODO(rsgowman): I think the typing on jwt.verify is wrong. It claims that this can be either a string or an\n                    // object, but the code always seems to call it as an object. Investigate and upstream typing changes if this\n                    // is actually correct.\n                    if (typeof decodedToken === 'string') {\n                        return reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, \"Unexpected decodedToken. Expected an object but got a string: '\" + decodedToken + \"'\"));\n                    }\n                    else {\n                        var decodedIdToken = decodedToken;\n                        decodedIdToken.uid = decodedIdToken.sub;\n                        resolve(decodedIdToken);\n                    }\n                }\n            });\n        });\n    };\n    /**\n     * Fetches the public keys for the Google certs.\n     *\n     * @return {Promise<object>} A promise fulfilled with public keys for the Google certs.\n     */\n    FirebaseTokenVerifier.prototype.fetchPublicKeys = function () {\n        var _this = this;\n        var publicKeysExist = (typeof this.publicKeys !== 'undefined');\n        var publicKeysExpiredExists = (typeof this.publicKeysExpireAt !== 'undefined');\n        var publicKeysStillValid = (publicKeysExpiredExists && Date.now() < this.publicKeysExpireAt);\n        if (publicKeysExist && publicKeysStillValid) {\n            return Promise.resolve(this.publicKeys);\n        }\n        var client = new api_request_1.HttpClient();\n        var request = {\n            method: 'GET',\n            url: this.clientCertUrl,\n            httpAgent: this.app.options.httpAgent,\n        };\n        return client.send(request).then(function (resp) {\n            if (!resp.isJson() || resp.data.error) {\n                // Treat all non-json messages and messages with an 'error' field as\n                // error responses.\n                throw new api_request_1.HttpError(resp);\n            }\n            if (resp.headers.hasOwnProperty('cache-control')) {\n                var cacheControlHeader = resp.headers['cache-control'];\n                var parts = cacheControlHeader.split(',');\n                parts.forEach(function (part) {\n                    var subParts = part.trim().split('=');\n                    if (subParts[0] === 'max-age') {\n                        var maxAge = +subParts[1];\n                        _this.publicKeysExpireAt = Date.now() + (maxAge * 1000);\n                    }\n                });\n            }\n            _this.publicKeys = resp.data;\n            return resp.data;\n        }).catch(function (err) {\n            if (err instanceof api_request_1.HttpError) {\n                var errorMessage = 'Error fetching public keys for Google certs: ';\n                var resp = err.response;\n                if (resp.isJson() && resp.data.error) {\n                    errorMessage += \"\" + resp.data.error;\n                    if (resp.data.error_description) {\n                        errorMessage += ' (' + resp.data.error_description + ')';\n                    }\n                }\n                else {\n                    errorMessage += \"\" + resp.text;\n                }\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, errorMessage);\n            }\n            throw err;\n        });\n    };\n    return FirebaseTokenVerifier;\n}());\nexports.FirebaseTokenVerifier = FirebaseTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase ID tokens.\n *\n * @param {FirebaseApp} app Firebase app instance.\n * @return {FirebaseTokenVerifier}\n */\nfunction createIdTokenVerifier(app) {\n    return new FirebaseTokenVerifier(CLIENT_CERT_URL, exports.ALGORITHM_RS256, 'https://securetoken.google.com/', exports.ID_TOKEN_INFO, app);\n}\nexports.createIdTokenVerifier = createIdTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase session cookies.\n *\n * @param {FirebaseApp} app Firebase app instance.\n * @return {FirebaseTokenVerifier}\n */\nfunction createSessionCookieVerifier(app) {\n    return new FirebaseTokenVerifier(SESSION_COOKIE_CERT_URL, exports.ALGORITHM_RS256, 'https://session.firebase.google.com/', exports.SESSION_COOKIE_INFO, app);\n}\nexports.createSessionCookieVerifier = createSessionCookieVerifier;\n"]},"metadata":{},"sourceType":"script"}