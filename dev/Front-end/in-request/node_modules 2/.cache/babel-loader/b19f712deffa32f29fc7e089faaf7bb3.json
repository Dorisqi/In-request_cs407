{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst client_1 = require(\"./client\");\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */\n\n\nconst requesterFuncs = {\n  unary: client_1.Client.prototype.makeUnaryRequest,\n  server_stream: client_1.Client.prototype.makeServerStreamRequest,\n  client_stream: client_1.Client.prototype.makeClientStreamRequest,\n  bidi: client_1.Client.prototype.makeBidiStreamRequest\n};\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @param methods An object mapping method names to\n *     method attributes\n * @param serviceName The fully qualified name of the service\n * @param classOptions An options object.\n * @return New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */\n\nfunction makeClientConstructor(methods, serviceName, classOptions) {\n  if (!classOptions) {\n    classOptions = {};\n  }\n\n  class ServiceClientImpl extends client_1.Client {}\n\n  Object.keys(methods).forEach(name => {\n    const attrs = methods[name];\n    let methodType; // TODO(murgatroid99): Verify that we don't need this anymore\n\n    if (typeof name === 'string' && name.charAt(0) === '$') {\n      throw new Error('Method names cannot start with $');\n    }\n\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        methodType = 'bidi';\n      } else {\n        methodType = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        methodType = 'server_stream';\n      } else {\n        methodType = 'unary';\n      }\n    }\n\n    const serialize = attrs.requestSerialize;\n    const deserialize = attrs.responseDeserialize;\n    const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);\n    ServiceClientImpl.prototype[name] = methodFunc; // Associate all provided attributes with the method\n\n    Object.assign(ServiceClientImpl.prototype[name], attrs);\n\n    if (attrs.originalName) {\n      ServiceClientImpl.prototype[attrs.originalName] = ServiceClientImpl.prototype[name];\n    }\n  });\n  ServiceClientImpl.service = methods;\n  return ServiceClientImpl;\n}\n\nexports.makeClientConstructor = makeClientConstructor;\n\nfunction partial(fn, path, serialize, deserialize) {\n  // tslint:disable-next-line:no-any\n  return function (...args) {\n    return fn.call(this, path, serialize, deserialize, ...args);\n  };\n}\n\nfunction isProtobufTypeDefinition(obj) {\n  return 'format' in obj;\n}\n/**\n * Load a gRPC package definition as a gRPC object hierarchy.\n * @param packageDef The package definition object.\n * @return The resulting gRPC object.\n */\n\n\nfunction loadPackageDefinition(packageDef) {\n  const result = {};\n\n  for (const serviceFqn in packageDef) {\n    if (packageDef.hasOwnProperty(serviceFqn)) {\n      const service = packageDef[serviceFqn];\n      const nameComponents = serviceFqn.split('.');\n      const serviceName = nameComponents[nameComponents.length - 1];\n      let current = result;\n\n      for (const packageName of nameComponents.slice(0, -1)) {\n        if (!current[packageName]) {\n          current[packageName] = {};\n        }\n\n        current = current[packageName];\n      }\n\n      if (isProtobufTypeDefinition(service)) {\n        current[serviceName] = service;\n      } else {\n        current[serviceName] = makeClientConstructor(service, serviceName, {});\n      }\n    }\n  }\n\n  return result;\n}\n\nexports.loadPackageDefinition = loadPackageDefinition;","map":{"version":3,"sources":["../../src/make-client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_1 = require(\"./client\");\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */\nconst requesterFuncs = {\n    unary: client_1.Client.prototype.makeUnaryRequest,\n    server_stream: client_1.Client.prototype.makeServerStreamRequest,\n    client_stream: client_1.Client.prototype.makeClientStreamRequest,\n    bidi: client_1.Client.prototype.makeBidiStreamRequest,\n};\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @param methods An object mapping method names to\n *     method attributes\n * @param serviceName The fully qualified name of the service\n * @param classOptions An options object.\n * @return New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */\nfunction makeClientConstructor(methods, serviceName, classOptions) {\n    if (!classOptions) {\n        classOptions = {};\n    }\n    class ServiceClientImpl extends client_1.Client {\n    }\n    Object.keys(methods).forEach(name => {\n        const attrs = methods[name];\n        let methodType;\n        // TODO(murgatroid99): Verify that we don't need this anymore\n        if (typeof name === 'string' && name.charAt(0) === '$') {\n            throw new Error('Method names cannot start with $');\n        }\n        if (attrs.requestStream) {\n            if (attrs.responseStream) {\n                methodType = 'bidi';\n            }\n            else {\n                methodType = 'client_stream';\n            }\n        }\n        else {\n            if (attrs.responseStream) {\n                methodType = 'server_stream';\n            }\n            else {\n                methodType = 'unary';\n            }\n        }\n        const serialize = attrs.requestSerialize;\n        const deserialize = attrs.responseDeserialize;\n        const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);\n        ServiceClientImpl.prototype[name] = methodFunc;\n        // Associate all provided attributes with the method\n        Object.assign(ServiceClientImpl.prototype[name], attrs);\n        if (attrs.originalName) {\n            ServiceClientImpl.prototype[attrs.originalName] =\n                ServiceClientImpl.prototype[name];\n        }\n    });\n    ServiceClientImpl.service = methods;\n    return ServiceClientImpl;\n}\nexports.makeClientConstructor = makeClientConstructor;\nfunction partial(fn, path, serialize, deserialize) {\n    // tslint:disable-next-line:no-any\n    return function (...args) {\n        return fn.call(this, path, serialize, deserialize, ...args);\n    };\n}\nfunction isProtobufTypeDefinition(obj) {\n    return 'format' in obj;\n}\n/**\n * Load a gRPC package definition as a gRPC object hierarchy.\n * @param packageDef The package definition object.\n * @return The resulting gRPC object.\n */\nfunction loadPackageDefinition(packageDef) {\n    const result = {};\n    for (const serviceFqn in packageDef) {\n        if (packageDef.hasOwnProperty(serviceFqn)) {\n            const service = packageDef[serviceFqn];\n            const nameComponents = serviceFqn.split('.');\n            const serviceName = nameComponents[nameComponents.length - 1];\n            let current = result;\n            for (const packageName of nameComponents.slice(0, -1)) {\n                if (!current[packageName]) {\n                    current[packageName] = {};\n                }\n                current = current[packageName];\n            }\n            if (isProtobufTypeDefinition(service)) {\n                current[serviceName] = service;\n            }\n            else {\n                current[serviceName] = makeClientConstructor(service, serviceName, {});\n            }\n        }\n    }\n    return result;\n}\nexports.loadPackageDefinition = loadPackageDefinition;\n//# sourceMappingURL=make-client.js.map"]},"metadata":{},"sourceType":"script"}