{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Field; // extends ReflectionObject\n\nvar ReflectionObject = require(\"./object\");\n\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum = require(\"./enum\"),\n    types = require(\"./types\"),\n    util = require(\"./util\");\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\n\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\n\nField.fromJSON = function fromJSON(name, json) {\n  return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\n\n\nfunction Field(name, id, type, rule, extend, options, comment) {\n  if (util.isObject(rule)) {\n    comment = extend;\n    options = rule;\n    rule = extend = undefined;\n  } else if (util.isObject(extend)) {\n    comment = options;\n    options = extend;\n    extend = undefined;\n  }\n\n  ReflectionObject.call(this, name, options);\n  if (!util.isInteger(id) || id < 0) throw TypeError(\"id must be a non-negative integer\");\n  if (!util.isString(type)) throw TypeError(\"type must be a string\");\n  if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError(\"rule must be a string rule\");\n  if (extend !== undefined && !util.isString(extend)) throw TypeError(\"extend must be a string\");\n  /**\r\n   * Field rule, if any.\r\n   * @type {string|undefined}\r\n   */\n\n  this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n  /**\r\n   * Field type.\r\n   * @type {string}\r\n   */\n\n  this.type = type; // toJSON\n\n  /**\r\n   * Unique field id.\r\n   * @type {number}\r\n   */\n\n  this.id = id; // toJSON, marker\n\n  /**\r\n   * Extended type if different from parent.\r\n   * @type {string|undefined}\r\n   */\n\n  this.extend = extend || undefined; // toJSON\n\n  /**\r\n   * Whether this field is required.\r\n   * @type {boolean}\r\n   */\n\n  this.required = rule === \"required\";\n  /**\r\n   * Whether this field is optional.\r\n   * @type {boolean}\r\n   */\n\n  this.optional = !this.required;\n  /**\r\n   * Whether this field is repeated.\r\n   * @type {boolean}\r\n   */\n\n  this.repeated = rule === \"repeated\";\n  /**\r\n   * Whether this field is a map or not.\r\n   * @type {boolean}\r\n   */\n\n  this.map = false;\n  /**\r\n   * Message this field belongs to.\r\n   * @type {Type|null}\r\n   */\n\n  this.message = null;\n  /**\r\n   * OneOf this field belongs to, if any,\r\n   * @type {OneOf|null}\r\n   */\n\n  this.partOf = null;\n  /**\r\n   * The field type's default value.\r\n   * @type {*}\r\n   */\n\n  this.typeDefault = null;\n  /**\r\n   * The field's default value on prototypes.\r\n   * @type {*}\r\n   */\n\n  this.defaultValue = null;\n  /**\r\n   * Whether this field's value should be treated as a long.\r\n   * @type {boolean}\r\n   */\n\n  this.long = util.Long ? types.long[type] !== undefined :\n  /* istanbul ignore next */\n  false;\n  /**\r\n   * Whether this field's value is a buffer.\r\n   * @type {boolean}\r\n   */\n\n  this.bytes = type === \"bytes\";\n  /**\r\n   * Resolved type if not a basic type.\r\n   * @type {Type|Enum|null}\r\n   */\n\n  this.resolvedType = null;\n  /**\r\n   * Sister-field within the extended type if a declaring extension field.\r\n   * @type {Field|null}\r\n   */\n\n  this.extensionField = null;\n  /**\r\n   * Sister-field within the declaring namespace if an extended field.\r\n   * @type {Field|null}\r\n   */\n\n  this.declaringField = null;\n  /**\r\n   * Internally remembers whether this field is packed.\r\n   * @type {boolean|null}\r\n   * @private\r\n   */\n\n  this._packed = null;\n  /**\r\n   * Comment for this field.\r\n   * @type {string|null}\r\n   */\n\n  this.comment = comment;\n}\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\n\n\nObject.defineProperty(Field.prototype, \"packed\", {\n  get: function () {\n    // defaults to packed=true if not explicity set to false\n    if (this._packed === null) this._packed = this.getOption(\"packed\") !== false;\n    return this._packed;\n  }\n});\n/**\r\n * @override\r\n */\n\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n  if (name === \"packed\") // clear cached before setting\n    this._packed = null;\n  return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\n\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\n\n/**\r\n * Converts this field to a field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IField} Field descriptor\r\n */\n\n\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"rule\", this.rule !== \"optional\" && this.rule || undefined, \"type\", this.type, \"id\", this.id, \"extend\", this.extend, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n};\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\n\n\nField.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n\n  if ((this.typeDefault = types.defaults[this.type]) === undefined) {\n    // if not a basic type, resolve it\n    this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n    if (this.resolvedType instanceof Type) this.typeDefault = null;else // instanceof Enum\n      this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n  } // use explicitly set default value if present\n\n\n  if (this.options && this.options[\"default\"] != null) {\n    this.typeDefault = this.options[\"default\"];\n    if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\") this.typeDefault = this.resolvedType.values[this.typeDefault];\n  } // remove unnecessary options\n\n\n  if (this.options) {\n    if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;\n    if (!Object.keys(this.options).length) this.options = undefined;\n  } // convert to internal data type if necesssary\n\n\n  if (this.long) {\n    this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n    /* istanbul ignore else */\n\n    if (Object.freeze) Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n  } else if (this.bytes && typeof this.typeDefault === \"string\") {\n    var buf;\n    if (util.base64.test(this.typeDefault)) util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);else util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n    this.typeDefault = buf;\n  } // take special care of maps and repeated fields\n\n\n  if (this.map) this.defaultValue = util.emptyObject;else if (this.repeated) this.defaultValue = util.emptyArray;else this.defaultValue = this.typeDefault; // ensure proper value on prototype\n\n  if (this.parent instanceof Type) this.parent.ctor.prototype[this.name] = this.defaultValue;\n  return ReflectionObject.prototype.resolve.call(this);\n};\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\n\n\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n  // submessage: decorate the submessage and use its name as the type\n  if (typeof fieldType === \"function\") fieldType = util.decorateType(fieldType).name; // enum reference: create a reflected copy of the enum and keep reuseing it\n  else if (fieldType && typeof fieldType === \"object\") fieldType = util.decorateEnum(fieldType).name;\n  return function fieldDecorator(prototype, fieldName) {\n    util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {\n      \"default\": defaultValue\n    }));\n  };\n};\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\n// like Field.d but without a default value\n// Sets up cyclic dependencies (called in index-light)\n\n\nField._configure = function configure(Type_) {\n  Type = Type_;\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/protobufjs/src/field.js"],"names":["module","exports","Field","ReflectionObject","require","prototype","Object","create","constructor","className","Enum","types","util","Type","ruleRe","fromJSON","name","json","id","type","rule","extend","options","comment","isObject","undefined","call","isInteger","TypeError","isString","test","toString","toLowerCase","required","optional","repeated","map","message","partOf","typeDefault","defaultValue","long","Long","bytes","resolvedType","extensionField","declaringField","_packed","defineProperty","get","getOption","setOption","value","ifNotSet","toJSON","toJSONOptions","keepComments","Boolean","toObject","resolve","resolved","defaults","parent","lookupTypeOrEnum","values","keys","packed","length","fromNumber","charAt","freeze","buf","base64","decode","newBuffer","utf8","write","emptyObject","emptyArray","ctor","d","decorateField","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldDecorator","fieldName","add","_configure","configure","Type_"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB,C,CAEA;;AACA,IAAIC,gBAAgB,GAAGC,OAAO,CAAC,UAAD,CAA9B;;AACA,CAAC,CAACF,KAAK,CAACG,SAAN,GAAkBC,MAAM,CAACC,MAAP,CAAcJ,gBAAgB,CAACE,SAA/B,CAAnB,EAA8DG,WAA9D,GAA4EN,KAA7E,EAAoFO,SAApF,GAAgG,OAAhG;;AAEA,IAAIC,IAAI,GAAIN,OAAO,CAAC,QAAD,CAAnB;AAAA,IACIO,KAAK,GAAGP,OAAO,CAAC,SAAD,CADnB;AAAA,IAEIQ,IAAI,GAAIR,OAAO,CAAC,QAAD,CAFnB;;AAIA,IAAIS,IAAJ,C,CAAU;;AAEV,IAAIC,MAAM,GAAG,8BAAb;AAEA;;;;;;;;;;;;;;AAcA;;;;;;;;AAOAZ,KAAK,CAACa,QAAN,GAAiB,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8B;AAC3C,SAAO,IAAIf,KAAJ,CAAUc,IAAV,EAAgBC,IAAI,CAACC,EAArB,EAAyBD,IAAI,CAACE,IAA9B,EAAoCF,IAAI,CAACG,IAAzC,EAA+CH,IAAI,CAACI,MAApD,EAA4DJ,IAAI,CAACK,OAAjE,EAA0EL,IAAI,CAACM,OAA/E,CAAP;AACH,CAFD;AAIA;;;;;;;;;;;;;;;;AAcA,SAASrB,KAAT,CAAec,IAAf,EAAqBE,EAArB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,OAA7C,EAAsDC,OAAtD,EAA+D;AAE3D,MAAIX,IAAI,CAACY,QAAL,CAAcJ,IAAd,CAAJ,EAAyB;AACrBG,IAAAA,OAAO,GAAGF,MAAV;AACAC,IAAAA,OAAO,GAAGF,IAAV;AACAA,IAAAA,IAAI,GAAGC,MAAM,GAAGI,SAAhB;AACH,GAJD,MAIO,IAAIb,IAAI,CAACY,QAAL,CAAcH,MAAd,CAAJ,EAA2B;AAC9BE,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAGD,MAAV;AACAA,IAAAA,MAAM,GAAGI,SAAT;AACH;;AAEDtB,EAAAA,gBAAgB,CAACuB,IAAjB,CAAsB,IAAtB,EAA4BV,IAA5B,EAAkCM,OAAlC;AAEA,MAAI,CAACV,IAAI,CAACe,SAAL,CAAeT,EAAf,CAAD,IAAuBA,EAAE,GAAG,CAAhC,EACI,MAAMU,SAAS,CAAC,mCAAD,CAAf;AAEJ,MAAI,CAAChB,IAAI,CAACiB,QAAL,CAAcV,IAAd,CAAL,EACI,MAAMS,SAAS,CAAC,uBAAD,CAAf;AAEJ,MAAIR,IAAI,KAAKK,SAAT,IAAsB,CAACX,MAAM,CAACgB,IAAP,CAAYV,IAAI,GAAGA,IAAI,CAACW,QAAL,GAAgBC,WAAhB,EAAnB,CAA3B,EACI,MAAMJ,SAAS,CAAC,4BAAD,CAAf;AAEJ,MAAIP,MAAM,KAAKI,SAAX,IAAwB,CAACb,IAAI,CAACiB,QAAL,CAAcR,MAAd,CAA7B,EACI,MAAMO,SAAS,CAAC,yBAAD,CAAf;AAEJ;;;;;AAIA,OAAKR,IAAL,GAAYA,IAAI,IAAIA,IAAI,KAAK,UAAjB,GAA8BA,IAA9B,GAAqCK,SAAjD,CA9B2D,CA8BC;;AAE5D;;;;;AAIA,OAAKN,IAAL,GAAYA,IAAZ,CApC2D,CAoCzC;;AAElB;;;;;AAIA,OAAKD,EAAL,GAAUA,EAAV,CA1C2D,CA0C7C;;AAEd;;;;;AAIA,OAAKG,MAAL,GAAcA,MAAM,IAAII,SAAxB,CAhD2D,CAgDxB;;AAEnC;;;;;AAIA,OAAKQ,QAAL,GAAgBb,IAAI,KAAK,UAAzB;AAEA;;;;;AAIA,OAAKc,QAAL,GAAgB,CAAC,KAAKD,QAAtB;AAEA;;;;;AAIA,OAAKE,QAAL,GAAgBf,IAAI,KAAK,UAAzB;AAEA;;;;;AAIA,OAAKgB,GAAL,GAAW,KAAX;AAEA;;;;;AAIA,OAAKC,OAAL,GAAe,IAAf;AAEA;;;;;AAIA,OAAKC,MAAL,GAAc,IAAd;AAEA;;;;;AAIA,OAAKC,WAAL,GAAmB,IAAnB;AAEA;;;;;AAIA,OAAKC,YAAL,GAAoB,IAApB;AAEA;;;;;AAIA,OAAKC,IAAL,GAAY7B,IAAI,CAAC8B,IAAL,GAAY/B,KAAK,CAAC8B,IAAN,CAAWtB,IAAX,MAAqBM,SAAjC;AAA6C;AAA2B,OAApF;AAEA;;;;;AAIA,OAAKkB,KAAL,GAAaxB,IAAI,KAAK,OAAtB;AAEA;;;;;AAIA,OAAKyB,YAAL,GAAoB,IAApB;AAEA;;;;;AAIA,OAAKC,cAAL,GAAsB,IAAtB;AAEA;;;;;AAIA,OAAKC,cAAL,GAAsB,IAAtB;AAEA;;;;;;AAKA,OAAKC,OAAL,GAAe,IAAf;AAEA;;;;;AAIA,OAAKxB,OAAL,GAAeA,OAAf;AACH;AAED;;;;;;;;AAMAjB,MAAM,CAAC0C,cAAP,CAAsB9C,KAAK,CAACG,SAA5B,EAAuC,QAAvC,EAAiD;AAC7C4C,EAAAA,GAAG,EAAE,YAAW;AACZ;AACA,QAAI,KAAKF,OAAL,KAAiB,IAArB,EACI,KAAKA,OAAL,GAAe,KAAKG,SAAL,CAAe,QAAf,MAA6B,KAA5C;AACJ,WAAO,KAAKH,OAAZ;AACH;AAN4C,CAAjD;AASA;;;;AAGA7C,KAAK,CAACG,SAAN,CAAgB8C,SAAhB,GAA4B,SAASA,SAAT,CAAmBnC,IAAnB,EAAyBoC,KAAzB,EAAgCC,QAAhC,EAA0C;AAClE,MAAIrC,IAAI,KAAK,QAAb,EAAuB;AACnB,SAAK+B,OAAL,GAAe,IAAf;AACJ,SAAO5C,gBAAgB,CAACE,SAAjB,CAA2B8C,SAA3B,CAAqCzB,IAArC,CAA0C,IAA1C,EAAgDV,IAAhD,EAAsDoC,KAAtD,EAA6DC,QAA7D,CAAP;AACH,CAJD;AAMA;;;;;;;;;AASA;;;;;;;AAOA;;;;;;;AAKAnD,KAAK,CAACG,SAAN,CAAgBiD,MAAhB,GAAyB,SAASA,MAAT,CAAgBC,aAAhB,EAA+B;AACpD,MAAIC,YAAY,GAAGD,aAAa,GAAGE,OAAO,CAACF,aAAa,CAACC,YAAf,CAAV,GAAyC,KAAzE;AACA,SAAO5C,IAAI,CAAC8C,QAAL,CAAc,CACjB,MADiB,EACL,KAAKtC,IAAL,KAAc,UAAd,IAA4B,KAAKA,IAAjC,IAAyCK,SADpC,EAEjB,MAFiB,EAEL,KAAKN,IAFA,EAGjB,IAHiB,EAGL,KAAKD,EAHA,EAIjB,QAJiB,EAIL,KAAKG,MAJA,EAKjB,SALiB,EAKL,KAAKC,OALA,EAMjB,SANiB,EAMLkC,YAAY,GAAG,KAAKjC,OAAR,GAAkBE,SANzB,CAAd,CAAP;AAQH,CAVD;AAYA;;;;;;;AAKAvB,KAAK,CAACG,SAAN,CAAgBsD,OAAhB,GAA0B,SAASA,OAAT,GAAmB;AAEzC,MAAI,KAAKC,QAAT,EACI,OAAO,IAAP;;AAEJ,MAAI,CAAC,KAAKrB,WAAL,GAAmB5B,KAAK,CAACkD,QAAN,CAAe,KAAK1C,IAApB,CAApB,MAAmDM,SAAvD,EAAkE;AAAE;AAChE,SAAKmB,YAAL,GAAoB,CAAC,KAAKE,cAAL,GAAsB,KAAKA,cAAL,CAAoBgB,MAA1C,GAAmD,KAAKA,MAAzD,EAAiEC,gBAAjE,CAAkF,KAAK5C,IAAvF,CAApB;AACA,QAAI,KAAKyB,YAAL,YAA6B/B,IAAjC,EACI,KAAK0B,WAAL,GAAmB,IAAnB,CADJ,KAEK;AACD,WAAKA,WAAL,GAAmB,KAAKK,YAAL,CAAkBoB,MAAlB,CAAyB1D,MAAM,CAAC2D,IAAP,CAAY,KAAKrB,YAAL,CAAkBoB,MAA9B,EAAsC,CAAtC,CAAzB,CAAnB,CAL0D,CAK6B;AAC9F,GAXwC,CAazC;;;AACA,MAAI,KAAK1C,OAAL,IAAgB,KAAKA,OAAL,CAAa,SAAb,KAA2B,IAA/C,EAAqD;AACjD,SAAKiB,WAAL,GAAmB,KAAKjB,OAAL,CAAa,SAAb,CAAnB;AACA,QAAI,KAAKsB,YAAL,YAA6BlC,IAA7B,IAAqC,OAAO,KAAK6B,WAAZ,KAA4B,QAArE,EACI,KAAKA,WAAL,GAAmB,KAAKK,YAAL,CAAkBoB,MAAlB,CAAyB,KAAKzB,WAA9B,CAAnB;AACP,GAlBwC,CAoBzC;;;AACA,MAAI,KAAKjB,OAAT,EAAkB;AACd,QAAI,KAAKA,OAAL,CAAa4C,MAAb,KAAwB,IAAxB,IAAgC,KAAK5C,OAAL,CAAa4C,MAAb,KAAwBzC,SAAxB,IAAqC,KAAKmB,YAA1C,IAA0D,EAAE,KAAKA,YAAL,YAA6BlC,IAA/B,CAA9F,EACI,OAAO,KAAKY,OAAL,CAAa4C,MAApB;AACJ,QAAI,CAAC5D,MAAM,CAAC2D,IAAP,CAAY,KAAK3C,OAAjB,EAA0B6C,MAA/B,EACI,KAAK7C,OAAL,GAAeG,SAAf;AACP,GA1BwC,CA4BzC;;;AACA,MAAI,KAAKgB,IAAT,EAAe;AACX,SAAKF,WAAL,GAAmB3B,IAAI,CAAC8B,IAAL,CAAU0B,UAAV,CAAqB,KAAK7B,WAA1B,EAAuC,KAAKpB,IAAL,CAAUkD,MAAV,CAAiB,CAAjB,MAAwB,GAA/D,CAAnB;AAEA;;AACA,QAAI/D,MAAM,CAACgE,MAAX,EACIhE,MAAM,CAACgE,MAAP,CAAc,KAAK/B,WAAnB,EALO,CAK0B;AAExC,GAPD,MAOO,IAAI,KAAKI,KAAL,IAAc,OAAO,KAAKJ,WAAZ,KAA4B,QAA9C,EAAwD;AAC3D,QAAIgC,GAAJ;AACA,QAAI3D,IAAI,CAAC4D,MAAL,CAAY1C,IAAZ,CAAiB,KAAKS,WAAtB,CAAJ,EACI3B,IAAI,CAAC4D,MAAL,CAAYC,MAAZ,CAAmB,KAAKlC,WAAxB,EAAqCgC,GAAG,GAAG3D,IAAI,CAAC8D,SAAL,CAAe9D,IAAI,CAAC4D,MAAL,CAAYL,MAAZ,CAAmB,KAAK5B,WAAxB,CAAf,CAA3C,EAAiG,CAAjG,EADJ,KAGI3B,IAAI,CAAC+D,IAAL,CAAUC,KAAV,CAAgB,KAAKrC,WAArB,EAAkCgC,GAAG,GAAG3D,IAAI,CAAC8D,SAAL,CAAe9D,IAAI,CAAC+D,IAAL,CAAUR,MAAV,CAAiB,KAAK5B,WAAtB,CAAf,CAAxC,EAA4F,CAA5F;AACJ,SAAKA,WAAL,GAAmBgC,GAAnB;AACH,GA3CwC,CA6CzC;;;AACA,MAAI,KAAKnC,GAAT,EACI,KAAKI,YAAL,GAAoB5B,IAAI,CAACiE,WAAzB,CADJ,KAEK,IAAI,KAAK1C,QAAT,EACD,KAAKK,YAAL,GAAoB5B,IAAI,CAACkE,UAAzB,CADC,KAGD,KAAKtC,YAAL,GAAoB,KAAKD,WAAzB,CAnDqC,CAqDzC;;AACA,MAAI,KAAKuB,MAAL,YAAuBjD,IAA3B,EACI,KAAKiD,MAAL,CAAYiB,IAAZ,CAAiB1E,SAAjB,CAA2B,KAAKW,IAAhC,IAAwC,KAAKwB,YAA7C;AAEJ,SAAOrC,gBAAgB,CAACE,SAAjB,CAA2BsD,OAA3B,CAAmCjC,IAAnC,CAAwC,IAAxC,CAAP;AACH,CA1DD;AA4DA;;;;;;;;;AASA;;;;;;;;;;;;;AAWAxB,KAAK,CAAC8E,CAAN,GAAU,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD5C,YAAtD,EAAoE;AAE1E;AACA,MAAI,OAAO2C,SAAP,KAAqB,UAAzB,EACIA,SAAS,GAAGvE,IAAI,CAACyE,YAAL,CAAkBF,SAAlB,EAA6BnE,IAAzC,CADJ,CAGA;AAHA,OAIK,IAAImE,SAAS,IAAI,OAAOA,SAAP,KAAqB,QAAtC,EACDA,SAAS,GAAGvE,IAAI,CAAC0E,YAAL,CAAkBH,SAAlB,EAA6BnE,IAAzC;AAEJ,SAAO,SAASuE,cAAT,CAAwBlF,SAAxB,EAAmCmF,SAAnC,EAA8C;AACjD5E,IAAAA,IAAI,CAACyE,YAAL,CAAkBhF,SAAS,CAACG,WAA5B,EACKiF,GADL,CACS,IAAIvF,KAAJ,CAAUsF,SAAV,EAAqBN,OAArB,EAA8BC,SAA9B,EAAyCC,SAAzC,EAAoD;AAAE,iBAAW5C;AAAb,KAApD,CADT;AAEH,GAHD;AAIH,CAdD;AAgBA;;;;;;;;;;;AAWA;AAEA;;;AACAtC,KAAK,CAACwF,UAAN,GAAmB,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACzC/E,EAAAA,IAAI,GAAG+E,KAAP;AACH,CAFD","sourcesContent":["\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(\"./enum\"),\r\n    types = require(\"./types\"),\r\n    util  = require(\"./util\");\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction Field(name, id, type, rule, extend, options, comment) {\r\n\r\n    if (util.isObject(rule)) {\r\n        comment = extend;\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        comment = options;\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {Type|null}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {OneOf|null}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {Type|Enum|null}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {Field|null}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {Field|null}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {boolean|null}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IField} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] != null) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary options\r\n    if (this.options) {\r\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n            delete this.options.packed;\r\n        if (!Object.keys(this.options).length)\r\n            this.options = undefined;\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    // ensure proper value on prototype\r\n    if (this.parent instanceof Type)\r\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\r\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\r\n\r\n    // submessage: decorate the submessage and use its name as the type\r\n    if (typeof fieldType === \"function\")\r\n        fieldType = util.decorateType(fieldType).name;\r\n\r\n    // enum reference: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldType && typeof fieldType === \"object\")\r\n        fieldType = util.decorateEnum(fieldType).name;\r\n\r\n    return function fieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\r\n    };\r\n};\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\r\n// like Field.d but without a default value\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nField._configure = function configure(Type_) {\r\n    Type = Type_;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}