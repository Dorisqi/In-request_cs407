{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst common_1 = require(\"@google-cloud/common\");\n\nconst paginator_1 = require(\"@google-cloud/paginator\");\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst arrify = require(\"arrify\");\n\nconst bucket_1 = require(\"./bucket\");\n\nconst channel_1 = require(\"./channel\");\n\nconst file_1 = require(\"./file\");\n\nconst util_1 = require(\"./util\");\n\nconst hmacKey_1 = require(\"./hmacKey\");\n/*! Developer Documentation\n *\n * Invoke this method to create a new Storage object bound with pre-determined\n * configuration options. For each object that can be created (e.g., a bucket),\n * there is an equivalent static and instance method. While they are classes,\n * they can be instantiated without use of the `new` keyword.\n */\n\n/**\n * <h4>ACLs</h4>\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share files with other users\n * and allow other users to access your buckets and files.\n *\n * To learn more about ACLs, read this overview on\n * [Access Control](https://cloud.google.com/storage/docs/access-control).\n *\n * @see [Cloud Storage overview]{@link https://cloud.google.com/storage/docs/overview}\n * @see [Access Control]{@link https://cloud.google.com/storage/docs/access-control}\n *\n * @class\n */\n\n\nclass Storage extends common_1.Service {\n  /**\n   * @typedef {object} StorageOptions\n   * @property {string} [projectId] The project ID from the Google Developer's\n   *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n   *     variable `GCLOUD_PROJECT` for your project ID. If your app is running\n   * in an environment which supports {@link\n   * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n   * Application Default Credentials}, your project ID will be detected\n   * automatically.\n   * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n   *     downloaded from the Google Developers Console. If you provide a path to\n   * a JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n   *     .p12 require you to specify the `email` option as well.\n   * @property {string} [email] Account email address. Required when using a .pem\n   *     or .p12 keyFilename.\n   * @property {object} [credentials] Credentials object.\n   * @property {string} [credentials.client_email]\n   * @property {string} [credentials.private_key]\n   * @property {boolean} [autoRetry=true] Automatically retry requests if the\n   *     response is related to rate limits or certain intermittent server\n   * errors. We will exponentially backoff subsequent requests by default.\n   * @property {number} [maxRetries=3] Maximum number of automatic retries\n   *     attempted before returning the error.\n   * @property {Constructor} [promise] Custom promise module to use instead of\n   *     native Promises.\n   */\n\n  /**\n   * Constructs the Storage client.\n   *\n   * @example <caption>Create a client that uses Application Default Credentials\n   * (ADC)</caption> const {Storage} = require('@google-cloud/storage'); const\n   * storage = new Storage();\n   *\n   * @example <caption>Create a client with explicit credentials</caption>\n   * storage');/storage');\n   * const storage = new Storage({\n   *   projectId: 'your-project-id',\n   *   keyFilename: '/path/to/keyfile.json'\n   * });\n   *\n   * @param {StorageOptions} [options] Configuration options.\n   */\n  constructor(options = {}) {\n    options = Object.assign({}, options, {\n      apiEndpoint: options.apiEndpoint || 'storage.googleapis.com'\n    });\n    const url = process.env.STORAGE_EMULATOR_HOST || `https://${options.apiEndpoint}/storage/v1`;\n    const config = {\n      apiEndpoint: options.apiEndpoint,\n      baseUrl: url,\n      projectIdRequired: false,\n      scopes: ['https://www.googleapis.com/auth/iam', 'https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/devstorage.full_control'],\n      packageJson: require('../../package.json')\n    };\n    super(config, options);\n    /**\n     * Reference to {@link Storage.acl}.\n     *\n     * @name Storage#acl\n     * @see Storage.acl\n     */\n\n    this.acl = Storage.acl;\n    this.getBucketsStream = paginator_1.paginator.streamify('getBuckets');\n    this.getHmacKeysStream = paginator_1.paginator.streamify('getHmacKeys');\n  }\n  /**\n   * Get a reference to a Cloud Storage bucket.\n   *\n   * @param {string} name Name of the bucket.\n   * @param {object} [options] Configuration object.\n   * @param {string} [options.kmsKeyName] A Cloud KMS key that will be used to\n   *     encrypt objects inserted into this bucket, if no encryption method is\n   *     specified.\n   * @param {string} [options.userProject] User project to be billed for all\n   *     requests made from this Bucket object.\n   * @returns {Bucket}\n   * @see Bucket\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const albums = storage.bucket('albums');\n   * const photos = storage.bucket('photos');\n   */\n\n\n  bucket(name, options) {\n    if (!name) {\n      throw new Error('A bucket name is needed to use Cloud Storage.');\n    }\n\n    return new bucket_1.Bucket(this, name, options);\n  }\n  /**\n   * Reference a channel to receive notifications about changes to your bucket.\n   *\n   * @param {string} id The ID of the channel.\n   * @param {string} resourceId The resource ID of the channel.\n   * @returns {Channel}\n   * @see Channel\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const channel = storage.channel('id', 'resource-id');\n   */\n\n\n  channel(id, resourceId) {\n    return new channel_1.Channel(this, id, resourceId);\n  }\n  /**\n   * @typedef {array} CreateBucketResponse\n   * @property {Bucket} 0 The new {@link Bucket}.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback CreateBucketCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Bucket} bucket The new {@link Bucket}.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Metadata to set for the bucket.\n   *\n   * @typedef {object} CreateBucketRequest\n   * @property {boolean} [archive=false] Specify the storage class as Archive.\n   * @property {boolean} [coldline=false] Specify the storage class as Coldline.\n   * @property {Cors[]} [cors=[]] Specify the CORS configuration to use.\n   * @property {boolean} [dra=false] Specify the storage class as Durable Reduced\n   *     Availability.\n   * @property {boolean} [multiRegional=false] Specify the storage class as\n   *     Multi-Regional.\n   * @property {boolean} [nearline=false] Specify the storage class as Nearline.\n   * @property {boolean} [regional=false] Specify the storage class as Regional.\n   * @property {boolean} [requesterPays=false] **Early Access Testers Only**\n   *     Force the use of the User Project metadata field to assign operational\n   *     costs when an operation is made on a Bucket and its objects.\n   * @property {boolean} [standard=true] Specify the storage class as Standard.\n   * @property {string} [userProject] The ID of the project which will be billed\n   *     for the request.\n   */\n\n  /**\n   * Create a bucket.\n   *\n   * Cloud Storage uses a flat namespace, so you can't create a bucket with\n   * a name that is already in use. For more information, see\n   * [Bucket Naming\n   * Guidelines](https://cloud.google.com/storage/docs/bucketnaming.html#requirements).\n   *\n   * @see [Buckets: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/insert}\n   * @see [Storage Classes]{@link https://cloud.google.com/storage/docs/storage-classes}\n   *\n   * @param {string} name Name of the bucket to create.\n   * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n   * @param {CreateBucketCallback} [callback] Callback function.\n   * @returns {Promise<CreateBucketResponse>}\n   * @throws {Error} If a name is not provided.\n   * @see Bucket#create\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const callback = function(err, bucket, apiResponse) {\n   *   // `bucket` is a Bucket object.\n   * };\n   *\n   * storage.createBucket('new-bucket', callback);\n   *\n   * //-\n   * // Create a bucket in a specific location and region. <em>See the <a\n   * // href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets/insert\">\n   * // Official JSON API docs</a> for complete details on the `location`\n   * option.\n   * // </em>\n   * //-\n   * const metadata = {\n   *   location: 'US-CENTRAL1',\n   *   regional: true\n   * };\n   *\n   * storage.createBucket('new-bucket', metadata, callback);\n   *\n   * //-\n   * // Create a bucket with a retention policy of 6 months.\n   * //-\n   * const metadata = {\n   *   retentionPolicy: {\n   *     retentionPeriod: 15780000 // 6 months in seconds.\n   *   }\n   * };\n   *\n   * storage.createBucket('new-bucket', metadata, callback);\n   *\n   * //-\n   * // Enable versioning on a new bucket.\n   * //-\n   * const metadata = {\n   *   versioning: {\n   *     enabled: true\n   *   }\n   * };\n   *\n   * storage.createBucket('new-bucket', metadata, callback);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * storage.createBucket('new-bucket').then(function(data) {\n   *   const bucket = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * @example <caption>include:samples/buckets.js</caption>\n   * region_tag:storage_create_bucket\n   * Another example:\n   */\n\n\n  createBucket(name, metadataOrCallback, callback) {\n    if (!name) {\n      throw new Error('A name is required to create a bucket.');\n    }\n\n    let metadata;\n\n    if (!callback) {\n      callback = metadataOrCallback;\n      metadata = {};\n    } else {\n      metadata = metadataOrCallback;\n    }\n\n    const body = Object.assign({}, metadata, {\n      name\n    });\n    const storageClasses = {\n      archive: 'ARCHIVE',\n      coldline: 'COLDLINE',\n      dra: 'DURABLE_REDUCED_AVAILABILITY',\n      multiRegional: 'MULTI_REGIONAL',\n      nearline: 'NEARLINE',\n      regional: 'REGIONAL',\n      standard: 'STANDARD'\n    };\n    Object.keys(storageClasses).forEach(storageClass => {\n      if (body[storageClass]) {\n        body.storageClass = storageClasses[storageClass];\n        delete body[storageClass];\n      }\n    });\n\n    if (body.requesterPays) {\n      body.billing = {\n        requesterPays: body.requesterPays\n      };\n      delete body.requesterPays;\n    }\n\n    const query = {\n      project: this.projectId\n    };\n\n    if (body.userProject) {\n      query.userProject = body.userProject;\n      delete body.userProject;\n    }\n\n    this.request({\n      method: 'POST',\n      uri: '/b',\n      qs: query,\n      json: body\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      const bucket = this.bucket(name);\n      bucket.metadata = resp;\n      callback(null, bucket, resp);\n    });\n  }\n  /**\n   * @typedef {object} CreateHmacKeyOptions\n   * @property {string} [projectId] The project ID of the project that owns\n   *     the service account of the requested HMAC key. If not provided,\n   *     the project ID used to instantiate the Storage client will be used.\n   * @property {string} [userProject] This parameter is currently ignored.\n   */\n\n  /**\n   * @typedef {object} HmacKeyMetadata\n   * @property {string} accessId The access id identifies which HMAC key was\n   *     used to sign a request when authenticating with HMAC.\n   * @property {string} etag Used to perform a read-modify-write of the key.\n   * @property {string} id The resource name of the HMAC key.\n   * @property {string} projectId The project ID.\n   * @property {string} serviceAccountEmail The service account's email this\n   *     HMAC key is created for.\n   * @property {string} state The state of this HMAC key. One of \"ACTIVE\",\n   *     \"INACTIVE\" or \"DELETED\".\n   * @property {string} timeCreated The creation time of the HMAC key in\n   *     RFC 3339 format.\n   * @property {string} [updated] The time this HMAC key was last updated in\n   *     RFC 3339 format.\n   */\n\n  /**\n   * @typedef {array} CreateHmacKeyResponse\n   * @property {HmacKey} 0 The HmacKey instance created from API response.\n   * @property {string} 1 The HMAC key's secret used to access the XML API.\n   * @property {object} 3 The raw API response.\n   */\n\n  /**\n   * @callback CreateHmacKeyCallback Callback function.\n   * @param {?Error} err Request error, if any.\n   * @param {HmacKey} hmacKey The HmacKey instance created from API response.\n   * @param {string} secret The HMAC key's secret used to access the XML API.\n   * @param {object} apiResponse The raw API response.\n   */\n\n  /**\n   * Create an HMAC key associated with an service account to authenticate\n   * requests to the Cloud Storage XML API.\n   *\n   * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys}\n   *\n   * @param {string} serviceAccountEmail The service account's email address\n   *     with which the HMAC key is created for.\n   * @param {CreateHmacKeyCallback} [callback] Callback function.\n   * @return {Promise<CreateHmacKeyResponse>}\n   *\n   * @example\n   * const {Storage} = require('google-cloud/storage');\n   * const storage = new Storage();\n   *\n   * // Replace with your service account's email address\n   * const serviceAccountEmail =\n   *   'my-service-account@appspot.gserviceaccount.com';\n   *\n   * storage.createHmacKey(serviceAccountEmail, function(err, hmacKey, secret) {\n   *   if (!err) {\n   *     // Securely store the secret for use with the XML API.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * storage.createHmacKey(serviceAccountEmail)\n   *   .then((response) => {\n   *     const hmacKey = response[0];\n   *     const secret = response[1];\n   *     // Securely store the secret for use with the XML API.\n   *   });\n   */\n\n\n  createHmacKey(serviceAccountEmail, optionsOrCb, cb) {\n    if (typeof serviceAccountEmail !== 'string') {\n      throw new Error('The first argument must be a service account email to create an HMAC key.');\n    }\n\n    const {\n      options,\n      callback\n    } = util_1.normalize(optionsOrCb, cb);\n    const query = Object.assign({}, options, {\n      serviceAccountEmail\n    });\n    const projectId = query.projectId || this.projectId;\n    delete query.projectId;\n    this.request({\n      method: 'POST',\n      uri: `/projects/${projectId}/hmacKeys`,\n      qs: query\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, null, resp);\n        return;\n      }\n\n      const metadata = resp.metadata;\n      const hmacKey = this.hmacKey(metadata.accessId, {\n        projectId: metadata.projectId\n      });\n      hmacKey.metadata = resp.metadata;\n      callback(null, hmacKey, resp.secret, resp);\n    });\n  }\n  /**\n   * Query object for listing buckets.\n   *\n   * @typedef {object} GetBucketsRequest\n   * @property {boolean} [autoPaginate=true] Have pagination handled\n   *     automatically.\n   * @property {number} [maxApiCalls] Maximum number of API calls to make.\n   * @property {number} [maxResults] Maximum number of items plus prefixes to\n   *     return.\n   * @property {string} [pageToken] A previously-returned page token\n   *     representing part of the larger set of results to view.\n   * @property {string} [userProject] The ID of the project which will be billed\n   *     for the request.\n   */\n\n  /**\n   * @typedef {array} GetBucketsResponse\n   * @property {Bucket[]} 0 Array of {@link Bucket} instances.\n   */\n\n  /**\n   * @callback GetBucketsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Bucket[]} buckets Array of {@link Bucket} instances.\n   */\n\n  /**\n   * Get Bucket objects for all of the buckets in your project.\n   *\n   * @see [Buckets: list API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/list}\n   *\n   * @param {GetBucketsRequest} [query] Query object for listing buckets.\n   * @param {GetBucketsCallback} [callback] Callback function.\n   * @returns {Promise<GetBucketsResponse>}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * storage.getBuckets(function(err, buckets) {\n   *   if (!err) {\n   *     // buckets is an array of Bucket objects.\n   *   }\n   * });\n   *\n   * //-\n   * // To control how many API requests are made and page through the results\n   * // manually, set `autoPaginate` to `false`.\n   * //-\n   * const callback = function(err, buckets, nextQuery, apiResponse) {\n   *   if (nextQuery) {\n   *     // More results exist.\n   *     storage.getBuckets(nextQuery, callback);\n   *   }\n   *\n   *   // The `metadata` property is populated for you with the metadata at the\n   *   // time of fetching.\n   *   buckets[0].metadata;\n   *\n   *   // However, in cases where you are concerned the metadata could have\n   *   // changed, use the `getMetadata` method.\n   *   buckets[0].getMetadata(function(err, metadata, apiResponse) {});\n   * };\n   *\n   * storage.getBuckets({\n   *   autoPaginate: false\n   * }, callback);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * storage.getBuckets().then(function(data) {\n   *   const buckets = data[0];\n   * });\n   *\n   * @example <caption>include:samples/buckets.js</caption>\n   * region_tag:storage_list_buckets\n   * Another example:\n   */\n\n\n  getBuckets(optionsOrCallback, cb) {\n    const {\n      options,\n      callback\n    } = util_1.normalize(optionsOrCallback, cb);\n    options.project = options.project || this.projectId;\n    this.request({\n      uri: '/b',\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, null, resp);\n        return;\n      }\n\n      const buckets = arrify(resp.items).map(bucket => {\n        const bucketInstance = this.bucket(bucket.id);\n        bucketInstance.metadata = bucket;\n        return bucketInstance;\n      });\n      const nextQuery = resp.nextPageToken ? Object.assign({}, options, {\n        pageToken: resp.nextPageToken\n      }) : null;\n      callback(null, buckets, nextQuery, resp);\n    });\n  }\n\n  getHmacKeys(optionsOrCb, cb) {\n    const {\n      options,\n      callback\n    } = util_1.normalize(optionsOrCb, cb);\n    const query = Object.assign({}, options);\n    const projectId = query.projectId || this.projectId;\n    delete query.projectId;\n    this.request({\n      uri: `/projects/${projectId}/hmacKeys`,\n      qs: query\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, null, resp);\n        return;\n      }\n\n      const hmacKeys = arrify(resp.items).map(hmacKey => {\n        const hmacKeyInstance = this.hmacKey(hmacKey.accessId, {\n          projectId: hmacKey.projectId\n        });\n        hmacKeyInstance.metadata = hmacKey;\n        return hmacKeyInstance;\n      });\n      const nextQuery = resp.nextPageToken ? Object.assign({}, options, {\n        pageToken: resp.nextPageToken\n      }) : null;\n      callback(null, hmacKeys, nextQuery, resp);\n    });\n  }\n  /**\n   * @typedef {array} GetServiceAccountResponse\n   * @property {object} 0 The service account resource.\n   * @property {object} 1 The full\n   * [API\n   * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\n   */\n\n  /**\n   * @callback GetServiceAccountCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} serviceAccount The serviceAccount resource.\n   * @param {string} serviceAccount.emailAddress The service account email\n   *     address.\n   * @param {object} apiResponse The full\n   * [API\n   * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\n   */\n\n  /**\n   * Get the email address of this project's Google Cloud Storage service\n   * account.\n   *\n   * @see [Projects.serviceAccount: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get}\n   * @see [Projects.serviceAccount Resource]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource}\n   *\n   * @param {object} [options] Configuration object.\n   * @param {string} [options.userProject] User project to be billed for this\n   *     request.\n   * @param {GetServiceAccountCallback} [callback] Callback function.\n   * @returns {Promise<GetServiceAccountResponse>}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   *\n   * storage.getServiceAccount(function(err, serviceAccount, apiResponse) {\n   *   if (!err) {\n   *     const serviceAccountEmail = serviceAccount.emailAddress;\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * storage.getServiceAccount().then(function(data) {\n   *   const serviceAccountEmail = data[0].emailAddress;\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  getServiceAccount(optionsOrCallback, cb) {\n    const {\n      options,\n      callback\n    } = util_1.normalize(optionsOrCallback, cb);\n    this.request({\n      uri: `/projects/${this.projectId}/serviceAccount`,\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      const camelCaseResponse = {};\n\n      for (const prop in resp) {\n        if (resp.hasOwnProperty(prop)) {\n          const camelCaseProp = prop.replace(/_(\\w)/g, (_, match) => match.toUpperCase());\n          camelCaseResponse[camelCaseProp] = resp[prop];\n        }\n      }\n\n      callback(null, camelCaseResponse, resp);\n    });\n  }\n  /**\n   * Get a reference to an HmacKey object.\n   * Note: this does not fetch the HMAC key's metadata. Use HmacKey#get() to\n   * retrieve and populate the metadata.\n   *\n   * To get a reference to an HMAC key that's not created for a service\n   * account in the same project used to instantiate the Storage client,\n   * supply the project's ID as `projectId` in the `options` argument.\n   *\n   * @param {string} accessId The HMAC key's access ID.\n   * @param {HmacKeyOptions} options HmacKey constructor owptions.\n   * @returns {HmacKey}\n   * @see HmacKey\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const hmacKey = storage.hmacKey('ACCESS_ID');\n   */\n\n\n  hmacKey(accessId, options) {\n    if (!accessId) {\n      throw new Error('An access ID is needed to create an HmacKey object.');\n    }\n\n    return new hmacKey_1.HmacKey(this, accessId, options);\n  }\n\n}\n\nexports.Storage = Storage;\n/**\n * {@link Bucket} class.\n *\n * @name Storage.Bucket\n * @see Bucket\n * @type {Constructor}\n */\n\nStorage.Bucket = bucket_1.Bucket;\n/**\n * {@link Channel} class.\n *\n * @name Storage.Channel\n * @see Channel\n * @type {Constructor}\n */\n\nStorage.Channel = channel_1.Channel;\n/**\n * {@link File} class.\n *\n * @name Storage.File\n * @see File\n * @type {Constructor}\n */\n\nStorage.File = file_1.File;\n/**\n * {@link HmacKey} class.\n *\n * @name Storage.HmacKey\n * @see HmacKey\n * @type {Constructor}\n */\n\nStorage.HmacKey = hmacKey_1.HmacKey;\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * This object provides constants to refer to the three permission levels that\n * can be granted to an entity:\n *\n *   - `gcs.acl.OWNER_ROLE` - (\"OWNER\")\n *   - `gcs.acl.READER_ROLE` - (\"READER\")\n *   - `gcs.acl.WRITER_ROLE` - (\"WRITER\")\n *\n * @see [About Access Control Lists]{@link https://cloud.google.com/storage/docs/access-control/lists}\n *\n * @name Storage.acl\n * @type {object}\n * @property {string} OWNER_ROLE\n * @property {string} READER_ROLE\n * @property {string} WRITER_ROLE\n *\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const albums = storage.bucket('albums');\n *\n * //-\n * // Make all of the files currently in a bucket publicly readable.\n * //-\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * albums.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // Make any new objects added to a bucket publicly readable.\n * //-\n * albums.acl.default.add(options, function(err, aclObject) {});\n *\n * //-\n * // Grant a user ownership permissions to a bucket.\n * //-\n * albums.acl.add({\n *   entity: 'user-useremail@example.com',\n *   role: storage.acl.OWNER_ROLE\n * }, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * albums.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n */\n\nStorage.acl = {\n  OWNER_ROLE: 'OWNER',\n  READER_ROLE: 'READER',\n  WRITER_ROLE: 'WRITER'\n};\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\n\npaginator_1.paginator.extend(Storage, ['getBuckets', 'getHmacKeys']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Storage, {\n  exclude: ['bucket', 'channel', 'hmacKey']\n});","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/@google-cloud/storage/build/src/storage.js"],"names":["Object","defineProperty","exports","value","common_1","require","paginator_1","promisify_1","arrify","bucket_1","channel_1","file_1","util_1","hmacKey_1","Storage","Service","constructor","options","assign","apiEndpoint","url","process","env","STORAGE_EMULATOR_HOST","config","baseUrl","projectIdRequired","scopes","packageJson","acl","getBucketsStream","paginator","streamify","getHmacKeysStream","bucket","name","Error","Bucket","channel","id","resourceId","Channel","createBucket","metadataOrCallback","callback","metadata","body","storageClasses","archive","coldline","dra","multiRegional","nearline","regional","standard","keys","forEach","storageClass","requesterPays","billing","query","project","projectId","userProject","request","method","uri","qs","json","err","resp","createHmacKey","serviceAccountEmail","optionsOrCb","cb","normalize","hmacKey","accessId","secret","getBuckets","optionsOrCallback","buckets","items","map","bucketInstance","nextQuery","nextPageToken","pageToken","getHmacKeys","hmacKeys","hmacKeyInstance","getServiceAccount","camelCaseResponse","prop","hasOwnProperty","camelCaseProp","replace","_","match","toUpperCase","HmacKey","File","OWNER_ROLE","READER_ROLE","WRITER_ROLE","extend","promisifyAll","exclude"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_1 = require(\"@google-cloud/common\");\nconst paginator_1 = require(\"@google-cloud/paginator\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst arrify = require(\"arrify\");\nconst bucket_1 = require(\"./bucket\");\nconst channel_1 = require(\"./channel\");\nconst file_1 = require(\"./file\");\nconst util_1 = require(\"./util\");\nconst hmacKey_1 = require(\"./hmacKey\");\n/*! Developer Documentation\n *\n * Invoke this method to create a new Storage object bound with pre-determined\n * configuration options. For each object that can be created (e.g., a bucket),\n * there is an equivalent static and instance method. While they are classes,\n * they can be instantiated without use of the `new` keyword.\n */\n/**\n * <h4>ACLs</h4>\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share files with other users\n * and allow other users to access your buckets and files.\n *\n * To learn more about ACLs, read this overview on\n * [Access Control](https://cloud.google.com/storage/docs/access-control).\n *\n * @see [Cloud Storage overview]{@link https://cloud.google.com/storage/docs/overview}\n * @see [Access Control]{@link https://cloud.google.com/storage/docs/access-control}\n *\n * @class\n */\nclass Storage extends common_1.Service {\n    /**\n     * @typedef {object} StorageOptions\n     * @property {string} [projectId] The project ID from the Google Developer's\n     *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n     *     variable `GCLOUD_PROJECT` for your project ID. If your app is running\n     * in an environment which supports {@link\n     * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n     * Application Default Credentials}, your project ID will be detected\n     * automatically.\n     * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n     *     downloaded from the Google Developers Console. If you provide a path to\n     * a JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n     *     .p12 require you to specify the `email` option as well.\n     * @property {string} [email] Account email address. Required when using a .pem\n     *     or .p12 keyFilename.\n     * @property {object} [credentials] Credentials object.\n     * @property {string} [credentials.client_email]\n     * @property {string} [credentials.private_key]\n     * @property {boolean} [autoRetry=true] Automatically retry requests if the\n     *     response is related to rate limits or certain intermittent server\n     * errors. We will exponentially backoff subsequent requests by default.\n     * @property {number} [maxRetries=3] Maximum number of automatic retries\n     *     attempted before returning the error.\n     * @property {Constructor} [promise] Custom promise module to use instead of\n     *     native Promises.\n     */\n    /**\n     * Constructs the Storage client.\n     *\n     * @example <caption>Create a client that uses Application Default Credentials\n     * (ADC)</caption> const {Storage} = require('@google-cloud/storage'); const\n     * storage = new Storage();\n     *\n     * @example <caption>Create a client with explicit credentials</caption>\n     * storage');/storage');\n     * const storage = new Storage({\n     *   projectId: 'your-project-id',\n     *   keyFilename: '/path/to/keyfile.json'\n     * });\n     *\n     * @param {StorageOptions} [options] Configuration options.\n     */\n    constructor(options = {}) {\n        options = Object.assign({}, options, {\n            apiEndpoint: options.apiEndpoint || 'storage.googleapis.com',\n        });\n        const url = process.env.STORAGE_EMULATOR_HOST ||\n            `https://${options.apiEndpoint}/storage/v1`;\n        const config = {\n            apiEndpoint: options.apiEndpoint,\n            baseUrl: url,\n            projectIdRequired: false,\n            scopes: [\n                'https://www.googleapis.com/auth/iam',\n                'https://www.googleapis.com/auth/cloud-platform',\n                'https://www.googleapis.com/auth/devstorage.full_control',\n            ],\n            packageJson: require('../../package.json'),\n        };\n        super(config, options);\n        /**\n         * Reference to {@link Storage.acl}.\n         *\n         * @name Storage#acl\n         * @see Storage.acl\n         */\n        this.acl = Storage.acl;\n        this.getBucketsStream = paginator_1.paginator.streamify('getBuckets');\n        this.getHmacKeysStream = paginator_1.paginator.streamify('getHmacKeys');\n    }\n    /**\n     * Get a reference to a Cloud Storage bucket.\n     *\n     * @param {string} name Name of the bucket.\n     * @param {object} [options] Configuration object.\n     * @param {string} [options.kmsKeyName] A Cloud KMS key that will be used to\n     *     encrypt objects inserted into this bucket, if no encryption method is\n     *     specified.\n     * @param {string} [options.userProject] User project to be billed for all\n     *     requests made from this Bucket object.\n     * @returns {Bucket}\n     * @see Bucket\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const albums = storage.bucket('albums');\n     * const photos = storage.bucket('photos');\n     */\n    bucket(name, options) {\n        if (!name) {\n            throw new Error('A bucket name is needed to use Cloud Storage.');\n        }\n        return new bucket_1.Bucket(this, name, options);\n    }\n    /**\n     * Reference a channel to receive notifications about changes to your bucket.\n     *\n     * @param {string} id The ID of the channel.\n     * @param {string} resourceId The resource ID of the channel.\n     * @returns {Channel}\n     * @see Channel\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const channel = storage.channel('id', 'resource-id');\n     */\n    channel(id, resourceId) {\n        return new channel_1.Channel(this, id, resourceId);\n    }\n    /**\n     * @typedef {array} CreateBucketResponse\n     * @property {Bucket} 0 The new {@link Bucket}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateBucketCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Bucket} bucket The new {@link Bucket}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Metadata to set for the bucket.\n     *\n     * @typedef {object} CreateBucketRequest\n     * @property {boolean} [archive=false] Specify the storage class as Archive.\n     * @property {boolean} [coldline=false] Specify the storage class as Coldline.\n     * @property {Cors[]} [cors=[]] Specify the CORS configuration to use.\n     * @property {boolean} [dra=false] Specify the storage class as Durable Reduced\n     *     Availability.\n     * @property {boolean} [multiRegional=false] Specify the storage class as\n     *     Multi-Regional.\n     * @property {boolean} [nearline=false] Specify the storage class as Nearline.\n     * @property {boolean} [regional=false] Specify the storage class as Regional.\n     * @property {boolean} [requesterPays=false] **Early Access Testers Only**\n     *     Force the use of the User Project metadata field to assign operational\n     *     costs when an operation is made on a Bucket and its objects.\n     * @property {boolean} [standard=true] Specify the storage class as Standard.\n     * @property {string} [userProject] The ID of the project which will be billed\n     *     for the request.\n     */\n    /**\n     * Create a bucket.\n     *\n     * Cloud Storage uses a flat namespace, so you can't create a bucket with\n     * a name that is already in use. For more information, see\n     * [Bucket Naming\n     * Guidelines](https://cloud.google.com/storage/docs/bucketnaming.html#requirements).\n     *\n     * @see [Buckets: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/insert}\n     * @see [Storage Classes]{@link https://cloud.google.com/storage/docs/storage-classes}\n     *\n     * @param {string} name Name of the bucket to create.\n     * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n     * @param {CreateBucketCallback} [callback] Callback function.\n     * @returns {Promise<CreateBucketResponse>}\n     * @throws {Error} If a name is not provided.\n     * @see Bucket#create\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const callback = function(err, bucket, apiResponse) {\n     *   // `bucket` is a Bucket object.\n     * };\n     *\n     * storage.createBucket('new-bucket', callback);\n     *\n     * //-\n     * // Create a bucket in a specific location and region. <em>See the <a\n     * // href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets/insert\">\n     * // Official JSON API docs</a> for complete details on the `location`\n     * option.\n     * // </em>\n     * //-\n     * const metadata = {\n     *   location: 'US-CENTRAL1',\n     *   regional: true\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // Create a bucket with a retention policy of 6 months.\n     * //-\n     * const metadata = {\n     *   retentionPolicy: {\n     *     retentionPeriod: 15780000 // 6 months in seconds.\n     *   }\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // Enable versioning on a new bucket.\n     * //-\n     * const metadata = {\n     *   versioning: {\n     *     enabled: true\n     *   }\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.createBucket('new-bucket').then(function(data) {\n     *   const bucket = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/buckets.js</caption>\n     * region_tag:storage_create_bucket\n     * Another example:\n     */\n    createBucket(name, metadataOrCallback, callback) {\n        if (!name) {\n            throw new Error('A name is required to create a bucket.');\n        }\n        let metadata;\n        if (!callback) {\n            callback = metadataOrCallback;\n            metadata = {};\n        }\n        else {\n            metadata = metadataOrCallback;\n        }\n        const body = Object.assign({}, metadata, { name });\n        const storageClasses = {\n            archive: 'ARCHIVE',\n            coldline: 'COLDLINE',\n            dra: 'DURABLE_REDUCED_AVAILABILITY',\n            multiRegional: 'MULTI_REGIONAL',\n            nearline: 'NEARLINE',\n            regional: 'REGIONAL',\n            standard: 'STANDARD',\n        };\n        Object.keys(storageClasses).forEach(storageClass => {\n            if (body[storageClass]) {\n                body.storageClass = storageClasses[storageClass];\n                delete body[storageClass];\n            }\n        });\n        if (body.requesterPays) {\n            body.billing = {\n                requesterPays: body.requesterPays,\n            };\n            delete body.requesterPays;\n        }\n        const query = {\n            project: this.projectId,\n        };\n        if (body.userProject) {\n            query.userProject = body.userProject;\n            delete body.userProject;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/b',\n            qs: query,\n            json: body,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const bucket = this.bucket(name);\n            bucket.metadata = resp;\n            callback(null, bucket, resp);\n        });\n    }\n    /**\n     * @typedef {object} CreateHmacKeyOptions\n     * @property {string} [projectId] The project ID of the project that owns\n     *     the service account of the requested HMAC key. If not provided,\n     *     the project ID used to instantiate the Storage client will be used.\n     * @property {string} [userProject] This parameter is currently ignored.\n     */\n    /**\n     * @typedef {object} HmacKeyMetadata\n     * @property {string} accessId The access id identifies which HMAC key was\n     *     used to sign a request when authenticating with HMAC.\n     * @property {string} etag Used to perform a read-modify-write of the key.\n     * @property {string} id The resource name of the HMAC key.\n     * @property {string} projectId The project ID.\n     * @property {string} serviceAccountEmail The service account's email this\n     *     HMAC key is created for.\n     * @property {string} state The state of this HMAC key. One of \"ACTIVE\",\n     *     \"INACTIVE\" or \"DELETED\".\n     * @property {string} timeCreated The creation time of the HMAC key in\n     *     RFC 3339 format.\n     * @property {string} [updated] The time this HMAC key was last updated in\n     *     RFC 3339 format.\n     */\n    /**\n     * @typedef {array} CreateHmacKeyResponse\n     * @property {HmacKey} 0 The HmacKey instance created from API response.\n     * @property {string} 1 The HMAC key's secret used to access the XML API.\n     * @property {object} 3 The raw API response.\n     */\n    /**\n     * @callback CreateHmacKeyCallback Callback function.\n     * @param {?Error} err Request error, if any.\n     * @param {HmacKey} hmacKey The HmacKey instance created from API response.\n     * @param {string} secret The HMAC key's secret used to access the XML API.\n     * @param {object} apiResponse The raw API response.\n     */\n    /**\n     * Create an HMAC key associated with an service account to authenticate\n     * requests to the Cloud Storage XML API.\n     *\n     * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys}\n     *\n     * @param {string} serviceAccountEmail The service account's email address\n     *     with which the HMAC key is created for.\n     * @param {CreateHmacKeyCallback} [callback] Callback function.\n     * @return {Promise<CreateHmacKeyResponse>}\n     *\n     * @example\n     * const {Storage} = require('google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * // Replace with your service account's email address\n     * const serviceAccountEmail =\n     *   'my-service-account@appspot.gserviceaccount.com';\n     *\n     * storage.createHmacKey(serviceAccountEmail, function(err, hmacKey, secret) {\n     *   if (!err) {\n     *     // Securely store the secret for use with the XML API.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.createHmacKey(serviceAccountEmail)\n     *   .then((response) => {\n     *     const hmacKey = response[0];\n     *     const secret = response[1];\n     *     // Securely store the secret for use with the XML API.\n     *   });\n     */\n    createHmacKey(serviceAccountEmail, optionsOrCb, cb) {\n        if (typeof serviceAccountEmail !== 'string') {\n            throw new Error('The first argument must be a service account email to create an HMAC key.');\n        }\n        const { options, callback } = util_1.normalize(optionsOrCb, cb);\n        const query = Object.assign({}, options, { serviceAccountEmail });\n        const projectId = query.projectId || this.projectId;\n        delete query.projectId;\n        this.request({\n            method: 'POST',\n            uri: `/projects/${projectId}/hmacKeys`,\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const metadata = resp.metadata;\n            const hmacKey = this.hmacKey(metadata.accessId, {\n                projectId: metadata.projectId,\n            });\n            hmacKey.metadata = resp.metadata;\n            callback(null, hmacKey, resp.secret, resp);\n        });\n    }\n    /**\n     * Query object for listing buckets.\n     *\n     * @typedef {object} GetBucketsRequest\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\n     *     return.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {string} [userProject] The ID of the project which will be billed\n     *     for the request.\n     */\n    /**\n     * @typedef {array} GetBucketsResponse\n     * @property {Bucket[]} 0 Array of {@link Bucket} instances.\n     */\n    /**\n     * @callback GetBucketsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Bucket[]} buckets Array of {@link Bucket} instances.\n     */\n    /**\n     * Get Bucket objects for all of the buckets in your project.\n     *\n     * @see [Buckets: list API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/list}\n     *\n     * @param {GetBucketsRequest} [query] Query object for listing buckets.\n     * @param {GetBucketsCallback} [callback] Callback function.\n     * @returns {Promise<GetBucketsResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * storage.getBuckets(function(err, buckets) {\n     *   if (!err) {\n     *     // buckets is an array of Bucket objects.\n     *   }\n     * });\n     *\n     * //-\n     * // To control how many API requests are made and page through the results\n     * // manually, set `autoPaginate` to `false`.\n     * //-\n     * const callback = function(err, buckets, nextQuery, apiResponse) {\n     *   if (nextQuery) {\n     *     // More results exist.\n     *     storage.getBuckets(nextQuery, callback);\n     *   }\n     *\n     *   // The `metadata` property is populated for you with the metadata at the\n     *   // time of fetching.\n     *   buckets[0].metadata;\n     *\n     *   // However, in cases where you are concerned the metadata could have\n     *   // changed, use the `getMetadata` method.\n     *   buckets[0].getMetadata(function(err, metadata, apiResponse) {});\n     * };\n     *\n     * storage.getBuckets({\n     *   autoPaginate: false\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.getBuckets().then(function(data) {\n     *   const buckets = data[0];\n     * });\n     *\n     * @example <caption>include:samples/buckets.js</caption>\n     * region_tag:storage_list_buckets\n     * Another example:\n     */\n    getBuckets(optionsOrCallback, cb) {\n        const { options, callback } = util_1.normalize(optionsOrCallback, cb);\n        options.project = options.project || this.projectId;\n        this.request({\n            uri: '/b',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const buckets = arrify(resp.items).map((bucket) => {\n                const bucketInstance = this.bucket(bucket.id);\n                bucketInstance.metadata = bucket;\n                return bucketInstance;\n            });\n            const nextQuery = resp.nextPageToken\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\n                : null;\n            callback(null, buckets, nextQuery, resp);\n        });\n    }\n    getHmacKeys(optionsOrCb, cb) {\n        const { options, callback } = util_1.normalize(optionsOrCb, cb);\n        const query = Object.assign({}, options);\n        const projectId = query.projectId || this.projectId;\n        delete query.projectId;\n        this.request({\n            uri: `/projects/${projectId}/hmacKeys`,\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const hmacKeys = arrify(resp.items).map((hmacKey) => {\n                const hmacKeyInstance = this.hmacKey(hmacKey.accessId, {\n                    projectId: hmacKey.projectId,\n                });\n                hmacKeyInstance.metadata = hmacKey;\n                return hmacKeyInstance;\n            });\n            const nextQuery = resp.nextPageToken\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\n                : null;\n            callback(null, hmacKeys, nextQuery, resp);\n        });\n    }\n    /**\n     * @typedef {array} GetServiceAccountResponse\n     * @property {object} 0 The service account resource.\n     * @property {object} 1 The full\n     * [API\n     * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\n     */\n    /**\n     * @callback GetServiceAccountCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} serviceAccount The serviceAccount resource.\n     * @param {string} serviceAccount.emailAddress The service account email\n     *     address.\n     * @param {object} apiResponse The full\n     * [API\n     * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\n     */\n    /**\n     * Get the email address of this project's Google Cloud Storage service\n     * account.\n     *\n     * @see [Projects.serviceAccount: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get}\n     * @see [Projects.serviceAccount Resource]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource}\n     *\n     * @param {object} [options] Configuration object.\n     * @param {string} [options.userProject] User project to be billed for this\n     *     request.\n     * @param {GetServiceAccountCallback} [callback] Callback function.\n     * @returns {Promise<GetServiceAccountResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * storage.getServiceAccount(function(err, serviceAccount, apiResponse) {\n     *   if (!err) {\n     *     const serviceAccountEmail = serviceAccount.emailAddress;\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.getServiceAccount().then(function(data) {\n     *   const serviceAccountEmail = data[0].emailAddress;\n     *   const apiResponse = data[1];\n     * });\n     */\n    getServiceAccount(optionsOrCallback, cb) {\n        const { options, callback } = util_1.normalize(optionsOrCallback, cb);\n        this.request({\n            uri: `/projects/${this.projectId}/serviceAccount`,\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const camelCaseResponse = {};\n            for (const prop in resp) {\n                if (resp.hasOwnProperty(prop)) {\n                    const camelCaseProp = prop.replace(/_(\\w)/g, (_, match) => match.toUpperCase());\n                    camelCaseResponse[camelCaseProp] = resp[prop];\n                }\n            }\n            callback(null, camelCaseResponse, resp);\n        });\n    }\n    /**\n     * Get a reference to an HmacKey object.\n     * Note: this does not fetch the HMAC key's metadata. Use HmacKey#get() to\n     * retrieve and populate the metadata.\n     *\n     * To get a reference to an HMAC key that's not created for a service\n     * account in the same project used to instantiate the Storage client,\n     * supply the project's ID as `projectId` in the `options` argument.\n     *\n     * @param {string} accessId The HMAC key's access ID.\n     * @param {HmacKeyOptions} options HmacKey constructor owptions.\n     * @returns {HmacKey}\n     * @see HmacKey\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const hmacKey = storage.hmacKey('ACCESS_ID');\n     */\n    hmacKey(accessId, options) {\n        if (!accessId) {\n            throw new Error('An access ID is needed to create an HmacKey object.');\n        }\n        return new hmacKey_1.HmacKey(this, accessId, options);\n    }\n}\nexports.Storage = Storage;\n/**\n * {@link Bucket} class.\n *\n * @name Storage.Bucket\n * @see Bucket\n * @type {Constructor}\n */\nStorage.Bucket = bucket_1.Bucket;\n/**\n * {@link Channel} class.\n *\n * @name Storage.Channel\n * @see Channel\n * @type {Constructor}\n */\nStorage.Channel = channel_1.Channel;\n/**\n * {@link File} class.\n *\n * @name Storage.File\n * @see File\n * @type {Constructor}\n */\nStorage.File = file_1.File;\n/**\n * {@link HmacKey} class.\n *\n * @name Storage.HmacKey\n * @see HmacKey\n * @type {Constructor}\n */\nStorage.HmacKey = hmacKey_1.HmacKey;\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * This object provides constants to refer to the three permission levels that\n * can be granted to an entity:\n *\n *   - `gcs.acl.OWNER_ROLE` - (\"OWNER\")\n *   - `gcs.acl.READER_ROLE` - (\"READER\")\n *   - `gcs.acl.WRITER_ROLE` - (\"WRITER\")\n *\n * @see [About Access Control Lists]{@link https://cloud.google.com/storage/docs/access-control/lists}\n *\n * @name Storage.acl\n * @type {object}\n * @property {string} OWNER_ROLE\n * @property {string} READER_ROLE\n * @property {string} WRITER_ROLE\n *\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const albums = storage.bucket('albums');\n *\n * //-\n * // Make all of the files currently in a bucket publicly readable.\n * //-\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * albums.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // Make any new objects added to a bucket publicly readable.\n * //-\n * albums.acl.default.add(options, function(err, aclObject) {});\n *\n * //-\n * // Grant a user ownership permissions to a bucket.\n * //-\n * albums.acl.add({\n *   entity: 'user-useremail@example.com',\n *   role: storage.acl.OWNER_ROLE\n * }, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * albums.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n */\nStorage.acl = {\n    OWNER_ROLE: 'OWNER',\n    READER_ROLE: 'READER',\n    WRITER_ROLE: 'WRITER',\n};\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(Storage, ['getBuckets', 'getHmacKeys']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(Storage, {\n    exclude: ['bucket', 'channel', 'hmacKey'],\n});\n//# sourceMappingURL=storage.js.map"]},"metadata":{},"sourceType":"script"}