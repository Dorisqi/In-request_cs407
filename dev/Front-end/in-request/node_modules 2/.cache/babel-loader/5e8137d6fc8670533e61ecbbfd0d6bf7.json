{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\n\nconst base64js = require(\"base64-js\"); // Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n\n\nif (typeof process === 'undefined' && typeof TextEncoder === 'undefined') {\n  require('fast-text-encoding');\n}\n\nclass BrowserCrypto {\n  constructor() {\n    if (typeof window === 'undefined' || window.crypto === undefined || window.crypto.subtle === undefined) {\n      throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n    }\n  }\n\n  async sha256DigestBase64(str) {\n    // SubtleCrypto digest() method is async, so we must make\n    // this method async as well.\n    // To calculate SHA256 digest using SubtleCrypto, we first\n    // need to convert an input string to an ArrayBuffer:\n    const inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n    const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n    return base64js.fromByteArray(new Uint8Array(outputBuffer));\n  }\n\n  randomBytesBase64(count) {\n    const array = new Uint8Array(count);\n    window.crypto.getRandomValues(array);\n    return base64js.fromByteArray(array);\n  }\n\n  static padBase64(base64) {\n    // base64js requires padding, so let's add some '='\n    while (base64.length % 4 !== 0) {\n      base64 += '=';\n    }\n\n    return base64;\n  }\n\n  async verify(pubkey, data, signature) {\n    const algo = {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: {\n        name: 'SHA-256'\n      }\n    };\n    const dataArray = new TextEncoder().encode(data);\n    const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n    const cryptoKey = await window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']); // SubtleCrypto's verify method is async so we must make\n    // this method async as well.\n\n    const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n    return result;\n  }\n\n  async sign(privateKey, data) {\n    const algo = {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: {\n        name: 'SHA-256'\n      }\n    };\n    const dataArray = new TextEncoder().encode(data);\n    const cryptoKey = await window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']); // SubtleCrypto's sign method is async so we must make\n    // this method async as well.\n\n    const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n    return base64js.fromByteArray(new Uint8Array(result));\n  }\n\n  decodeBase64StringUtf8(base64) {\n    const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64));\n    const result = new TextDecoder().decode(uint8array);\n    return result;\n  }\n\n  encodeBase64StringUtf8(text) {\n    const uint8array = new TextEncoder().encode(text);\n    const result = base64js.fromByteArray(uint8array);\n    return result;\n  }\n\n}\n\nexports.BrowserCrypto = BrowserCrypto;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/google-auth-library/build/src/crypto/browser/crypto.js"],"names":["Object","defineProperty","exports","value","base64js","require","process","TextEncoder","BrowserCrypto","constructor","window","crypto","undefined","subtle","Error","sha256DigestBase64","str","inputBuffer","encode","outputBuffer","digest","fromByteArray","Uint8Array","randomBytesBase64","count","array","getRandomValues","padBase64","base64","length","verify","pubkey","data","signature","algo","name","hash","dataArray","signatureArray","toByteArray","cryptoKey","importKey","result","sign","privateKey","decodeBase64StringUtf8","uint8array","TextDecoder","decode","encodeBase64StringUtf8","text"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\nconst base64js = require(\"base64-js\");\n// Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\nif (typeof process === 'undefined' && typeof TextEncoder === 'undefined') {\n    require('fast-text-encoding');\n}\nclass BrowserCrypto {\n    constructor() {\n        if (typeof window === 'undefined' ||\n            window.crypto === undefined ||\n            window.crypto.subtle === undefined) {\n            throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n        }\n    }\n    async sha256DigestBase64(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n        return base64js.fromByteArray(new Uint8Array(outputBuffer));\n    }\n    randomBytesBase64(count) {\n        const array = new Uint8Array(count);\n        window.crypto.getRandomValues(array);\n        return base64js.fromByteArray(array);\n    }\n    static padBase64(base64) {\n        // base64js requires padding, so let's add some '='\n        while (base64.length % 4 !== 0) {\n            base64 += '=';\n        }\n        return base64;\n    }\n    async verify(pubkey, data, signature) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        const dataArray = new TextEncoder().encode(data);\n        const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']);\n        // SubtleCrypto's verify method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n        return result;\n    }\n    async sign(privateKey, data) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        const dataArray = new TextEncoder().encode(data);\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']);\n        // SubtleCrypto's sign method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n        return base64js.fromByteArray(new Uint8Array(result));\n    }\n    decodeBase64StringUtf8(base64) {\n        const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64));\n        const result = new TextDecoder().decode(uint8array);\n        return result;\n    }\n    encodeBase64StringUtf8(text) {\n        const uint8array = new TextEncoder().encode(text);\n        const result = base64js.fromByteArray(uint8array);\n        return result;\n    }\n}\nexports.BrowserCrypto = BrowserCrypto;\n//# sourceMappingURL=crypto.js.map"]},"metadata":{},"sourceType":"script"}