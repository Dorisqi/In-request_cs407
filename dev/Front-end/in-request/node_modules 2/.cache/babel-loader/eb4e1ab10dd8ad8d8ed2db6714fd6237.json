{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs\");\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst jws = require(\"jws\");\n\nconst mime = require(\"mime\");\n\nconst util_1 = require(\"util\");\n\nconst readFile = fs.readFile ? util_1.promisify(fs.readFile) : async () => {\n  // if running in the web-browser, fs.readFile may not have been shimmed.\n  throw new ErrorWithCode('use key rather than keyFile.', 'MISSING_CREDENTIALS');\n};\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\n\nclass ErrorWithCode extends Error {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n  }\n\n}\n\nlet getPem;\n\nclass GoogleToken {\n  /**\n   * Create a GoogleToken.\n   *\n   * @param options  Configuration object.\n   */\n  constructor(options) {\n    this.configure(options);\n  }\n\n  get accessToken() {\n    return this.rawToken ? this.rawToken.access_token : undefined;\n  }\n\n  get idToken() {\n    return this.rawToken ? this.rawToken.id_token : undefined;\n  }\n\n  get tokenType() {\n    return this.rawToken ? this.rawToken.token_type : undefined;\n  }\n\n  get refreshToken() {\n    return this.rawToken ? this.rawToken.refresh_token : undefined;\n  }\n  /**\n   * Returns whether the token has expired.\n   *\n   * @return true if the token has expired, false otherwise.\n   */\n\n\n  hasExpired() {\n    const now = new Date().getTime();\n\n    if (this.rawToken && this.expiresAt) {\n      return now >= this.expiresAt;\n    } else {\n      return true;\n    }\n  }\n\n  getToken(callback, opts = {}) {\n    if (typeof callback === 'object') {\n      opts = callback;\n      callback = undefined;\n    }\n\n    opts = Object.assign({\n      forceRefresh: false\n    }, opts);\n\n    if (callback) {\n      const cb = callback;\n      this.getTokenAsync(opts).then(t => cb(null, t), callback);\n      return;\n    }\n\n    return this.getTokenAsync(opts);\n  }\n  /**\n   * Given a keyFile, extract the key and client email if available\n   * @param keyFile Path to a json, pem, or p12 file that contains the key.\n   * @returns an object with privateKey and clientEmail properties\n   */\n\n\n  async getCredentials(keyFile) {\n    const mimeType = mime.getType(keyFile);\n\n    switch (mimeType) {\n      case 'application/json':\n        {\n          // *.json file\n          const key = await readFile(keyFile, 'utf8');\n          const body = JSON.parse(key);\n          const privateKey = body.private_key;\n          const clientEmail = body.client_email;\n\n          if (!privateKey || !clientEmail) {\n            throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n          }\n\n          return {\n            privateKey,\n            clientEmail\n          };\n        }\n\n      case 'application/x-x509-ca-cert':\n        {\n          // *.pem file\n          const privateKey = await readFile(keyFile, 'utf8');\n          return {\n            privateKey\n          };\n        }\n\n      case 'application/x-pkcs12':\n        {\n          // *.p12 file\n          // NOTE:  The loading of `google-p12-pem` is deferred for performance\n          // reasons.  The `node-forge` npm module in `google-p12-pem` adds a fair\n          // bit time to overall module loading, and is likely not frequently\n          // used.  In a future release, p12 support will be entirely removed.\n          if (!getPem) {\n            getPem = (await Promise.resolve().then(() => require('google-p12-pem'))).getPem;\n          }\n\n          const privateKey = await getPem(keyFile);\n          return {\n            privateKey\n          };\n        }\n\n      default:\n        throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' + 'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n    }\n  }\n\n  async getTokenAsync(opts) {\n    if (this.hasExpired() === false && opts.forceRefresh === false) {\n      return Promise.resolve(this.rawToken);\n    }\n\n    if (!this.key && !this.keyFile) {\n      throw new Error('No key or keyFile set.');\n    }\n\n    if (!this.key && this.keyFile) {\n      const creds = await this.getCredentials(this.keyFile);\n      this.key = creds.privateKey;\n      this.iss = creds.clientEmail || this.iss;\n\n      if (!creds.clientEmail) {\n        this.ensureEmail();\n      }\n    }\n\n    return this.requestToken();\n  }\n\n  ensureEmail() {\n    if (!this.iss) {\n      throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n    }\n  }\n\n  revokeToken(callback) {\n    if (callback) {\n      this.revokeTokenAsync().then(() => callback(), callback);\n      return;\n    }\n\n    return this.revokeTokenAsync();\n  }\n\n  async revokeTokenAsync() {\n    if (!this.accessToken) {\n      throw new Error('No token to revoke.');\n    }\n\n    const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\n    await gaxios_1.request({\n      url\n    });\n    this.configure({\n      email: this.iss,\n      sub: this.sub,\n      key: this.key,\n      keyFile: this.keyFile,\n      scope: this.scope,\n      additionalClaims: this.additionalClaims\n    });\n  }\n  /**\n   * Configure the GoogleToken for re-use.\n   * @param  {object} options Configuration object.\n   */\n\n\n  configure(options = {}) {\n    this.keyFile = options.keyFile;\n    this.key = options.key;\n    this.rawToken = undefined;\n    this.iss = options.email || options.iss;\n    this.sub = options.sub;\n    this.additionalClaims = options.additionalClaims;\n\n    if (typeof options.scope === 'object') {\n      this.scope = options.scope.join(' ');\n    } else {\n      this.scope = options.scope;\n    }\n  }\n  /**\n   * Request the token from Google.\n   */\n\n\n  async requestToken() {\n    const iat = Math.floor(new Date().getTime() / 1000);\n    const additionalClaims = this.additionalClaims || {};\n    const payload = Object.assign({\n      iss: this.iss,\n      scope: this.scope,\n      aud: GOOGLE_TOKEN_URL,\n      exp: iat + 3600,\n      iat,\n      sub: this.sub\n    }, additionalClaims);\n    const signedJWT = jws.sign({\n      header: {\n        alg: 'RS256'\n      },\n      payload,\n      secret: this.key\n    });\n\n    try {\n      const r = await gaxios_1.request({\n        method: 'POST',\n        url: GOOGLE_TOKEN_URL,\n        data: {\n          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n          assertion: signedJWT\n        },\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        responseType: 'json'\n      });\n      this.rawToken = r.data;\n      this.expiresAt = r.data.expires_in === null || r.data.expires_in === undefined ? undefined : (iat + r.data.expires_in) * 1000;\n      return this.rawToken;\n    } catch (e) {\n      this.rawToken = undefined;\n      this.tokenExpires = undefined;\n      const body = e.response && e.response.data ? e.response.data : {};\n\n      if (body.error) {\n        const desc = body.error_description ? `: ${body.error_description}` : '';\n        e.message = `${body.error}${desc}`;\n      }\n\n      throw e;\n    }\n  }\n\n}\n\nexports.GoogleToken = GoogleToken;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/gtoken/build/src/index.js"],"names":["Object","defineProperty","exports","value","fs","require","gaxios_1","jws","mime","util_1","readFile","promisify","ErrorWithCode","GOOGLE_TOKEN_URL","GOOGLE_REVOKE_TOKEN_URL","Error","constructor","message","code","getPem","GoogleToken","options","configure","accessToken","rawToken","access_token","undefined","idToken","id_token","tokenType","token_type","refreshToken","refresh_token","hasExpired","now","Date","getTime","expiresAt","getToken","callback","opts","assign","forceRefresh","cb","getTokenAsync","then","t","getCredentials","keyFile","mimeType","getType","key","body","JSON","parse","privateKey","private_key","clientEmail","client_email","Promise","resolve","creds","iss","ensureEmail","requestToken","revokeToken","revokeTokenAsync","url","request","email","sub","scope","additionalClaims","join","iat","Math","floor","payload","aud","exp","signedJWT","sign","header","alg","secret","r","method","data","grant_type","assertion","headers","responseType","expires_in","e","tokenExpires","response","error","desc","error_description"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst gaxios_1 = require(\"gaxios\");\nconst jws = require(\"jws\");\nconst mime = require(\"mime\");\nconst util_1 = require(\"util\");\nconst readFile = fs.readFile\n    ? util_1.promisify(fs.readFile)\n    : async () => {\n        // if running in the web-browser, fs.readFile may not have been shimmed.\n        throw new ErrorWithCode('use key rather than keyFile.', 'MISSING_CREDENTIALS');\n    };\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\nclass ErrorWithCode extends Error {\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nlet getPem;\nclass GoogleToken {\n    /**\n     * Create a GoogleToken.\n     *\n     * @param options  Configuration object.\n     */\n    constructor(options) {\n        this.configure(options);\n    }\n    get accessToken() {\n        return this.rawToken ? this.rawToken.access_token : undefined;\n    }\n    get idToken() {\n        return this.rawToken ? this.rawToken.id_token : undefined;\n    }\n    get tokenType() {\n        return this.rawToken ? this.rawToken.token_type : undefined;\n    }\n    get refreshToken() {\n        return this.rawToken ? this.rawToken.refresh_token : undefined;\n    }\n    /**\n     * Returns whether the token has expired.\n     *\n     * @return true if the token has expired, false otherwise.\n     */\n    hasExpired() {\n        const now = new Date().getTime();\n        if (this.rawToken && this.expiresAt) {\n            return now >= this.expiresAt;\n        }\n        else {\n            return true;\n        }\n    }\n    getToken(callback, opts = {}) {\n        if (typeof callback === 'object') {\n            opts = callback;\n            callback = undefined;\n        }\n        opts = Object.assign({\n            forceRefresh: false,\n        }, opts);\n        if (callback) {\n            const cb = callback;\n            this.getTokenAsync(opts).then(t => cb(null, t), callback);\n            return;\n        }\n        return this.getTokenAsync(opts);\n    }\n    /**\n     * Given a keyFile, extract the key and client email if available\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\n     * @returns an object with privateKey and clientEmail properties\n     */\n    async getCredentials(keyFile) {\n        const mimeType = mime.getType(keyFile);\n        switch (mimeType) {\n            case 'application/json': {\n                // *.json file\n                const key = await readFile(keyFile, 'utf8');\n                const body = JSON.parse(key);\n                const privateKey = body.private_key;\n                const clientEmail = body.client_email;\n                if (!privateKey || !clientEmail) {\n                    throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n                }\n                return { privateKey, clientEmail };\n            }\n            case 'application/x-x509-ca-cert': {\n                // *.pem file\n                const privateKey = await readFile(keyFile, 'utf8');\n                return { privateKey };\n            }\n            case 'application/x-pkcs12': {\n                // *.p12 file\n                // NOTE:  The loading of `google-p12-pem` is deferred for performance\n                // reasons.  The `node-forge` npm module in `google-p12-pem` adds a fair\n                // bit time to overall module loading, and is likely not frequently\n                // used.  In a future release, p12 support will be entirely removed.\n                if (!getPem) {\n                    getPem = (await Promise.resolve().then(() => require('google-p12-pem'))).getPem;\n                }\n                const privateKey = await getPem(keyFile);\n                return { privateKey };\n            }\n            default:\n                throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' +\n                    'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n        }\n    }\n    async getTokenAsync(opts) {\n        if (this.hasExpired() === false && opts.forceRefresh === false) {\n            return Promise.resolve(this.rawToken);\n        }\n        if (!this.key && !this.keyFile) {\n            throw new Error('No key or keyFile set.');\n        }\n        if (!this.key && this.keyFile) {\n            const creds = await this.getCredentials(this.keyFile);\n            this.key = creds.privateKey;\n            this.iss = creds.clientEmail || this.iss;\n            if (!creds.clientEmail) {\n                this.ensureEmail();\n            }\n        }\n        return this.requestToken();\n    }\n    ensureEmail() {\n        if (!this.iss) {\n            throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n        }\n    }\n    revokeToken(callback) {\n        if (callback) {\n            this.revokeTokenAsync().then(() => callback(), callback);\n            return;\n        }\n        return this.revokeTokenAsync();\n    }\n    async revokeTokenAsync() {\n        if (!this.accessToken) {\n            throw new Error('No token to revoke.');\n        }\n        const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\n        await gaxios_1.request({ url });\n        this.configure({\n            email: this.iss,\n            sub: this.sub,\n            key: this.key,\n            keyFile: this.keyFile,\n            scope: this.scope,\n            additionalClaims: this.additionalClaims,\n        });\n    }\n    /**\n     * Configure the GoogleToken for re-use.\n     * @param  {object} options Configuration object.\n     */\n    configure(options = {}) {\n        this.keyFile = options.keyFile;\n        this.key = options.key;\n        this.rawToken = undefined;\n        this.iss = options.email || options.iss;\n        this.sub = options.sub;\n        this.additionalClaims = options.additionalClaims;\n        if (typeof options.scope === 'object') {\n            this.scope = options.scope.join(' ');\n        }\n        else {\n            this.scope = options.scope;\n        }\n    }\n    /**\n     * Request the token from Google.\n     */\n    async requestToken() {\n        const iat = Math.floor(new Date().getTime() / 1000);\n        const additionalClaims = this.additionalClaims || {};\n        const payload = Object.assign({\n            iss: this.iss,\n            scope: this.scope,\n            aud: GOOGLE_TOKEN_URL,\n            exp: iat + 3600,\n            iat,\n            sub: this.sub,\n        }, additionalClaims);\n        const signedJWT = jws.sign({\n            header: { alg: 'RS256' },\n            payload,\n            secret: this.key,\n        });\n        try {\n            const r = await gaxios_1.request({\n                method: 'POST',\n                url: GOOGLE_TOKEN_URL,\n                data: {\n                    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                    assertion: signedJWT,\n                },\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                responseType: 'json',\n            });\n            this.rawToken = r.data;\n            this.expiresAt =\n                r.data.expires_in === null || r.data.expires_in === undefined\n                    ? undefined\n                    : (iat + r.data.expires_in) * 1000;\n            return this.rawToken;\n        }\n        catch (e) {\n            this.rawToken = undefined;\n            this.tokenExpires = undefined;\n            const body = e.response && e.response.data ? e.response.data : {};\n            if (body.error) {\n                const desc = body.error_description\n                    ? `: ${body.error_description}`\n                    : '';\n                e.message = `${body.error}${desc}`;\n            }\n            throw e;\n        }\n    }\n}\nexports.GoogleToken = GoogleToken;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}