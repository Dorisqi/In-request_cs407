{"ast":null,"code":"/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar credential_1 = require(\"./credential\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar validator = require(\"../utils/validator\");\n\nvar utils_1 = require(\"../utils\");\n\nvar ALGORITHM_RS256 = 'RS256';\nvar ONE_HOUR_IN_SECONDS = 60 * 60; // List of blacklisted claims which cannot be provided when creating a custom token\n\nexports.BLACKLISTED_CLAIMS = ['acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat', 'iss', 'jti', 'nbf', 'nonce']; // Audience to use for Firebase Auth Custom tokens\n\nvar FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\n/**\n * A CryptoSigner implementation that uses an explicitly specified service account private key to\n * sign data. Performs all operations locally, and does not make any RPC calls.\n */\n\nvar ServiceAccountSigner =\n/** @class */\nfunction () {\n  /**\n   * Creates a new CryptoSigner instance from the given service account credential.\n   *\n   * @param {ServiceAccountCredential} credential A service account credential.\n   */\n  function ServiceAccountSigner(credential) {\n    this.credential = credential;\n\n    if (!credential) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a service account credential to initialize ServiceAccountSigner.');\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  ServiceAccountSigner.prototype.sign = function (buffer) {\n    var crypto = require('crypto');\n\n    var sign = crypto.createSign('RSA-SHA256');\n    sign.update(buffer);\n    return Promise.resolve(sign.sign(this.credential.privateKey));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ServiceAccountSigner.prototype.getAccountId = function () {\n    return Promise.resolve(this.credential.clientEmail);\n  };\n\n  return ServiceAccountSigner;\n}();\n\nexports.ServiceAccountSigner = ServiceAccountSigner;\n/**\n * A CryptoSigner implementation that uses the remote IAM service to sign data. If initialized without\n * a service account ID, attempts to discover a service account ID by consulting the local Metadata\n * service. This will succeed in managed environments like Google Cloud Functions and App Engine.\n *\n * @see https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signBlob\n * @see https://cloud.google.com/compute/docs/storing-retrieving-metadata\n */\n\nvar IAMSigner =\n/** @class */\nfunction () {\n  function IAMSigner(httpClient, serviceAccountId) {\n    if (!httpClient) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'INTERNAL ASSERT: Must provide a HTTP client to initialize IAMSigner.');\n    }\n\n    if (typeof serviceAccountId !== 'undefined' && !validator.isNonEmptyString(serviceAccountId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'INTERNAL ASSERT: Service account ID must be undefined or a non-empty string.');\n    }\n\n    this.httpClient = httpClient;\n    this.serviceAccountId = serviceAccountId;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  IAMSigner.prototype.sign = function (buffer) {\n    var _this = this;\n\n    return this.getAccountId().then(function (serviceAccount) {\n      var request = {\n        method: 'POST',\n        url: \"https://iam.googleapis.com/v1/projects/-/serviceAccounts/\" + serviceAccount + \":signBlob\",\n        data: {\n          bytesToSign: buffer.toString('base64')\n        }\n      };\n      return _this.httpClient.send(request);\n    }).then(function (response) {\n      // Response from IAM is base64 encoded. Decode it into a buffer and return.\n      return Buffer.from(response.data.signature, 'base64');\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        var error = err.response.data;\n\n        if (validator.isNonNullObject(error) && error.error) {\n          var errorCode = error.error.status;\n          var description = 'Please refer to https://firebase.google.com/docs/auth/admin/create-custom-tokens ' + 'for more details on how to use and troubleshoot this feature.';\n          var errorMsg = error.error.message + \"; \" + description;\n          throw error_1.FirebaseAuthError.fromServerError(errorCode, errorMsg, error);\n        }\n\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Error returned from server: ' + error + '. Additionally, an ' + 'internal error occurred while attempting to extract the ' + 'errorcode from the error.');\n      }\n\n      throw err;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  IAMSigner.prototype.getAccountId = function () {\n    var _this = this;\n\n    if (validator.isNonEmptyString(this.serviceAccountId)) {\n      return Promise.resolve(this.serviceAccountId);\n    }\n\n    var request = {\n      method: 'GET',\n      url: 'http://metadata/computeMetadata/v1/instance/service-accounts/default/email',\n      headers: {\n        'Metadata-Flavor': 'Google'\n      }\n    };\n    var client = new api_request_1.HttpClient();\n    return client.send(request).then(function (response) {\n      if (!response.text) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'HTTP Response missing payload');\n      }\n\n      _this.serviceAccountId = response.text;\n      return response.text;\n    }).catch(function (err) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, \"Failed to determine service account. Make sure to initialize \" + \"the SDK with a service account credential. Alternatively specify a service \" + (\"account with iam.serviceAccounts.signBlob permission. Original error: \" + err));\n    });\n  };\n\n  return IAMSigner;\n}();\n\nexports.IAMSigner = IAMSigner;\n/**\n * Create a new CryptoSigner instance for the given app. If the app has been initialized with a service\n * account credential, creates a ServiceAccountSigner. Otherwise creates an IAMSigner.\n *\n * @param {FirebaseApp} app A FirebaseApp instance.\n * @return {CryptoSigner} A CryptoSigner instance.\n */\n\nfunction cryptoSignerFromApp(app) {\n  var credential = app.options.credential;\n\n  if (credential instanceof credential_1.ServiceAccountCredential) {\n    return new ServiceAccountSigner(credential);\n  }\n\n  return new IAMSigner(new api_request_1.AuthorizedHttpClient(app), app.options.serviceAccountId);\n}\n\nexports.cryptoSignerFromApp = cryptoSignerFromApp;\n/**\n * Class for generating different types of Firebase Auth tokens (JWTs).\n */\n\nvar FirebaseTokenGenerator =\n/** @class */\nfunction () {\n  /**\n   * @param tenantId The tenant ID to use for the generated Firebase Auth\n   *     Custom token. If absent, then no tenant ID claim will be set in the\n   *     resulting JWT.\n   */\n  function FirebaseTokenGenerator(signer, tenantId) {\n    this.tenantId = tenantId;\n\n    if (!validator.isNonNullObject(signer)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a CryptoSigner to use FirebaseTokenGenerator.');\n    }\n\n    if (typeof tenantId !== 'undefined' && !validator.isNonEmptyString(tenantId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`tenantId` argument must be a non-empty string.');\n    }\n\n    this.signer = signer;\n  }\n  /**\n   * Creates a new Firebase Auth Custom token.\n   *\n   * @param uid The user ID to use for the generated Firebase Auth Custom token.\n   * @param developerClaims Optional developer claims to include in the generated Firebase\n   *     Auth Custom token.\n   * @return A Promise fulfilled with a Firebase Auth Custom token signed with a\n   *     service account key and containing the provided payload.\n   */\n\n\n  FirebaseTokenGenerator.prototype.createCustomToken = function (uid, developerClaims) {\n    var _this = this;\n\n    var errorMessage;\n\n    if (!validator.isNonEmptyString(uid)) {\n      errorMessage = '`uid` argument must be a non-empty string uid.';\n    } else if (uid.length > 128) {\n      errorMessage = '`uid` argument must a uid with less than or equal to 128 characters.';\n    } else if (!this.isDeveloperClaimsValid_(developerClaims)) {\n      errorMessage = '`developerClaims` argument must be a valid, non-null object containing the developer claims.';\n    }\n\n    if (errorMessage) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    }\n\n    var claims = {};\n\n    if (typeof developerClaims !== 'undefined') {\n      for (var key in developerClaims) {\n        /* istanbul ignore else */\n        if (developerClaims.hasOwnProperty(key)) {\n          if (exports.BLACKLISTED_CLAIMS.indexOf(key) !== -1) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Developer claim \\\"\" + key + \"\\\" is reserved and cannot be specified.\");\n          }\n\n          claims[key] = developerClaims[key];\n        }\n      }\n    }\n\n    return this.signer.getAccountId().then(function (account) {\n      var header = {\n        alg: ALGORITHM_RS256,\n        typ: 'JWT'\n      };\n      var iat = Math.floor(Date.now() / 1000);\n      var body = {\n        aud: FIREBASE_AUDIENCE,\n        iat: iat,\n        exp: iat + ONE_HOUR_IN_SECONDS,\n        iss: account,\n        sub: account,\n        uid: uid\n      };\n\n      if (_this.tenantId) {\n        body.tenant_id = _this.tenantId;\n      }\n\n      if (Object.keys(claims).length > 0) {\n        body.claims = claims;\n      }\n\n      var token = _this.encodeSegment(header) + \".\" + _this.encodeSegment(body);\n\n      var signPromise = _this.signer.sign(Buffer.from(token));\n\n      return Promise.all([token, signPromise]);\n    }).then(function (_a) {\n      var token = _a[0],\n          signature = _a[1];\n      return token + \".\" + _this.encodeSegment(signature);\n    });\n  };\n\n  FirebaseTokenGenerator.prototype.encodeSegment = function (segment) {\n    var buffer = segment instanceof Buffer ? segment : Buffer.from(JSON.stringify(segment));\n    return utils_1.toWebSafeBase64(buffer).replace(/\\=+$/, '');\n  };\n  /**\n   * Returns whether or not the provided developer claims are valid.\n   *\n   * @param {object} [developerClaims] Optional developer claims to validate.\n   * @return {boolean} True if the provided claims are valid; otherwise, false.\n   */\n\n\n  FirebaseTokenGenerator.prototype.isDeveloperClaimsValid_ = function (developerClaims) {\n    if (typeof developerClaims === 'undefined') {\n      return true;\n    }\n\n    return validator.isNonNullObject(developerClaims);\n  };\n\n  return FirebaseTokenGenerator;\n}();\n\nexports.FirebaseTokenGenerator = FirebaseTokenGenerator;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/firebase-admin/lib/auth/token-generator.js"],"names":["Object","defineProperty","exports","value","credential_1","require","error_1","api_request_1","validator","utils_1","ALGORITHM_RS256","ONE_HOUR_IN_SECONDS","BLACKLISTED_CLAIMS","FIREBASE_AUDIENCE","ServiceAccountSigner","credential","FirebaseAuthError","AuthClientErrorCode","INVALID_CREDENTIAL","prototype","sign","buffer","crypto","createSign","update","Promise","resolve","privateKey","getAccountId","clientEmail","IAMSigner","httpClient","serviceAccountId","INVALID_ARGUMENT","isNonEmptyString","_this","then","serviceAccount","request","method","url","data","bytesToSign","toString","send","response","Buffer","from","signature","catch","err","HttpError","error","isNonNullObject","errorCode","status","description","errorMsg","message","fromServerError","INTERNAL_ERROR","headers","client","HttpClient","text","cryptoSignerFromApp","app","options","ServiceAccountCredential","AuthorizedHttpClient","FirebaseTokenGenerator","signer","tenantId","createCustomToken","uid","developerClaims","errorMessage","length","isDeveloperClaimsValid_","claims","key","hasOwnProperty","indexOf","account","header","alg","typ","iat","Math","floor","Date","now","body","aud","exp","iss","sub","tenant_id","keys","token","encodeSegment","signPromise","all","_a","segment","JSON","stringify","toWebSafeBase64","replace"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar credential_1 = require(\"./credential\");\nvar error_1 = require(\"../utils/error\");\nvar api_request_1 = require(\"../utils/api-request\");\nvar validator = require(\"../utils/validator\");\nvar utils_1 = require(\"../utils\");\nvar ALGORITHM_RS256 = 'RS256';\nvar ONE_HOUR_IN_SECONDS = 60 * 60;\n// List of blacklisted claims which cannot be provided when creating a custom token\nexports.BLACKLISTED_CLAIMS = [\n    'acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat', 'iss', 'jti',\n    'nbf', 'nonce',\n];\n// Audience to use for Firebase Auth Custom tokens\nvar FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\n/**\n * A CryptoSigner implementation that uses an explicitly specified service account private key to\n * sign data. Performs all operations locally, and does not make any RPC calls.\n */\nvar ServiceAccountSigner = /** @class */ (function () {\n    /**\n     * Creates a new CryptoSigner instance from the given service account credential.\n     *\n     * @param {ServiceAccountCredential} credential A service account credential.\n     */\n    function ServiceAccountSigner(credential) {\n        this.credential = credential;\n        if (!credential) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a service account credential to initialize ServiceAccountSigner.');\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    ServiceAccountSigner.prototype.sign = function (buffer) {\n        var crypto = require('crypto');\n        var sign = crypto.createSign('RSA-SHA256');\n        sign.update(buffer);\n        return Promise.resolve(sign.sign(this.credential.privateKey));\n    };\n    /**\n     * @inheritDoc\n     */\n    ServiceAccountSigner.prototype.getAccountId = function () {\n        return Promise.resolve(this.credential.clientEmail);\n    };\n    return ServiceAccountSigner;\n}());\nexports.ServiceAccountSigner = ServiceAccountSigner;\n/**\n * A CryptoSigner implementation that uses the remote IAM service to sign data. If initialized without\n * a service account ID, attempts to discover a service account ID by consulting the local Metadata\n * service. This will succeed in managed environments like Google Cloud Functions and App Engine.\n *\n * @see https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signBlob\n * @see https://cloud.google.com/compute/docs/storing-retrieving-metadata\n */\nvar IAMSigner = /** @class */ (function () {\n    function IAMSigner(httpClient, serviceAccountId) {\n        if (!httpClient) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'INTERNAL ASSERT: Must provide a HTTP client to initialize IAMSigner.');\n        }\n        if (typeof serviceAccountId !== 'undefined' && !validator.isNonEmptyString(serviceAccountId)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'INTERNAL ASSERT: Service account ID must be undefined or a non-empty string.');\n        }\n        this.httpClient = httpClient;\n        this.serviceAccountId = serviceAccountId;\n    }\n    /**\n     * @inheritDoc\n     */\n    IAMSigner.prototype.sign = function (buffer) {\n        var _this = this;\n        return this.getAccountId().then(function (serviceAccount) {\n            var request = {\n                method: 'POST',\n                url: \"https://iam.googleapis.com/v1/projects/-/serviceAccounts/\" + serviceAccount + \":signBlob\",\n                data: { bytesToSign: buffer.toString('base64') },\n            };\n            return _this.httpClient.send(request);\n        }).then(function (response) {\n            // Response from IAM is base64 encoded. Decode it into a buffer and return.\n            return Buffer.from(response.data.signature, 'base64');\n        }).catch(function (err) {\n            if (err instanceof api_request_1.HttpError) {\n                var error = err.response.data;\n                if (validator.isNonNullObject(error) && error.error) {\n                    var errorCode = error.error.status;\n                    var description = 'Please refer to https://firebase.google.com/docs/auth/admin/create-custom-tokens ' +\n                        'for more details on how to use and troubleshoot this feature.';\n                    var errorMsg = error.error.message + \"; \" + description;\n                    throw error_1.FirebaseAuthError.fromServerError(errorCode, errorMsg, error);\n                }\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Error returned from server: ' + error + '. Additionally, an ' +\n                    'internal error occurred while attempting to extract the ' +\n                    'errorcode from the error.');\n            }\n            throw err;\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    IAMSigner.prototype.getAccountId = function () {\n        var _this = this;\n        if (validator.isNonEmptyString(this.serviceAccountId)) {\n            return Promise.resolve(this.serviceAccountId);\n        }\n        var request = {\n            method: 'GET',\n            url: 'http://metadata/computeMetadata/v1/instance/service-accounts/default/email',\n            headers: {\n                'Metadata-Flavor': 'Google',\n            },\n        };\n        var client = new api_request_1.HttpClient();\n        return client.send(request).then(function (response) {\n            if (!response.text) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'HTTP Response missing payload');\n            }\n            _this.serviceAccountId = response.text;\n            return response.text;\n        }).catch(function (err) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, \"Failed to determine service account. Make sure to initialize \" +\n                \"the SDK with a service account credential. Alternatively specify a service \" +\n                (\"account with iam.serviceAccounts.signBlob permission. Original error: \" + err));\n        });\n    };\n    return IAMSigner;\n}());\nexports.IAMSigner = IAMSigner;\n/**\n * Create a new CryptoSigner instance for the given app. If the app has been initialized with a service\n * account credential, creates a ServiceAccountSigner. Otherwise creates an IAMSigner.\n *\n * @param {FirebaseApp} app A FirebaseApp instance.\n * @return {CryptoSigner} A CryptoSigner instance.\n */\nfunction cryptoSignerFromApp(app) {\n    var credential = app.options.credential;\n    if (credential instanceof credential_1.ServiceAccountCredential) {\n        return new ServiceAccountSigner(credential);\n    }\n    return new IAMSigner(new api_request_1.AuthorizedHttpClient(app), app.options.serviceAccountId);\n}\nexports.cryptoSignerFromApp = cryptoSignerFromApp;\n/**\n * Class for generating different types of Firebase Auth tokens (JWTs).\n */\nvar FirebaseTokenGenerator = /** @class */ (function () {\n    /**\n     * @param tenantId The tenant ID to use for the generated Firebase Auth\n     *     Custom token. If absent, then no tenant ID claim will be set in the\n     *     resulting JWT.\n     */\n    function FirebaseTokenGenerator(signer, tenantId) {\n        this.tenantId = tenantId;\n        if (!validator.isNonNullObject(signer)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a CryptoSigner to use FirebaseTokenGenerator.');\n        }\n        if (typeof tenantId !== 'undefined' && !validator.isNonEmptyString(tenantId)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`tenantId` argument must be a non-empty string.');\n        }\n        this.signer = signer;\n    }\n    /**\n     * Creates a new Firebase Auth Custom token.\n     *\n     * @param uid The user ID to use for the generated Firebase Auth Custom token.\n     * @param developerClaims Optional developer claims to include in the generated Firebase\n     *     Auth Custom token.\n     * @return A Promise fulfilled with a Firebase Auth Custom token signed with a\n     *     service account key and containing the provided payload.\n     */\n    FirebaseTokenGenerator.prototype.createCustomToken = function (uid, developerClaims) {\n        var _this = this;\n        var errorMessage;\n        if (!validator.isNonEmptyString(uid)) {\n            errorMessage = '`uid` argument must be a non-empty string uid.';\n        }\n        else if (uid.length > 128) {\n            errorMessage = '`uid` argument must a uid with less than or equal to 128 characters.';\n        }\n        else if (!this.isDeveloperClaimsValid_(developerClaims)) {\n            errorMessage = '`developerClaims` argument must be a valid, non-null object containing the developer claims.';\n        }\n        if (errorMessage) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n        }\n        var claims = {};\n        if (typeof developerClaims !== 'undefined') {\n            for (var key in developerClaims) {\n                /* istanbul ignore else */\n                if (developerClaims.hasOwnProperty(key)) {\n                    if (exports.BLACKLISTED_CLAIMS.indexOf(key) !== -1) {\n                        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Developer claim \\\"\" + key + \"\\\" is reserved and cannot be specified.\");\n                    }\n                    claims[key] = developerClaims[key];\n                }\n            }\n        }\n        return this.signer.getAccountId().then(function (account) {\n            var header = {\n                alg: ALGORITHM_RS256,\n                typ: 'JWT',\n            };\n            var iat = Math.floor(Date.now() / 1000);\n            var body = {\n                aud: FIREBASE_AUDIENCE,\n                iat: iat,\n                exp: iat + ONE_HOUR_IN_SECONDS,\n                iss: account,\n                sub: account,\n                uid: uid,\n            };\n            if (_this.tenantId) {\n                body.tenant_id = _this.tenantId;\n            }\n            if (Object.keys(claims).length > 0) {\n                body.claims = claims;\n            }\n            var token = _this.encodeSegment(header) + \".\" + _this.encodeSegment(body);\n            var signPromise = _this.signer.sign(Buffer.from(token));\n            return Promise.all([token, signPromise]);\n        }).then(function (_a) {\n            var token = _a[0], signature = _a[1];\n            return token + \".\" + _this.encodeSegment(signature);\n        });\n    };\n    FirebaseTokenGenerator.prototype.encodeSegment = function (segment) {\n        var buffer = (segment instanceof Buffer) ? segment : Buffer.from(JSON.stringify(segment));\n        return utils_1.toWebSafeBase64(buffer).replace(/\\=+$/, '');\n    };\n    /**\n     * Returns whether or not the provided developer claims are valid.\n     *\n     * @param {object} [developerClaims] Optional developer claims to validate.\n     * @return {boolean} True if the provided claims are valid; otherwise, false.\n     */\n    FirebaseTokenGenerator.prototype.isDeveloperClaimsValid_ = function (developerClaims) {\n        if (typeof developerClaims === 'undefined') {\n            return true;\n        }\n        return validator.isNonNullObject(developerClaims);\n    };\n    return FirebaseTokenGenerator;\n}());\nexports.FirebaseTokenGenerator = FirebaseTokenGenerator;\n"]},"metadata":{},"sourceType":"script"}