{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst metadata_1 = require(\"./metadata\");\n/**\n * A class that represents a generic method of adding authentication-related\n * metadata on a per-request basis.\n */\n\n\nclass CallCredentials {\n  /**\n   * Creates a new CallCredentials object from a given function that generates\n   * Metadata objects.\n   * @param metadataGenerator A function that accepts a set of options, and\n   * generates a Metadata object based on these options, which is passed back\n   * to the caller via a supplied (err, metadata) callback.\n   */\n  static createFromMetadataGenerator(metadataGenerator) {\n    return new SingleCallCredentials(metadataGenerator);\n  }\n\n  static createEmpty() {\n    return new EmptyCallCredentials();\n  }\n\n}\n\nexports.CallCredentials = CallCredentials;\n\nclass ComposedCallCredentials extends CallCredentials {\n  constructor(creds) {\n    super();\n    this.creds = creds;\n  }\n\n  async generateMetadata(options) {\n    const base = new metadata_1.Metadata();\n    const generated = await Promise.all(this.creds.map(cred => cred.generateMetadata(options)));\n\n    for (const gen of generated) {\n      base.merge(gen);\n    }\n\n    return base;\n  }\n\n  compose(other) {\n    return new ComposedCallCredentials(this.creds.concat([other]));\n  }\n\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof ComposedCallCredentials) {\n      return this.creds.every((value, index) => value._equals(other.creds[index]));\n    } else {\n      return false;\n    }\n  }\n\n}\n\nclass SingleCallCredentials extends CallCredentials {\n  constructor(metadataGenerator) {\n    super();\n    this.metadataGenerator = metadataGenerator;\n  }\n\n  generateMetadata(options) {\n    return new Promise((resolve, reject) => {\n      this.metadataGenerator(options, (err, metadata) => {\n        if (metadata !== undefined) {\n          resolve(metadata);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  compose(other) {\n    return new ComposedCallCredentials([this, other]);\n  }\n\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof SingleCallCredentials) {\n      return this.metadataGenerator === other.metadataGenerator;\n    } else {\n      return false;\n    }\n  }\n\n}\n\nclass EmptyCallCredentials extends CallCredentials {\n  generateMetadata(options) {\n    return Promise.resolve(new metadata_1.Metadata());\n  }\n\n  compose(other) {\n    return other;\n  }\n\n  _equals(other) {\n    return other instanceof EmptyCallCredentials;\n  }\n\n}","map":{"version":3,"sources":["../../src/call-credentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst metadata_1 = require(\"./metadata\");\n/**\n * A class that represents a generic method of adding authentication-related\n * metadata on a per-request basis.\n */\nclass CallCredentials {\n    /**\n     * Creates a new CallCredentials object from a given function that generates\n     * Metadata objects.\n     * @param metadataGenerator A function that accepts a set of options, and\n     * generates a Metadata object based on these options, which is passed back\n     * to the caller via a supplied (err, metadata) callback.\n     */\n    static createFromMetadataGenerator(metadataGenerator) {\n        return new SingleCallCredentials(metadataGenerator);\n    }\n    static createEmpty() {\n        return new EmptyCallCredentials();\n    }\n}\nexports.CallCredentials = CallCredentials;\nclass ComposedCallCredentials extends CallCredentials {\n    constructor(creds) {\n        super();\n        this.creds = creds;\n    }\n    async generateMetadata(options) {\n        const base = new metadata_1.Metadata();\n        const generated = await Promise.all(this.creds.map(cred => cred.generateMetadata(options)));\n        for (const gen of generated) {\n            base.merge(gen);\n        }\n        return base;\n    }\n    compose(other) {\n        return new ComposedCallCredentials(this.creds.concat([other]));\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ComposedCallCredentials) {\n            return this.creds.every((value, index) => value._equals(other.creds[index]));\n        }\n        else {\n            return false;\n        }\n    }\n}\nclass SingleCallCredentials extends CallCredentials {\n    constructor(metadataGenerator) {\n        super();\n        this.metadataGenerator = metadataGenerator;\n    }\n    generateMetadata(options) {\n        return new Promise((resolve, reject) => {\n            this.metadataGenerator(options, (err, metadata) => {\n                if (metadata !== undefined) {\n                    resolve(metadata);\n                }\n                else {\n                    reject(err);\n                }\n            });\n        });\n    }\n    compose(other) {\n        return new ComposedCallCredentials([this, other]);\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof SingleCallCredentials) {\n            return this.metadataGenerator === other.metadataGenerator;\n        }\n        else {\n            return false;\n        }\n    }\n}\nclass EmptyCallCredentials extends CallCredentials {\n    generateMetadata(options) {\n        return Promise.resolve(new metadata_1.Metadata());\n    }\n    compose(other) {\n        return other;\n    }\n    _equals(other) {\n        return other instanceof EmptyCallCredentials;\n    }\n}\n//# sourceMappingURL=call-credentials.js.map"]},"metadata":{},"sourceType":"script"}