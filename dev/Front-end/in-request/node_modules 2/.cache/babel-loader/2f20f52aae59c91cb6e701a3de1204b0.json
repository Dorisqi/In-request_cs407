{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * @module common/service\n */\n\nconst arrify = require(\"arrify\");\n\nconst extend = require(\"extend\");\n\nconst util_1 = require(\"./util\");\n\nconst PROJECT_ID_TOKEN = '{{projectId}}';\n\nclass Service {\n  /**\n   * Service is a base class, meant to be inherited from by a \"service,\" like\n   * BigQuery or Storage.\n   *\n   * This handles making authenticated requests by exposing a `makeReq_`\n   * function.\n   *\n   * @constructor\n   * @alias module:common/service\n   *\n   * @param {object} config - Configuration object.\n   * @param {string} config.baseUrl - The base URL to make API requests to.\n   * @param {string[]} config.scopes - The scopes required for the request.\n   * @param {object=} options - [Configuration object](#/docs).\n   */\n  constructor(config, options = {}) {\n    this.baseUrl = config.baseUrl;\n    this.apiEndpoint = config.apiEndpoint;\n    this.timeout = options.timeout;\n    this.globalInterceptors = arrify(options.interceptors_);\n    this.interceptors = [];\n    this.packageJson = config.packageJson;\n    this.projectId = options.projectId || PROJECT_ID_TOKEN;\n    this.projectIdRequired = config.projectIdRequired !== false;\n    this.Promise = options.promise || Promise;\n    const reqCfg = extend({}, config, {\n      projectIdRequired: this.projectIdRequired,\n      projectId: this.projectId,\n      credentials: options.credentials,\n      keyFile: options.keyFilename,\n      email: options.email,\n      token: options.token\n    });\n    this.makeAuthenticatedRequest = util_1.util.makeAuthenticatedRequestFactory(reqCfg);\n    this.authClient = this.makeAuthenticatedRequest.authClient;\n    this.getCredentials = this.makeAuthenticatedRequest.getCredentials;\n    const isCloudFunctionEnv = !!process.env.FUNCTION_NAME;\n\n    if (isCloudFunctionEnv) {\n      this.interceptors.push({\n        request(reqOpts) {\n          reqOpts.forever = false;\n          return reqOpts;\n        }\n\n      });\n    }\n  }\n\n  getProjectId(callback) {\n    if (!callback) {\n      return this.getProjectIdAsync();\n    }\n\n    this.getProjectIdAsync().then(p => callback(null, p), callback);\n  }\n\n  async getProjectIdAsync() {\n    const projectId = await this.authClient.getProjectId();\n\n    if (this.projectId === PROJECT_ID_TOKEN && projectId) {\n      this.projectId = projectId;\n    }\n\n    return this.projectId;\n  }\n\n  request_(reqOpts, callback) {\n    reqOpts = extend(true, {}, reqOpts, {\n      timeout: this.timeout\n    });\n    const isAbsoluteUrl = reqOpts.uri.indexOf('http') === 0;\n    const uriComponents = [this.baseUrl];\n\n    if (this.projectIdRequired) {\n      uriComponents.push('projects');\n      uriComponents.push(this.projectId);\n    }\n\n    uriComponents.push(reqOpts.uri);\n\n    if (isAbsoluteUrl) {\n      uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));\n    }\n\n    reqOpts.uri = uriComponents.map(uriComponent => {\n      const trimSlashesRegex = /^\\/*|\\/*$/g;\n      return uriComponent.replace(trimSlashesRegex, '');\n    }).join('/') // Some URIs have colon separators.\n    // Bad: https://.../projects/:list\n    // Good: https://.../projects:list\n    .replace(/\\/:/g, ':'); // Interceptors should be called in the order they were assigned.\n\n    const combinedInterceptors = [].slice.call(this.globalInterceptors).concat(this.interceptors).concat(arrify(reqOpts.interceptors_));\n    let interceptor;\n\n    while ( // tslint:disable-next-line:no-conditional-assignment\n    (interceptor = combinedInterceptors.shift()) && interceptor.request) {\n      reqOpts = interceptor.request(reqOpts);\n    }\n\n    delete reqOpts.interceptors_;\n    const pkg = this.packageJson;\n    reqOpts.headers = extend({}, reqOpts.headers, {\n      'User-Agent': util_1.util.getUserAgentFromPackageJson(pkg),\n      'x-goog-api-client': `gl-node/${process.versions.node} gccl/${pkg.version}`\n    });\n\n    if (reqOpts.shouldReturnStream) {\n      return this.makeAuthenticatedRequest(reqOpts);\n    } else {\n      this.makeAuthenticatedRequest(reqOpts, callback);\n    }\n  }\n  /**\n   * Make an authenticated API request.\n   *\n   * @param {object} reqOpts - Request options that are passed to `request`.\n   * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n   * @param {function} callback - The callback function passed to `request`.\n   */\n\n\n  request(reqOpts, callback) {\n    Service.prototype.request_.call(this, reqOpts, callback);\n  }\n  /**\n   * Make an authenticated API request.\n   *\n   * @param {object} reqOpts - Request options that are passed to `request`.\n   * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n   */\n\n\n  requestStream(reqOpts) {\n    const opts = extend(true, reqOpts, {\n      shouldReturnStream: true\n    });\n    return Service.prototype.request_.call(this, opts);\n  }\n\n}\n\nexports.Service = Service;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/@google-cloud/common/build/src/service.js"],"names":["Object","defineProperty","exports","value","arrify","require","extend","util_1","PROJECT_ID_TOKEN","Service","constructor","config","options","baseUrl","apiEndpoint","timeout","globalInterceptors","interceptors_","interceptors","packageJson","projectId","projectIdRequired","Promise","promise","reqCfg","credentials","keyFile","keyFilename","email","token","makeAuthenticatedRequest","util","makeAuthenticatedRequestFactory","authClient","getCredentials","isCloudFunctionEnv","process","env","FUNCTION_NAME","push","request","reqOpts","forever","getProjectId","callback","getProjectIdAsync","then","p","request_","isAbsoluteUrl","uri","indexOf","uriComponents","splice","map","uriComponent","trimSlashesRegex","replace","join","combinedInterceptors","slice","call","concat","interceptor","shift","pkg","headers","getUserAgentFromPackageJson","versions","node","version","shouldReturnStream","prototype","requestStream","opts"],"mappings":"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","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*!\n * @module common/service\n */\nconst arrify = require(\"arrify\");\nconst extend = require(\"extend\");\nconst util_1 = require(\"./util\");\nconst PROJECT_ID_TOKEN = '{{projectId}}';\nclass Service {\n    /**\n     * Service is a base class, meant to be inherited from by a \"service,\" like\n     * BigQuery or Storage.\n     *\n     * This handles making authenticated requests by exposing a `makeReq_`\n     * function.\n     *\n     * @constructor\n     * @alias module:common/service\n     *\n     * @param {object} config - Configuration object.\n     * @param {string} config.baseUrl - The base URL to make API requests to.\n     * @param {string[]} config.scopes - The scopes required for the request.\n     * @param {object=} options - [Configuration object](#/docs).\n     */\n    constructor(config, options = {}) {\n        this.baseUrl = config.baseUrl;\n        this.apiEndpoint = config.apiEndpoint;\n        this.timeout = options.timeout;\n        this.globalInterceptors = arrify(options.interceptors_);\n        this.interceptors = [];\n        this.packageJson = config.packageJson;\n        this.projectId = options.projectId || PROJECT_ID_TOKEN;\n        this.projectIdRequired = config.projectIdRequired !== false;\n        this.Promise = options.promise || Promise;\n        const reqCfg = extend({}, config, {\n            projectIdRequired: this.projectIdRequired,\n            projectId: this.projectId,\n            credentials: options.credentials,\n            keyFile: options.keyFilename,\n            email: options.email,\n            token: options.token,\n        });\n        this.makeAuthenticatedRequest = util_1.util.makeAuthenticatedRequestFactory(reqCfg);\n        this.authClient = this.makeAuthenticatedRequest.authClient;\n        this.getCredentials = this.makeAuthenticatedRequest.getCredentials;\n        const isCloudFunctionEnv = !!process.env.FUNCTION_NAME;\n        if (isCloudFunctionEnv) {\n            this.interceptors.push({\n                request(reqOpts) {\n                    reqOpts.forever = false;\n                    return reqOpts;\n                },\n            });\n        }\n    }\n    getProjectId(callback) {\n        if (!callback) {\n            return this.getProjectIdAsync();\n        }\n        this.getProjectIdAsync().then(p => callback(null, p), callback);\n    }\n    async getProjectIdAsync() {\n        const projectId = await this.authClient.getProjectId();\n        if (this.projectId === PROJECT_ID_TOKEN && projectId) {\n            this.projectId = projectId;\n        }\n        return this.projectId;\n    }\n    request_(reqOpts, callback) {\n        reqOpts = extend(true, {}, reqOpts, { timeout: this.timeout });\n        const isAbsoluteUrl = reqOpts.uri.indexOf('http') === 0;\n        const uriComponents = [this.baseUrl];\n        if (this.projectIdRequired) {\n            uriComponents.push('projects');\n            uriComponents.push(this.projectId);\n        }\n        uriComponents.push(reqOpts.uri);\n        if (isAbsoluteUrl) {\n            uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));\n        }\n        reqOpts.uri = uriComponents\n            .map(uriComponent => {\n            const trimSlashesRegex = /^\\/*|\\/*$/g;\n            return uriComponent.replace(trimSlashesRegex, '');\n        })\n            .join('/')\n            // Some URIs have colon separators.\n            // Bad: https://.../projects/:list\n            // Good: https://.../projects:list\n            .replace(/\\/:/g, ':');\n        // Interceptors should be called in the order they were assigned.\n        const combinedInterceptors = [].slice\n            .call(this.globalInterceptors)\n            .concat(this.interceptors)\n            .concat(arrify(reqOpts.interceptors_));\n        let interceptor;\n        while (\n        // tslint:disable-next-line:no-conditional-assignment\n        (interceptor = combinedInterceptors.shift()) &&\n            interceptor.request) {\n            reqOpts = interceptor.request(reqOpts);\n        }\n        delete reqOpts.interceptors_;\n        const pkg = this.packageJson;\n        reqOpts.headers = extend({}, reqOpts.headers, {\n            'User-Agent': util_1.util.getUserAgentFromPackageJson(pkg),\n            'x-goog-api-client': `gl-node/${process.versions.node} gccl/${pkg.version}`,\n        });\n        if (reqOpts.shouldReturnStream) {\n            return this.makeAuthenticatedRequest(reqOpts);\n        }\n        else {\n            this.makeAuthenticatedRequest(reqOpts, callback);\n        }\n    }\n    /**\n     * Make an authenticated API request.\n     *\n     * @param {object} reqOpts - Request options that are passed to `request`.\n     * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n     * @param {function} callback - The callback function passed to `request`.\n     */\n    request(reqOpts, callback) {\n        Service.prototype.request_.call(this, reqOpts, callback);\n    }\n    /**\n     * Make an authenticated API request.\n     *\n     * @param {object} reqOpts - Request options that are passed to `request`.\n     * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n     */\n    requestStream(reqOpts) {\n        const opts = extend(true, reqOpts, { shouldReturnStream: true });\n        return Service.prototype.request_.call(this, opts);\n    }\n}\nexports.Service = Service;\n//# sourceMappingURL=service.js.map"]},"metadata":{},"sourceType":"script"}