{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(DropButton) {\n  var DocumentedDropButton = describe(DropButton).availableAt(getAvailableAtBadge('DropButton')).description(\"A Button that controls a Drop. When opened, the Drop will contain\\n      whatever is specified via `dropContent`. The Drop will control the focus\\n      so that the contents behind it are not focusable. All properties and \\n      theme properties of Button or Drop can be passed through.\\n      \").usage(\"import { DropButton } from 'grommet';\\n<DropButton dropContent={...} />\").intrinsicElement('button');\n  DocumentedDropButton.propTypes = _extends({}, genericProps, {\n    disabled: PropTypes.bool.description('Whether the button should be disabled.').defaultValue(false),\n    dropAlign: PropTypes.shape({\n      top: PropTypes.oneOf(['top', 'bottom']),\n      bottom: PropTypes.oneOf(['top', 'bottom']),\n      right: PropTypes.oneOf(['left', 'right']),\n      left: PropTypes.oneOf(['left', 'right'])\n    }).description('How to align the drop with respect to the button.').defaultValue({\n      top: 'top',\n      left: 'left'\n    }),\n    dropContent: PropTypes.element.description('Content to put inside the Drop.').isRequired,\n    dropTarget: PropTypes.object.description(\"Target where the drop will be aligned to. This should be\\n      a React reference. Typically, this is not required as the drop will be\\n      aligned to the DropButton itself by default.\"),\n    dropProps: PropTypes.object.description('Any valid Drop prop.'),\n    onClose: PropTypes.func.description('Callback for when the drop is closed'),\n    onOpen: PropTypes.func.description('Callback for when the drop is opened'),\n    open: PropTypes.bool.description(\"Whether the drop should be open or not. Setting this property does not\\n      influence user interaction after it has been rendered.\").defaultValue(false)\n  });\n  return DocumentedDropButton;\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/DropButton/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","genericProps","getAvailableAtBadge","doc","DropButton","DocumentedDropButton","availableAt","description","usage","intrinsicElement","propTypes","disabled","bool","defaultValue","dropAlign","shape","top","oneOf","bottom","right","left","dropContent","element","isRequired","dropTarget","object","dropProps","onClose","func","onOpen","open"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(DropButton) {\n  var DocumentedDropButton = describe(DropButton).availableAt(getAvailableAtBadge('DropButton')).description(\"A Button that controls a Drop. When opened, the Drop will contain\\n      whatever is specified via `dropContent`. The Drop will control the focus\\n      so that the contents behind it are not focusable. All properties and \\n      theme properties of Button or Drop can be passed through.\\n      \").usage(\"import { DropButton } from 'grommet';\\n<DropButton dropContent={...} />\").intrinsicElement('button');\n  DocumentedDropButton.propTypes = _extends({}, genericProps, {\n    disabled: PropTypes.bool.description('Whether the button should be disabled.').defaultValue(false),\n    dropAlign: PropTypes.shape({\n      top: PropTypes.oneOf(['top', 'bottom']),\n      bottom: PropTypes.oneOf(['top', 'bottom']),\n      right: PropTypes.oneOf(['left', 'right']),\n      left: PropTypes.oneOf(['left', 'right'])\n    }).description('How to align the drop with respect to the button.').defaultValue({\n      top: 'top',\n      left: 'left'\n    }),\n    dropContent: PropTypes.element.description('Content to put inside the Drop.').isRequired,\n    dropTarget: PropTypes.object.description(\"Target where the drop will be aligned to. This should be\\n      a React reference. Typically, this is not required as the drop will be\\n      aligned to the DropButton itself by default.\"),\n    dropProps: PropTypes.object.description('Any valid Drop prop.'),\n    onClose: PropTypes.func.description('Callback for when the drop is closed'),\n    onOpen: PropTypes.func.description('Callback for when the drop is opened'),\n    open: PropTypes.bool.description(\"Whether the drop should be open or not. Setting this property does not\\n      influence user interaction after it has been rendered.\").defaultValue(false)\n  });\n  return DocumentedDropButton;\n};"]},"metadata":{},"sourceType":"module"}