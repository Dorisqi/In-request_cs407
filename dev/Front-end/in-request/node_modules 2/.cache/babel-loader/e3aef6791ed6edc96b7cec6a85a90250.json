{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst stream_1 = require(\"stream\");\n\nconst through2 = require(\"through2\");\n\nconst url_1 = require(\"url\");\n\nconst backoff_1 = require(\"./backoff\");\n\nconst convert_1 = require(\"./convert\");\n\nconst document_1 = require(\"./document\");\n\nconst logger_1 = require(\"./logger\");\n\nconst path_1 = require(\"./path\");\n\nconst pool_1 = require(\"./pool\");\n\nconst reference_1 = require(\"./reference\");\n\nconst reference_2 = require(\"./reference\");\n\nconst serializer_1 = require(\"./serializer\");\n\nconst timestamp_1 = require(\"./timestamp\");\n\nconst transaction_1 = require(\"./transaction\");\n\nconst util_1 = require(\"./util\");\n\nconst validate_1 = require(\"./validate\");\n\nconst write_batch_1 = require(\"./write-batch\");\n\nconst firestore_client_config_json_1 = require(\"./v1/firestore_client_config.json\");\n\nconst serviceConfig = firestore_client_config_json_1.interfaces['google.firestore.v1.Firestore'];\n\nvar reference_3 = require(\"./reference\");\n\nexports.CollectionReference = reference_3.CollectionReference;\nexports.DocumentReference = reference_3.DocumentReference;\nexports.QuerySnapshot = reference_3.QuerySnapshot;\nexports.Query = reference_3.Query;\n\nvar document_2 = require(\"./document\");\n\nexports.DocumentSnapshot = document_2.DocumentSnapshot;\nexports.QueryDocumentSnapshot = document_2.QueryDocumentSnapshot;\n\nvar field_value_1 = require(\"./field-value\");\n\nexports.FieldValue = field_value_1.FieldValue;\n\nvar write_batch_2 = require(\"./write-batch\");\n\nexports.WriteBatch = write_batch_2.WriteBatch;\nexports.WriteResult = write_batch_2.WriteResult;\n\nvar transaction_2 = require(\"./transaction\");\n\nexports.Transaction = transaction_2.Transaction;\n\nvar timestamp_2 = require(\"./timestamp\");\n\nexports.Timestamp = timestamp_2.Timestamp;\n\nvar document_change_1 = require(\"./document-change\");\n\nexports.DocumentChange = document_change_1.DocumentChange;\n\nvar path_2 = require(\"./path\");\n\nexports.FieldPath = path_2.FieldPath;\n\nvar geo_point_1 = require(\"./geo-point\");\n\nexports.GeoPoint = geo_point_1.GeoPoint;\n\nvar logger_2 = require(\"./logger\");\n\nexports.setLogFunction = logger_2.setLogFunction;\n\nvar google_gax_1 = require(\"google-gax\");\n\nexports.GrpcStatus = google_gax_1.Status;\n\nconst libVersion = require('../../package.json').version;\n\nlogger_1.setLibVersion(libVersion);\n/*!\n * DO NOT REMOVE THE FOLLOWING NAMESPACE DEFINITIONS\n */\n\n/**\n * @namespace google.protobuf\n */\n\n/**\n * @namespace google.rpc\n */\n\n/**\n * @namespace google.longrunning\n */\n\n/**\n * @namespace google.firestore.v1\n */\n\n/**\n * @namespace google.firestore.v1beta1\n */\n\n/**\n * @namespace google.firestore.admin.v1\n */\n\n/*!\n * @see v1\n */\n\nlet v1; // Lazy-loaded in `_runRequest()`\n\n/*!\n * @see v1beta1\n */\n\nlet v1beta1; // Lazy-loaded upon access.\n\n/*!\n * HTTP header for the resource prefix to improve routing and project isolation\n * by the backend.\n */\n\nconst CLOUD_RESOURCE_HEADER = 'google-cloud-resource-prefix';\n/*!\n * The maximum number of times to retry idempotent requests.\n */\n\nconst MAX_REQUEST_RETRIES = 5;\n/*!\n * The default number of idle GRPC channel to keep.\n */\n\nconst DEFAULT_MAX_IDLE_CHANNELS = 1;\n/*!\n * The maximum number of concurrent requests supported by a single GRPC channel,\n * as enforced by Google's Frontend. If the SDK issues more than 100 concurrent\n * operations, we need to use more than one GAPIC client since these clients\n * multiplex all requests over a single channel.\n */\n\nconst MAX_CONCURRENT_REQUESTS_PER_CLIENT = 100;\n/**\n * Document data (e.g. for use with\n * [set()]{@link DocumentReference#set}) consisting of fields mapped\n * to values.\n *\n * @typedef {Object.<string, *>} DocumentData\n */\n\n/**\n * Update data (for use with [update]{@link DocumentReference#update})\n * that contains paths (e.g. 'foo' or 'foo.baz') mapped to values. Fields that\n * contain dots reference nested fields within the document.\n *\n * @typedef {Object.<string, *>} UpdateData\n */\n\n/**\n * An options object that configures conditional behavior of\n * [update()]{@link DocumentReference#update} and\n * [delete()]{@link DocumentReference#delete} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. Using Preconditions, these calls\n * can be restricted to only apply to documents that match the specified\n * conditions.\n *\n * @example\n * const documentRef = firestore.doc('coll/doc');\n *\n * documentRef.get().then(snapshot => {\n *   const updateTime = snapshot.updateTime;\n *\n *   console.log(`Deleting document at update time: ${updateTime.toDate()}`);\n *   return documentRef.delete({ lastUpdateTime: updateTime });\n * });\n *\n * @property {Timestamp} lastUpdateTime The update time to enforce. If set,\n *  enforces that the document was last updated at lastUpdateTime. Fails the\n *  operation if the document was last updated at a different time.\n * @typedef {Object} Precondition\n */\n\n/**\n * An options object that configures the behavior of\n * [set()]{@link DocumentReference#set} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. These calls can be\n * configured to perform granular merges instead of overwriting the target\n * documents in their entirety by providing a SetOptions object with\n * { merge : true }.\n *\n * @property {boolean} merge Changes the behavior of a set() call to only\n * replace the values specified in its data argument. Fields omitted from the\n * set() call remain untouched.\n * @property {Array<(string|FieldPath)>} mergeFields Changes the behavior of\n * set() calls to only replace the specified field paths. Any field path that is\n * not specified is ignored and remains untouched.\n * It is an error to pass a SetOptions object to a set() call that is missing a\n * value for any of the fields specified here.\n * @typedef {Object} SetOptions\n */\n\n/**\n * An options object that can be used to configure the behavior of\n * [getAll()]{@link Firestore#getAll} calls. By providing a `fieldMask`, these\n * calls can be configured to only return a subset of fields.\n *\n * @property {Array<(string|FieldPath)>} fieldMask Specifies the set of fields\n * to return and reduces the amount of data transmitted by the backend.\n * Adding a field mask does not filter results. Documents do not need to\n * contain values for all the fields in the mask to be part of the result set.\n * @typedef {Object} ReadOptions\n */\n\n/**\n * The Firestore client represents a Firestore Database and is the entry point\n * for all Firestore operations.\n *\n * @see [Firestore Documentation]{@link https://firebase.google.com/docs/firestore/}\n *\n * @class\n *\n * @example <caption>Install the client library with <a\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\n * @google-cloud/firestore\n *\n * @example <caption>Import the client library</caption>\n * var Firestore = require('@google-cloud/firestore');\n *\n * @example <caption>Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\n *\n * @example <caption>Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\n\nclass Firestore {\n  /**\n   * @param {Object=} settings [Configuration object](#/docs).\n   * @param {string=} settings.projectId The project ID from the Google\n   * Developer's Console, e.g. 'grape-spaceship-123'. We will also check the\n   * environment variable GCLOUD_PROJECT for your project ID.  Can be omitted in\n   * environments that support\n   * {@link https://cloud.google.com/docs/authentication Application Default\n   * Credentials}\n   * @param {string=} settings.keyFilename Local file containing the Service\n   * Account credentials as downloaded from the Google Developers Console. Can\n   * be omitted in environments that support\n   * {@link https://cloud.google.com/docs/authentication Application Default\n   * Credentials}. To configure Firestore with custom credentials, use\n   * `settings.credentials` and provide the `client_email` and `private_key` of\n   * your service account.\n   * @param {{client_email:string=, private_key:string=}=} settings.credentials\n   * The `client_email` and `private_key` properties of the service account\n   * to use with your Firestore project. Can be omitted in environments that\n   * support {@link https://cloud.google.com/docs/authentication Application\n   * Default Credentials}. If your credentials are stored in a JSON file, you\n   * can specify a `keyFilename` instead.\n   * @param {string=} settings.host The host to connect to.\n   * @param {boolean=} settings.ssl Whether to use SSL when connecting.\n   * @param {number=} settings.maxIdleChannels  The maximum number of idle GRPC\n   * channels to keep. A smaller number of idle channels reduces memory usage\n   * but increases request latency for clients with fluctuating request rates.\n   * If set to 0, shuts down all GRPC channels when the client becomes idle.\n   * Defaults to 1.\n   */\n  constructor(settings) {\n    /**\n     * The configuration options for the GAPIC client.\n     * @private\n     */\n    this._settings = {};\n    /**\n     * Whether the initialization settings can still be changed by invoking\n     * `settings()`.\n     * @private\n     */\n\n    this._settingsFrozen = false;\n    /**\n     * The serializer to use for the Protobuf transformation.\n     * @private\n     */\n\n    this._serializer = null;\n    /**\n     * The project ID for this client.\n     *\n     * The project ID is auto-detected during the first request unless a project\n     * ID is passed to the constructor (or provided via `.settings()`).\n     * @private\n     */\n\n    this._projectId = undefined;\n    /**\n     * Count of listeners that have been registered on the client.\n     *\n     * The client can only be terminated when there are no registered listeners.\n     * @private\n     */\n\n    this.registeredListenersCount = 0;\n    /** @private */\n\n    this._lastSuccessfulRequest = 0;\n    const libraryHeader = {\n      libName: 'gccl',\n      libVersion\n    };\n\n    if (settings && settings.firebaseVersion) {\n      libraryHeader.libVersion += ' fire/' + settings.firebaseVersion;\n    }\n\n    if (process.env.FIRESTORE_EMULATOR_HOST) {\n      validate_1.validateHost('FIRESTORE_EMULATOR_HOST', process.env.FIRESTORE_EMULATOR_HOST);\n      const emulatorSettings = Object.assign(Object.assign(Object.assign({}, settings), libraryHeader), {\n        host: process.env.FIRESTORE_EMULATOR_HOST,\n        ssl: false\n      }); // If FIRESTORE_EMULATOR_HOST is set, we unset `servicePath` and `apiEndpoint` to\n      // ensure that only one endpoint setting is provided.\n\n      delete emulatorSettings.servicePath;\n      delete emulatorSettings.apiEndpoint; // Manually merge the Authorization header to preserve user-provided headers\n\n      emulatorSettings.customHeaders = Object.assign({}, emulatorSettings.customHeaders, {\n        Authorization: 'Bearer owner'\n      });\n      this.validateAndApplySettings(emulatorSettings);\n    } else {\n      this.validateAndApplySettings(Object.assign(Object.assign({}, settings), libraryHeader));\n    }\n\n    const retryConfig = serviceConfig.retry_params.default;\n    this._backoffSettings = {\n      initialDelayMs: retryConfig.initial_retry_delay_millis,\n      maxDelayMs: retryConfig.max_retry_delay_millis,\n      backoffFactor: retryConfig.retry_delay_multiplier\n    }; // GCF currently tears down idle connections after two minutes. Requests\n    // that are issued after this period may fail. On GCF, we therefore issue\n    // these requests as part of a transaction so that we can safely retry until\n    // the network link is reestablished.\n    //\n    // The environment variable FUNCTION_TRIGGER_TYPE is used to detect the GCF\n    // environment.\n\n    this._preferTransactions = process.env.FUNCTION_TRIGGER_TYPE !== undefined;\n    this._lastSuccessfulRequest = 0;\n\n    if (this._preferTransactions) {\n      logger_1.logger('Firestore', null, 'Detected GCF environment');\n    }\n\n    const maxIdleChannels = this._settings.maxIdleChannels === undefined ? DEFAULT_MAX_IDLE_CHANNELS : this._settings.maxIdleChannels;\n    this._clientPool = new pool_1.ClientPool(MAX_CONCURRENT_REQUESTS_PER_CLIENT, maxIdleChannels,\n    /* clientFactory= */\n    () => {\n      let client;\n\n      if (this._settings.ssl === false) {\n        const grpc = require('@grpc/grpc-js');\n\n        const sslCreds = grpc.credentials.createInsecure();\n        client = new module.exports.v1(Object.assign({\n          sslCreds\n        }, this._settings));\n      } else {\n        client = new module.exports.v1(this._settings);\n      }\n\n      logger_1.logger('Firestore', null, 'Initialized Firestore GAPIC Client');\n      return client;\n    },\n    /* clientDestructor= */\n    client => client.close());\n    logger_1.logger('Firestore', null, 'Initialized Firestore');\n  }\n  /**\n   * Specifies custom settings to be used to configure the `Firestore`\n   * instance. Can only be invoked once and before any other Firestore method.\n   *\n   * If settings are provided via both `settings()` and the `Firestore`\n   * constructor, both settings objects are merged and any settings provided via\n   * `settings()` take precedence.\n   *\n   * @param {object} settings The settings to use for all Firestore operations.\n   */\n\n\n  settings(settings) {\n    validate_1.validateObject('settings', settings);\n    validate_1.validateString('settings.projectId', settings.projectId, {\n      optional: true\n    });\n\n    if (this._settingsFrozen) {\n      throw new Error('Firestore has already been initialized. You can only call ' + 'settings() once, and only before calling any other methods on a ' + 'Firestore object.');\n    }\n\n    const mergedSettings = Object.assign(Object.assign({}, this._settings), settings);\n    this.validateAndApplySettings(mergedSettings);\n    this._settingsFrozen = true;\n  }\n\n  validateAndApplySettings(settings) {\n    if (settings.projectId !== undefined) {\n      validate_1.validateString('settings.projectId', settings.projectId);\n      this._projectId = settings.projectId;\n    }\n\n    if (settings.host !== undefined) {\n      validate_1.validateHost('settings.host', settings.host);\n\n      if (settings.servicePath !== undefined) {\n        throw new Error('Cannot set both \"settings.host\" and \"settings.servicePath\".');\n      }\n\n      if (settings.apiEndpoint !== undefined) {\n        throw new Error('Cannot set both \"settings.host\" and \"settings.apiEndpoint\".');\n      }\n\n      const url = new url_1.URL(`http://${settings.host}`);\n      settings.servicePath = url.hostname;\n\n      if (url.port !== '' && settings.port === undefined) {\n        settings.port = Number(url.port);\n      } // We need to remove the `host` setting, in case a user calls `settings()`,\n      // which will again enforce that `host` and `servicePath` are not both\n      // specified.\n\n\n      delete settings.host;\n    }\n\n    if (settings.ssl !== undefined) {\n      validate_1.validateBoolean('settings.ssl', settings.ssl);\n    }\n\n    if (settings.maxIdleChannels !== undefined) {\n      validate_1.validateInteger('settings.maxIdleChannels', settings.maxIdleChannels, {\n        minValue: 0\n      });\n    }\n\n    this._settings = settings;\n    this._serializer = new serializer_1.Serializer(this);\n  }\n  /**\n   * Returns the Project ID for this Firestore instance. Validates that\n   * `initializeIfNeeded()` was called before.\n   *\n   * @private\n   */\n\n\n  get projectId() {\n    if (this._projectId === undefined) {\n      throw new Error('INTERNAL ERROR: Client is not yet ready to issue requests.');\n    }\n\n    return this._projectId;\n  }\n  /**\n   * Returns the root path of the database. Validates that\n   * `initializeIfNeeded()` was called before.\n   *\n   * @private\n   */\n\n\n  get formattedName() {\n    return `projects/${this.projectId}/databases/${path_1.DEFAULT_DATABASE_ID}`;\n  }\n  /**\n   * Gets a [DocumentReference]{@link DocumentReference} instance that\n   * refers to the document at the specified path.\n   *\n   * @param {string} documentPath A slash-separated path to a document.\n   * @returns {DocumentReference} The\n   * [DocumentReference]{@link DocumentReference} instance.\n   *\n   * @example\n   * let documentRef = firestore.doc('collection/document');\n   * console.log(`Path of document is ${documentRef.path}`);\n   */\n\n\n  doc(documentPath) {\n    path_1.validateResourcePath('documentPath', documentPath);\n    const path = path_1.ResourcePath.EMPTY.append(documentPath);\n\n    if (!path.isDocument) {\n      throw new Error(`Value for argument \"documentPath\" must point to a document, but was \"${documentPath}\". Your path does not contain an even number of components.`);\n    }\n\n    return new reference_2.DocumentReference(this, path);\n  }\n  /**\n   * Gets a [CollectionReference]{@link CollectionReference} instance\n   * that refers to the collection at the specified path.\n   *\n   * @param {string} collectionPath A slash-separated path to a collection.\n   * @returns {CollectionReference} The\n   * [CollectionReference]{@link CollectionReference} instance.\n   *\n   * @example\n   * let collectionRef = firestore.collection('collection');\n   *\n   * // Add a document with an auto-generated ID.\n   * collectionRef.add({foo: 'bar'}).then((documentRef) => {\n   *   console.log(`Added document at ${documentRef.path})`);\n   * });\n   */\n\n\n  collection(collectionPath) {\n    path_1.validateResourcePath('collectionPath', collectionPath);\n    const path = path_1.ResourcePath.EMPTY.append(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error(`Value for argument \"collectionPath\" must point to a collection, but was \"${collectionPath}\". Your path does not contain an odd number of components.`);\n    }\n\n    return new reference_1.CollectionReference(this, path);\n  }\n  /**\n   * Creates and returns a new Query that includes all documents in the\n   * database that are contained in a collection or subcollection with the\n   * given collectionId.\n   *\n   * @param {string} collectionId Identifies the collections to query over.\n   * Every collection or subcollection with this ID as the last segment of its\n   * path will be included. Cannot contain a slash.\n   * @returns {Query} The created Query.\n   *\n   * @example\n   * let docA = firestore.doc('mygroup/docA').set({foo: 'bar'});\n   * let docB = firestore.doc('abc/def/mygroup/docB').set({foo: 'bar'});\n   *\n   * Promise.all([docA, docB]).then(() => {\n   *    let query = firestore.collectionGroup('mygroup');\n   *    query = query.where('foo', '==', 'bar');\n   *    return query.get().then(snapshot => {\n   *       console.log(`Found ${snapshot.size} documents.`);\n   *    });\n   * });\n   */\n\n\n  collectionGroup(collectionId) {\n    if (collectionId.indexOf('/') !== -1) {\n      throw new Error(`Invalid collectionId '${collectionId}'. Collection IDs must not contain '/'.`);\n    }\n\n    return new reference_1.Query(this, reference_1.QueryOptions.forCollectionGroupQuery(collectionId));\n  }\n  /**\n   * Creates a [WriteBatch]{@link WriteBatch}, used for performing\n   * multiple writes as a single atomic operation.\n   *\n   * @returns {WriteBatch} A WriteBatch that operates on this Firestore\n   * client.\n   *\n   * @example\n   * let writeBatch = firestore.batch();\n   *\n   * // Add two documents in an atomic batch.\n   * let data = { foo: 'bar' };\n   * writeBatch.set(firestore.doc('col/doc1'), data);\n   * writeBatch.set(firestore.doc('col/doc2'), data);\n   *\n   * writeBatch.commit().then(res => {\n   *   console.log(`Added document at ${res.writeResults[0].updateTime}`);\n   * });\n   */\n\n\n  batch() {\n    return new write_batch_1.WriteBatch(this);\n  }\n\n  snapshot_(documentOrName, readTime, encoding) {\n    // TODO: Assert that Firestore Project ID is valid.\n    let convertTimestamp;\n    let convertFields;\n\n    if (encoding === undefined || encoding === 'protobufJS') {\n      convertTimestamp = data => data;\n\n      convertFields = data => data;\n    } else if (encoding === 'json') {\n      // Google Cloud Functions calls us with Proto3 JSON format data, which we\n      // must convert to Protobuf JS.\n      convertTimestamp = convert_1.timestampFromJson;\n      convertFields = convert_1.fieldsFromJson;\n    } else {\n      throw new Error(`Unsupported encoding format. Expected \"json\" or \"protobufJS\", ` + `but was \"${encoding}\".`);\n    }\n\n    let ref;\n    let document;\n\n    if (typeof documentOrName === 'string') {\n      ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName));\n      document = new document_1.DocumentSnapshotBuilder(ref);\n    } else {\n      ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName.name));\n      document = new document_1.DocumentSnapshotBuilder(ref);\n      document.fieldsProto = documentOrName.fields ? convertFields(documentOrName.fields) : {};\n      document.createTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.createTime, 'documentOrName.createTime'));\n      document.updateTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.updateTime, 'documentOrName.updateTime'));\n    }\n\n    if (readTime) {\n      document.readTime = timestamp_1.Timestamp.fromProto(convertTimestamp(readTime, 'readTime'));\n    }\n\n    return document.build();\n  }\n  /**\n   * Executes the given updateFunction and commits the changes applied within\n   * the transaction.\n   *\n   * You can use the transaction object passed to 'updateFunction' to read and\n   * modify Firestore documents under lock. Transactions are committed once\n   * 'updateFunction' resolves and attempted up to five times on failure.\n   *\n   * @param {function(Transaction)} updateFunction The function to execute\n   * within the transaction context.\n   * @param {object=} transactionOptions Transaction options.\n   * @param {number=} transactionOptions.maxAttempts - The maximum number of\n   * attempts for this transaction.\n   * @returns {Promise} If the transaction completed successfully or was\n   * explicitly aborted (by the updateFunction returning a failed Promise), the\n   * Promise returned by the updateFunction will be returned here. Else if the\n   * transaction failed, a rejected Promise with the corresponding failure\n   * error will be returned.\n   *\n   * @example\n   * let counterTransaction = firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   return transaction.get(documentRef).then(doc => {\n   *     if (doc.exists) {\n   *       let count =  doc.get('count') || 0;\n   *       if (count > 10) {\n   *         return Promise.reject('Reached maximum count');\n   *       }\n   *       transaction.update(documentRef, { count: ++count });\n   *       return Promise.resolve(count);\n   *     }\n   *\n   *     transaction.create(documentRef, { count: 1 });\n   *     return Promise.resolve(1);\n   *   });\n   * });\n   *\n   * counterTransaction.then(res => {\n   *   console.log(`Count updated to ${res}`);\n   * });\n   */\n\n\n  runTransaction(updateFunction, transactionOptions) {\n    validate_1.validateFunction('updateFunction', updateFunction);\n    const defaultAttempts = 5;\n    const tag = util_1.requestTag();\n    let maxAttempts;\n\n    if (transactionOptions) {\n      validate_1.validateObject('transactionOptions', transactionOptions);\n      validate_1.validateInteger('transactionOptions.maxAttempts', transactionOptions.maxAttempts, {\n        optional: true,\n        minValue: 1\n      });\n      maxAttempts = transactionOptions.maxAttempts || defaultAttempts;\n    } else {\n      maxAttempts = defaultAttempts;\n    }\n\n    const transaction = new transaction_1.Transaction(this, tag);\n    return this.initializeIfNeeded(tag).then(() => transaction.runTransaction(updateFunction, maxAttempts));\n  }\n  /**\n   * Fetches the root collections that are associated with this Firestore\n   * database.\n   *\n   * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n   * with an array of CollectionReferences.\n   *\n   * @example\n   * firestore.listCollections().then(collections => {\n   *   for (let collection of collections) {\n   *     console.log(`Found collection with id: ${collection.id}`);\n   *   }\n   * });\n   */\n\n\n  listCollections() {\n    const rootDocument = new reference_2.DocumentReference(this, path_1.ResourcePath.EMPTY);\n    return rootDocument.listCollections();\n  }\n  /**\n   * Retrieves multiple documents from Firestore.\n   *\n   * The first argument is required and must be of type `DocumentReference`\n   * followed by any additional `DocumentReference` documents. If used, the\n   * optional `ReadOptions` must be the last argument.\n   *\n   * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n   * `DocumentReferences` to receive, followed by an optional field mask.\n   * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n   * contains an array with the resulting document snapshots.\n   *\n   * @example\n   * let docRef1 = firestore.doc('col/doc1');\n   * let docRef2 = firestore.doc('col/doc2');\n   *\n   * firestore.getAll(docRef1, docRef2, { fieldMask: ['user'] }).then(docs => {\n   *   console.log(`First document: ${JSON.stringify(docs[0])}`);\n   *   console.log(`Second document: ${JSON.stringify(docs[1])}`);\n   * });\n   */\n\n\n  getAll(...documentRefsOrReadOptions) {\n    validate_1.validateMinNumberOfArguments('Firestore.getAll', arguments, 1);\n    const {\n      documents,\n      fieldMask\n    } = transaction_1.parseGetAllArguments(documentRefsOrReadOptions);\n    const tag = util_1.requestTag();\n    return this.initializeIfNeeded(tag).then(() => this.getAll_(documents, fieldMask, tag));\n  }\n  /**\n   * Internal method to retrieve multiple documents from Firestore, optionally\n   * as part of a transaction.\n   *\n   * @private\n   * @param docRefs The documents to receive.\n   * @param fieldMask An optional field mask to apply to this read.\n   * @param requestTag A unique client-assigned identifier for this request.\n   * @param transactionId The transaction ID to use for this read.\n   * @returns A Promise that contains an array with the resulting documents.\n   */\n\n\n  getAll_(docRefs, fieldMask, requestTag, transactionId) {\n    const requestedDocuments = new Set();\n    const retrievedDocuments = new Map();\n\n    for (const docRef of docRefs) {\n      requestedDocuments.add(docRef.formattedName);\n    }\n\n    const request = {\n      database: this.formattedName,\n      transaction: transactionId,\n      documents: Array.from(requestedDocuments)\n    };\n\n    if (fieldMask) {\n      const fieldPaths = fieldMask.map(fieldPath => fieldPath.formattedName);\n      request.mask = {\n        fieldPaths\n      };\n    }\n\n    return this.requestStream('batchGetDocuments', request, requestTag).then(stream => {\n      return new Promise((resolve, reject) => {\n        stream.on('error', err => {\n          logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with error:', err);\n          reject(err);\n        }).on('data', response => {\n          try {\n            let document;\n\n            if (response.found) {\n              logger_1.logger('Firestore.getAll_', requestTag, 'Received document: %s', response.found.name);\n              document = this.snapshot_(response.found, response.readTime);\n            } else {\n              logger_1.logger('Firestore.getAll_', requestTag, 'Document missing: %s', response.missing);\n              document = this.snapshot_(response.missing, response.readTime);\n            }\n\n            const path = document.ref.path;\n            retrievedDocuments.set(path, document);\n          } catch (err) {\n            logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with exception:', err);\n            reject(err);\n          }\n        }).on('end', () => {\n          logger_1.logger('Firestore.getAll_', requestTag, 'Received %d results', retrievedDocuments.size); // BatchGetDocuments doesn't preserve document order. We use\n          // the request order to sort the resulting documents.\n\n          const orderedDocuments = [];\n\n          for (const docRef of docRefs) {\n            const document = retrievedDocuments.get(docRef.path);\n\n            if (document !== undefined) {\n              // Recreate the DocumentSnapshot with the DocumentReference\n              // containing the original converter.\n              const finalDoc = new document_1.DocumentSnapshotBuilder(docRef);\n              finalDoc.fieldsProto = document._fieldsProto;\n              finalDoc.readTime = document.readTime;\n              finalDoc.createTime = document.createTime;\n              finalDoc.updateTime = document.updateTime;\n              orderedDocuments.push(finalDoc.build());\n            } else {\n              reject(new Error(`Did not receive document for \"${docRef.path}\".`));\n            }\n          }\n\n          resolve(orderedDocuments);\n        });\n        stream.resume();\n      });\n    });\n  }\n  /**\n   * Registers a listener on this client, incrementing the listener count. This\n   * is used to verify that all listeners are unsubscribed when terminate() is\n   * called.\n   *\n   * @private\n   */\n\n\n  registerListener() {\n    this.registeredListenersCount += 1;\n  }\n  /**\n   * Unregisters a listener on this client, decrementing the listener count.\n   * This is used to verify that all listeners are unsubscribed when terminate()\n   * is called.\n   *\n   * @private\n   */\n\n\n  unregisterListener() {\n    this.registeredListenersCount -= 1;\n  }\n  /**\n   * Terminates the Firestore client and closes all open streams.\n   *\n   * @return A Promise that resolves when the client is terminated.\n   */\n\n\n  terminate() {\n    if (this.registeredListenersCount > 0) {\n      return Promise.reject('All onSnapshot() listeners must be unsubscribed before terminating the client.');\n    }\n\n    return this._clientPool.terminate();\n  }\n  /**\n   * Initializes the client if it is not already initialized. All methods in the\n   * SDK can be used after this method completes.\n   *\n   * @private\n   * @param requestTag A unique client-assigned identifier that caused this\n   * initialization.\n   * @return A Promise that resolves when the client is initialized.\n   */\n\n\n  async initializeIfNeeded(requestTag) {\n    this._settingsFrozen = true;\n\n    if (this._projectId === undefined) {\n      try {\n        this._projectId = await this._clientPool.run(requestTag, gapicClient => gapicClient.getProjectId());\n        logger_1.logger('Firestore.initializeIfNeeded', null, 'Detected project ID: %s', this._projectId);\n      } catch (err) {\n        logger_1.logger('Firestore.initializeIfNeeded', null, 'Failed to detect project ID: %s', err);\n        return Promise.reject(err);\n      }\n    }\n  }\n  /**\n   * Returns GAX call options that set the cloud resource header.\n   * @private\n   */\n\n\n  createCallOptions() {\n    return {\n      otherArgs: {\n        headers: Object.assign({\n          [CLOUD_RESOURCE_HEADER]: this.formattedName\n        }, this._settings.customHeaders)\n      }\n    };\n  }\n  /**\n   * A function returning a Promise that can be retried.\n   *\n   * @private\n   * @callback retryFunction\n   * @returns {Promise} A Promise indicating the function's success.\n   */\n\n  /**\n   * Helper method that retries failed Promises.\n   *\n   * If 'delayMs' is specified, waits 'delayMs' between invocations. Otherwise,\n   * schedules the first attempt immediately, and then waits 100 milliseconds\n   * for further attempts.\n   *\n   * @private\n   * @param methodName Name of the Veneer API endpoint that takes a request\n   * and GAX options.\n   * @param requestTag A unique client-assigned identifier for this request.\n   * @param func Method returning a Promise than can be retried.\n   * @returns  - A Promise with the function's result if successful within\n   * `attemptsRemaining`. Otherwise, returns the last rejected Promise.\n   */\n\n\n  async _retry(methodName, requestTag, func) {\n    const backoff = new backoff_1.ExponentialBackoff();\n    let lastError = undefined;\n\n    for (let attempt = 0; attempt < MAX_REQUEST_RETRIES; ++attempt) {\n      if (lastError) {\n        logger_1.logger('Firestore._retry', requestTag, 'Retrying request that failed with error:', lastError);\n      }\n\n      try {\n        await backoff.backoffAndWait();\n        const result = await func();\n        this._lastSuccessfulRequest = new Date().getTime();\n        return result;\n      } catch (err) {\n        lastError = err;\n\n        if (util_1.isPermanentRpcError(err, methodName, serviceConfig)) {\n          break;\n        }\n      }\n    }\n\n    logger_1.logger('Firestore._retry', requestTag, 'Request failed with error:', lastError);\n    return Promise.reject(lastError);\n  }\n  /**\n   * Waits for the provided stream to become active and returns a paused but\n   * healthy stream. If an error occurs before the first byte is read, the\n   * method rejects the returned Promise.\n   *\n   * @private\n   * @param backendStream The Node stream to monitor.\n   * @param lifetime A Promise that resolves when the stream receives an 'end',\n   * 'close' or 'finish' message.\n   * @param requestTag A unique client-assigned identifier for this request.\n   * @param request If specified, the request that should be written to the\n   * stream after opening.\n   * @returns A guaranteed healthy stream that should be used instead of\n   * `backendStream`.\n   */\n\n\n  _initializeStream(backendStream, lifetime, requestTag, request) {\n    const resultStream = new stream_1.PassThrough({\n      objectMode: true\n    });\n    resultStream.pause();\n    /**\n     * Whether we have resolved the Promise and returned the stream to the\n     * caller.\n     */\n\n    let streamInitialized = false;\n    return new Promise((resolve, reject) => {\n      function streamReady() {\n        if (!streamInitialized) {\n          streamInitialized = true;\n          logger_1.logger('Firestore._initializeStream', requestTag, 'Releasing stream');\n          resolve(resultStream);\n        }\n      }\n\n      function streamEnded() {\n        logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream end');\n        resultStream.unpipe(backendStream);\n        resolve(resultStream);\n        lifetime.resolve();\n      }\n\n      function streamFailed(err) {\n        if (!streamInitialized) {\n          // If we receive an error before we were able to receive any data,\n          // reject this stream.\n          logger_1.logger('Firestore._initializeStream', requestTag, 'Received initial error:', err);\n          reject(err);\n        } else {\n          logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream error:', err); // We execute the forwarding of the 'error' event via setImmediate() as\n          // V8 guarantees that the Promise chain returned from this method\n          // is resolved before any code executed via setImmediate(). This\n          // allows the caller to attach an error handler.\n\n          setImmediate(() => {\n            resultStream.emit('error', err);\n          });\n        }\n      }\n\n      backendStream.on('data', () => streamReady());\n      backendStream.on('error', err => streamFailed(err));\n      backendStream.on('end', () => streamEnded());\n      backendStream.on('close', () => streamEnded());\n      backendStream.on('finish', () => streamEnded());\n      backendStream.pipe(resultStream);\n\n      if (request) {\n        logger_1.logger('Firestore._initializeStream', requestTag, 'Sending request: %j', request);\n        backendStream.write(request, 'utf-8', err => {\n          if (err) {\n            streamFailed(err);\n          } else {\n            logger_1.logger('Firestore._initializeStream', requestTag, 'Marking stream as healthy');\n            streamReady();\n          }\n        });\n      }\n    });\n  }\n  /**\n   * A funnel for all non-streaming API requests, assigning a project ID where\n   * necessary within the request options.\n   *\n   * @private\n   * @param methodName Name of the Veneer API endpoint that takes a request\n   * and GAX options.\n   * @param request The Protobuf request to send.\n   * @param requestTag A unique client-assigned identifier for this request.\n   * @returns A Promise with the request result.\n   */\n\n\n  request(methodName, request, requestTag) {\n    const callOptions = this.createCallOptions();\n    return this._clientPool.run(requestTag, async gapicClient => {\n      try {\n        logger_1.logger('Firestore.request', requestTag, 'Sending request: %j', request);\n        const [result] = await gapicClient[methodName](request, callOptions);\n        logger_1.logger('Firestore.request', requestTag, 'Received response: %j', result);\n        this._lastSuccessfulRequest = new Date().getTime();\n        return result;\n      } catch (err) {\n        logger_1.logger('Firestore.request', requestTag, 'Received error:', err);\n        return Promise.reject(err);\n      }\n    });\n  }\n  /**\n   * A funnel for streaming API requests, assigning a project ID where necessary\n   * within the request options.\n   *\n   * The stream is returned in paused state and needs to be resumed once all\n   * listeners are attached.\n   *\n   * @private\n   * @param methodName Name of the streaming Veneer API endpoint that\n   * takes a request and GAX options.\n   * @param request The Protobuf request to send.\n   * @param requestTag A unique client-assigned identifier for this request.\n   * @returns A Promise with the resulting read-only stream.\n   */\n\n\n  requestStream(methodName, request, requestTag) {\n    const callOptions = this.createCallOptions();\n    const bidirectional = methodName === 'listen';\n    return this._retry(methodName, requestTag, () => {\n      const result = new util_1.Deferred();\n\n      this._clientPool.run(requestTag, async gapicClient => {\n        logger_1.logger('Firestore.requestStream', requestTag, 'Sending request: %j', request);\n\n        try {\n          const stream = bidirectional ? gapicClient[methodName](callOptions) : gapicClient[methodName](request, callOptions);\n          const logStream = through2.obj(function (chunk, enc, callback) {\n            logger_1.logger('Firestore.requestStream', requestTag, 'Received response: %j', chunk);\n            callback();\n          });\n          stream.pipe(logStream);\n          const lifetime = new util_1.Deferred();\n          const resultStream = await this._initializeStream(stream, lifetime, requestTag, bidirectional ? request : undefined);\n          resultStream.on('end', () => stream.end());\n          result.resolve(resultStream); // While we return the stream to the callee early, we don't want to\n          // release the GAPIC client until the callee has finished processing the\n          // stream.\n\n          return lifetime.promise;\n        } catch (e) {\n          result.reject(e);\n        }\n      });\n\n      return result.promise;\n    });\n  }\n\n}\n\nexports.Firestore = Firestore;\n/**\n * A logging function that takes a single string.\n *\n * @callback Firestore~logFunction\n * @param {string} Log message\n */\n// tslint:disable-next-line:no-default-export\n\n/**\n * The default export of the `@google-cloud/firestore` package is the\n * {@link Firestore} class.\n *\n * See {@link Firestore} and {@link ClientConfig} for client methods and\n * configuration options.\n *\n * @module {Firestore} @google-cloud/firestore\n * @alias nodejs-firestore\n *\n * @example <caption>Install the client library with <a\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\n * @google-cloud/firestore\n *\n * @example <caption>Import the client library</caption>\n * var Firestore = require('@google-cloud/firestore');\n *\n * @example <caption>Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\n *\n * @example <caption>Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\n// tslint:disable-next-line:no-default-export\n\nexports.default = Firestore; // Horrible hack to ensure backwards compatibility with <= 17.0, which allows\n// users to call the default constructor via\n// `const Fs = require(`@google-cloud/firestore`); new Fs()`;\n\nconst existingExports = module.exports;\nmodule.exports = Firestore;\nmodule.exports = Object.assign(module.exports, existingExports);\n/**\n * {@link v1beta1} factory function.\n *\n * @private\n * @name Firestore.v1beta1\n * @see v1beta1\n * @type {function}\n */\n\nObject.defineProperty(module.exports, 'v1beta1', {\n  // The v1beta1 module is very large. To avoid pulling it in from static\n  // scope, we lazy-load and cache the module.\n  get: () => {\n    if (!v1beta1) {\n      v1beta1 = require('./v1beta1');\n    }\n\n    return v1beta1;\n  }\n});\n/**\n * {@link v1} factory function.\n *\n * @private\n * @name Firestore.v1\n * @see v1\n * @type {function}\n */\n\nObject.defineProperty(module.exports, 'v1', {\n  // The v1 module is very large. To avoid pulling it in from static\n  // scope, we lazy-load and cache the module.\n  get: () => {\n    if (!v1) {\n      v1 = require('./v1');\n    }\n\n    return v1;\n  }\n});","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/@google-cloud/firestore/build/src/index.js"],"names":["Object","defineProperty","exports","value","stream_1","require","through2","url_1","backoff_1","convert_1","document_1","logger_1","path_1","pool_1","reference_1","reference_2","serializer_1","timestamp_1","transaction_1","util_1","validate_1","write_batch_1","firestore_client_config_json_1","serviceConfig","interfaces","reference_3","CollectionReference","DocumentReference","QuerySnapshot","Query","document_2","DocumentSnapshot","QueryDocumentSnapshot","field_value_1","FieldValue","write_batch_2","WriteBatch","WriteResult","transaction_2","Transaction","timestamp_2","Timestamp","document_change_1","DocumentChange","path_2","FieldPath","geo_point_1","GeoPoint","logger_2","setLogFunction","google_gax_1","GrpcStatus","Status","libVersion","version","setLibVersion","v1","v1beta1","CLOUD_RESOURCE_HEADER","MAX_REQUEST_RETRIES","DEFAULT_MAX_IDLE_CHANNELS","MAX_CONCURRENT_REQUESTS_PER_CLIENT","Firestore","constructor","settings","_settings","_settingsFrozen","_serializer","_projectId","undefined","registeredListenersCount","_lastSuccessfulRequest","libraryHeader","libName","firebaseVersion","process","env","FIRESTORE_EMULATOR_HOST","validateHost","emulatorSettings","assign","host","ssl","servicePath","apiEndpoint","customHeaders","Authorization","validateAndApplySettings","retryConfig","retry_params","default","_backoffSettings","initialDelayMs","initial_retry_delay_millis","maxDelayMs","max_retry_delay_millis","backoffFactor","retry_delay_multiplier","_preferTransactions","FUNCTION_TRIGGER_TYPE","logger","maxIdleChannels","_clientPool","ClientPool","client","grpc","sslCreds","credentials","createInsecure","module","close","validateObject","validateString","projectId","optional","Error","mergedSettings","url","URL","hostname","port","Number","validateBoolean","validateInteger","minValue","Serializer","formattedName","DEFAULT_DATABASE_ID","doc","documentPath","validateResourcePath","path","ResourcePath","EMPTY","append","isDocument","collection","collectionPath","isCollection","collectionGroup","collectionId","indexOf","QueryOptions","forCollectionGroupQuery","batch","snapshot_","documentOrName","readTime","encoding","convertTimestamp","convertFields","data","timestampFromJson","fieldsFromJson","ref","document","QualifiedResourcePath","fromSlashSeparatedString","DocumentSnapshotBuilder","name","fieldsProto","fields","createTime","fromProto","updateTime","build","runTransaction","updateFunction","transactionOptions","validateFunction","defaultAttempts","tag","requestTag","maxAttempts","transaction","initializeIfNeeded","then","listCollections","rootDocument","getAll","documentRefsOrReadOptions","validateMinNumberOfArguments","arguments","documents","fieldMask","parseGetAllArguments","getAll_","docRefs","transactionId","requestedDocuments","Set","retrievedDocuments","Map","docRef","add","request","database","Array","from","fieldPaths","map","fieldPath","mask","requestStream","stream","Promise","resolve","reject","on","err","response","found","missing","set","size","orderedDocuments","get","finalDoc","_fieldsProto","push","resume","registerListener","unregisterListener","terminate","run","gapicClient","getProjectId","createCallOptions","otherArgs","headers","_retry","methodName","func","backoff","ExponentialBackoff","lastError","attempt","backoffAndWait","result","Date","getTime","isPermanentRpcError","_initializeStream","backendStream","lifetime","resultStream","PassThrough","objectMode","pause","streamInitialized","streamReady","streamEnded","unpipe","streamFailed","setImmediate","emit","pipe","write","callOptions","bidirectional","Deferred","logStream","obj","chunk","enc","callback","end","promise","e","existingExports"],"mappings":"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","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"stream\");\nconst through2 = require(\"through2\");\nconst url_1 = require(\"url\");\nconst backoff_1 = require(\"./backoff\");\nconst convert_1 = require(\"./convert\");\nconst document_1 = require(\"./document\");\nconst logger_1 = require(\"./logger\");\nconst path_1 = require(\"./path\");\nconst pool_1 = require(\"./pool\");\nconst reference_1 = require(\"./reference\");\nconst reference_2 = require(\"./reference\");\nconst serializer_1 = require(\"./serializer\");\nconst timestamp_1 = require(\"./timestamp\");\nconst transaction_1 = require(\"./transaction\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\nconst write_batch_1 = require(\"./write-batch\");\nconst firestore_client_config_json_1 = require(\"./v1/firestore_client_config.json\");\nconst serviceConfig = firestore_client_config_json_1.interfaces['google.firestore.v1.Firestore'];\nvar reference_3 = require(\"./reference\");\nexports.CollectionReference = reference_3.CollectionReference;\nexports.DocumentReference = reference_3.DocumentReference;\nexports.QuerySnapshot = reference_3.QuerySnapshot;\nexports.Query = reference_3.Query;\nvar document_2 = require(\"./document\");\nexports.DocumentSnapshot = document_2.DocumentSnapshot;\nexports.QueryDocumentSnapshot = document_2.QueryDocumentSnapshot;\nvar field_value_1 = require(\"./field-value\");\nexports.FieldValue = field_value_1.FieldValue;\nvar write_batch_2 = require(\"./write-batch\");\nexports.WriteBatch = write_batch_2.WriteBatch;\nexports.WriteResult = write_batch_2.WriteResult;\nvar transaction_2 = require(\"./transaction\");\nexports.Transaction = transaction_2.Transaction;\nvar timestamp_2 = require(\"./timestamp\");\nexports.Timestamp = timestamp_2.Timestamp;\nvar document_change_1 = require(\"./document-change\");\nexports.DocumentChange = document_change_1.DocumentChange;\nvar path_2 = require(\"./path\");\nexports.FieldPath = path_2.FieldPath;\nvar geo_point_1 = require(\"./geo-point\");\nexports.GeoPoint = geo_point_1.GeoPoint;\nvar logger_2 = require(\"./logger\");\nexports.setLogFunction = logger_2.setLogFunction;\nvar google_gax_1 = require(\"google-gax\");\nexports.GrpcStatus = google_gax_1.Status;\nconst libVersion = require('../../package.json').version;\nlogger_1.setLibVersion(libVersion);\n/*!\n * DO NOT REMOVE THE FOLLOWING NAMESPACE DEFINITIONS\n */\n/**\n * @namespace google.protobuf\n */\n/**\n * @namespace google.rpc\n */\n/**\n * @namespace google.longrunning\n */\n/**\n * @namespace google.firestore.v1\n */\n/**\n * @namespace google.firestore.v1beta1\n */\n/**\n * @namespace google.firestore.admin.v1\n */\n/*!\n * @see v1\n */\nlet v1; // Lazy-loaded in `_runRequest()`\n/*!\n * @see v1beta1\n */\nlet v1beta1; // Lazy-loaded upon access.\n/*!\n * HTTP header for the resource prefix to improve routing and project isolation\n * by the backend.\n */\nconst CLOUD_RESOURCE_HEADER = 'google-cloud-resource-prefix';\n/*!\n * The maximum number of times to retry idempotent requests.\n */\nconst MAX_REQUEST_RETRIES = 5;\n/*!\n * The default number of idle GRPC channel to keep.\n */\nconst DEFAULT_MAX_IDLE_CHANNELS = 1;\n/*!\n * The maximum number of concurrent requests supported by a single GRPC channel,\n * as enforced by Google's Frontend. If the SDK issues more than 100 concurrent\n * operations, we need to use more than one GAPIC client since these clients\n * multiplex all requests over a single channel.\n */\nconst MAX_CONCURRENT_REQUESTS_PER_CLIENT = 100;\n/**\n * Document data (e.g. for use with\n * [set()]{@link DocumentReference#set}) consisting of fields mapped\n * to values.\n *\n * @typedef {Object.<string, *>} DocumentData\n */\n/**\n * Update data (for use with [update]{@link DocumentReference#update})\n * that contains paths (e.g. 'foo' or 'foo.baz') mapped to values. Fields that\n * contain dots reference nested fields within the document.\n *\n * @typedef {Object.<string, *>} UpdateData\n */\n/**\n * An options object that configures conditional behavior of\n * [update()]{@link DocumentReference#update} and\n * [delete()]{@link DocumentReference#delete} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. Using Preconditions, these calls\n * can be restricted to only apply to documents that match the specified\n * conditions.\n *\n * @example\n * const documentRef = firestore.doc('coll/doc');\n *\n * documentRef.get().then(snapshot => {\n *   const updateTime = snapshot.updateTime;\n *\n *   console.log(`Deleting document at update time: ${updateTime.toDate()}`);\n *   return documentRef.delete({ lastUpdateTime: updateTime });\n * });\n *\n * @property {Timestamp} lastUpdateTime The update time to enforce. If set,\n *  enforces that the document was last updated at lastUpdateTime. Fails the\n *  operation if the document was last updated at a different time.\n * @typedef {Object} Precondition\n */\n/**\n * An options object that configures the behavior of\n * [set()]{@link DocumentReference#set} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. These calls can be\n * configured to perform granular merges instead of overwriting the target\n * documents in their entirety by providing a SetOptions object with\n * { merge : true }.\n *\n * @property {boolean} merge Changes the behavior of a set() call to only\n * replace the values specified in its data argument. Fields omitted from the\n * set() call remain untouched.\n * @property {Array<(string|FieldPath)>} mergeFields Changes the behavior of\n * set() calls to only replace the specified field paths. Any field path that is\n * not specified is ignored and remains untouched.\n * It is an error to pass a SetOptions object to a set() call that is missing a\n * value for any of the fields specified here.\n * @typedef {Object} SetOptions\n */\n/**\n * An options object that can be used to configure the behavior of\n * [getAll()]{@link Firestore#getAll} calls. By providing a `fieldMask`, these\n * calls can be configured to only return a subset of fields.\n *\n * @property {Array<(string|FieldPath)>} fieldMask Specifies the set of fields\n * to return and reduces the amount of data transmitted by the backend.\n * Adding a field mask does not filter results. Documents do not need to\n * contain values for all the fields in the mask to be part of the result set.\n * @typedef {Object} ReadOptions\n */\n/**\n * The Firestore client represents a Firestore Database and is the entry point\n * for all Firestore operations.\n *\n * @see [Firestore Documentation]{@link https://firebase.google.com/docs/firestore/}\n *\n * @class\n *\n * @example <caption>Install the client library with <a\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\n * @google-cloud/firestore\n *\n * @example <caption>Import the client library</caption>\n * var Firestore = require('@google-cloud/firestore');\n *\n * @example <caption>Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\n *\n * @example <caption>Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\nclass Firestore {\n    /**\n     * @param {Object=} settings [Configuration object](#/docs).\n     * @param {string=} settings.projectId The project ID from the Google\n     * Developer's Console, e.g. 'grape-spaceship-123'. We will also check the\n     * environment variable GCLOUD_PROJECT for your project ID.  Can be omitted in\n     * environments that support\n     * {@link https://cloud.google.com/docs/authentication Application Default\n     * Credentials}\n     * @param {string=} settings.keyFilename Local file containing the Service\n     * Account credentials as downloaded from the Google Developers Console. Can\n     * be omitted in environments that support\n     * {@link https://cloud.google.com/docs/authentication Application Default\n     * Credentials}. To configure Firestore with custom credentials, use\n     * `settings.credentials` and provide the `client_email` and `private_key` of\n     * your service account.\n     * @param {{client_email:string=, private_key:string=}=} settings.credentials\n     * The `client_email` and `private_key` properties of the service account\n     * to use with your Firestore project. Can be omitted in environments that\n     * support {@link https://cloud.google.com/docs/authentication Application\n     * Default Credentials}. If your credentials are stored in a JSON file, you\n     * can specify a `keyFilename` instead.\n     * @param {string=} settings.host The host to connect to.\n     * @param {boolean=} settings.ssl Whether to use SSL when connecting.\n     * @param {number=} settings.maxIdleChannels  The maximum number of idle GRPC\n     * channels to keep. A smaller number of idle channels reduces memory usage\n     * but increases request latency for clients with fluctuating request rates.\n     * If set to 0, shuts down all GRPC channels when the client becomes idle.\n     * Defaults to 1.\n     */\n    constructor(settings) {\n        /**\n         * The configuration options for the GAPIC client.\n         * @private\n         */\n        this._settings = {};\n        /**\n         * Whether the initialization settings can still be changed by invoking\n         * `settings()`.\n         * @private\n         */\n        this._settingsFrozen = false;\n        /**\n         * The serializer to use for the Protobuf transformation.\n         * @private\n         */\n        this._serializer = null;\n        /**\n         * The project ID for this client.\n         *\n         * The project ID is auto-detected during the first request unless a project\n         * ID is passed to the constructor (or provided via `.settings()`).\n         * @private\n         */\n        this._projectId = undefined;\n        /**\n         * Count of listeners that have been registered on the client.\n         *\n         * The client can only be terminated when there are no registered listeners.\n         * @private\n         */\n        this.registeredListenersCount = 0;\n        /** @private */\n        this._lastSuccessfulRequest = 0;\n        const libraryHeader = {\n            libName: 'gccl',\n            libVersion,\n        };\n        if (settings && settings.firebaseVersion) {\n            libraryHeader.libVersion += ' fire/' + settings.firebaseVersion;\n        }\n        if (process.env.FIRESTORE_EMULATOR_HOST) {\n            validate_1.validateHost('FIRESTORE_EMULATOR_HOST', process.env.FIRESTORE_EMULATOR_HOST);\n            const emulatorSettings = Object.assign(Object.assign(Object.assign({}, settings), libraryHeader), { host: process.env.FIRESTORE_EMULATOR_HOST, ssl: false });\n            // If FIRESTORE_EMULATOR_HOST is set, we unset `servicePath` and `apiEndpoint` to\n            // ensure that only one endpoint setting is provided.\n            delete emulatorSettings.servicePath;\n            delete emulatorSettings.apiEndpoint;\n            // Manually merge the Authorization header to preserve user-provided headers\n            emulatorSettings.customHeaders = Object.assign({}, emulatorSettings.customHeaders, { Authorization: 'Bearer owner' });\n            this.validateAndApplySettings(emulatorSettings);\n        }\n        else {\n            this.validateAndApplySettings(Object.assign(Object.assign({}, settings), libraryHeader));\n        }\n        const retryConfig = serviceConfig.retry_params.default;\n        this._backoffSettings = {\n            initialDelayMs: retryConfig.initial_retry_delay_millis,\n            maxDelayMs: retryConfig.max_retry_delay_millis,\n            backoffFactor: retryConfig.retry_delay_multiplier,\n        };\n        // GCF currently tears down idle connections after two minutes. Requests\n        // that are issued after this period may fail. On GCF, we therefore issue\n        // these requests as part of a transaction so that we can safely retry until\n        // the network link is reestablished.\n        //\n        // The environment variable FUNCTION_TRIGGER_TYPE is used to detect the GCF\n        // environment.\n        this._preferTransactions = process.env.FUNCTION_TRIGGER_TYPE !== undefined;\n        this._lastSuccessfulRequest = 0;\n        if (this._preferTransactions) {\n            logger_1.logger('Firestore', null, 'Detected GCF environment');\n        }\n        const maxIdleChannels = this._settings.maxIdleChannels === undefined\n            ? DEFAULT_MAX_IDLE_CHANNELS\n            : this._settings.maxIdleChannels;\n        this._clientPool = new pool_1.ClientPool(MAX_CONCURRENT_REQUESTS_PER_CLIENT, maxIdleChannels, \n        /* clientFactory= */ () => {\n            let client;\n            if (this._settings.ssl === false) {\n                const grpc = require('@grpc/grpc-js');\n                const sslCreds = grpc.credentials.createInsecure();\n                client = new module.exports.v1(Object.assign({ sslCreds }, this._settings));\n            }\n            else {\n                client = new module.exports.v1(this._settings);\n            }\n            logger_1.logger('Firestore', null, 'Initialized Firestore GAPIC Client');\n            return client;\n        }, \n        /* clientDestructor= */ client => client.close());\n        logger_1.logger('Firestore', null, 'Initialized Firestore');\n    }\n    /**\n     * Specifies custom settings to be used to configure the `Firestore`\n     * instance. Can only be invoked once and before any other Firestore method.\n     *\n     * If settings are provided via both `settings()` and the `Firestore`\n     * constructor, both settings objects are merged and any settings provided via\n     * `settings()` take precedence.\n     *\n     * @param {object} settings The settings to use for all Firestore operations.\n     */\n    settings(settings) {\n        validate_1.validateObject('settings', settings);\n        validate_1.validateString('settings.projectId', settings.projectId, { optional: true });\n        if (this._settingsFrozen) {\n            throw new Error('Firestore has already been initialized. You can only call ' +\n                'settings() once, and only before calling any other methods on a ' +\n                'Firestore object.');\n        }\n        const mergedSettings = Object.assign(Object.assign({}, this._settings), settings);\n        this.validateAndApplySettings(mergedSettings);\n        this._settingsFrozen = true;\n    }\n    validateAndApplySettings(settings) {\n        if (settings.projectId !== undefined) {\n            validate_1.validateString('settings.projectId', settings.projectId);\n            this._projectId = settings.projectId;\n        }\n        if (settings.host !== undefined) {\n            validate_1.validateHost('settings.host', settings.host);\n            if (settings.servicePath !== undefined) {\n                throw new Error('Cannot set both \"settings.host\" and \"settings.servicePath\".');\n            }\n            if (settings.apiEndpoint !== undefined) {\n                throw new Error('Cannot set both \"settings.host\" and \"settings.apiEndpoint\".');\n            }\n            const url = new url_1.URL(`http://${settings.host}`);\n            settings.servicePath = url.hostname;\n            if (url.port !== '' && settings.port === undefined) {\n                settings.port = Number(url.port);\n            }\n            // We need to remove the `host` setting, in case a user calls `settings()`,\n            // which will again enforce that `host` and `servicePath` are not both\n            // specified.\n            delete settings.host;\n        }\n        if (settings.ssl !== undefined) {\n            validate_1.validateBoolean('settings.ssl', settings.ssl);\n        }\n        if (settings.maxIdleChannels !== undefined) {\n            validate_1.validateInteger('settings.maxIdleChannels', settings.maxIdleChannels, {\n                minValue: 0,\n            });\n        }\n        this._settings = settings;\n        this._serializer = new serializer_1.Serializer(this);\n    }\n    /**\n     * Returns the Project ID for this Firestore instance. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     */\n    get projectId() {\n        if (this._projectId === undefined) {\n            throw new Error('INTERNAL ERROR: Client is not yet ready to issue requests.');\n        }\n        return this._projectId;\n    }\n    /**\n     * Returns the root path of the database. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     */\n    get formattedName() {\n        return `projects/${this.projectId}/databases/${path_1.DEFAULT_DATABASE_ID}`;\n    }\n    /**\n     * Gets a [DocumentReference]{@link DocumentReference} instance that\n     * refers to the document at the specified path.\n     *\n     * @param {string} documentPath A slash-separated path to a document.\n     * @returns {DocumentReference} The\n     * [DocumentReference]{@link DocumentReference} instance.\n     *\n     * @example\n     * let documentRef = firestore.doc('collection/document');\n     * console.log(`Path of document is ${documentRef.path}`);\n     */\n    doc(documentPath) {\n        path_1.validateResourcePath('documentPath', documentPath);\n        const path = path_1.ResourcePath.EMPTY.append(documentPath);\n        if (!path.isDocument) {\n            throw new Error(`Value for argument \"documentPath\" must point to a document, but was \"${documentPath}\". Your path does not contain an even number of components.`);\n        }\n        return new reference_2.DocumentReference(this, path);\n    }\n    /**\n     * Gets a [CollectionReference]{@link CollectionReference} instance\n     * that refers to the collection at the specified path.\n     *\n     * @param {string} collectionPath A slash-separated path to a collection.\n     * @returns {CollectionReference} The\n     * [CollectionReference]{@link CollectionReference} instance.\n     *\n     * @example\n     * let collectionRef = firestore.collection('collection');\n     *\n     * // Add a document with an auto-generated ID.\n     * collectionRef.add({foo: 'bar'}).then((documentRef) => {\n     *   console.log(`Added document at ${documentRef.path})`);\n     * });\n     */\n    collection(collectionPath) {\n        path_1.validateResourcePath('collectionPath', collectionPath);\n        const path = path_1.ResourcePath.EMPTY.append(collectionPath);\n        if (!path.isCollection) {\n            throw new Error(`Value for argument \"collectionPath\" must point to a collection, but was \"${collectionPath}\". Your path does not contain an odd number of components.`);\n        }\n        return new reference_1.CollectionReference(this, path);\n    }\n    /**\n     * Creates and returns a new Query that includes all documents in the\n     * database that are contained in a collection or subcollection with the\n     * given collectionId.\n     *\n     * @param {string} collectionId Identifies the collections to query over.\n     * Every collection or subcollection with this ID as the last segment of its\n     * path will be included. Cannot contain a slash.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let docA = firestore.doc('mygroup/docA').set({foo: 'bar'});\n     * let docB = firestore.doc('abc/def/mygroup/docB').set({foo: 'bar'});\n     *\n     * Promise.all([docA, docB]).then(() => {\n     *    let query = firestore.collectionGroup('mygroup');\n     *    query = query.where('foo', '==', 'bar');\n     *    return query.get().then(snapshot => {\n     *       console.log(`Found ${snapshot.size} documents.`);\n     *    });\n     * });\n     */\n    collectionGroup(collectionId) {\n        if (collectionId.indexOf('/') !== -1) {\n            throw new Error(`Invalid collectionId '${collectionId}'. Collection IDs must not contain '/'.`);\n        }\n        return new reference_1.Query(this, reference_1.QueryOptions.forCollectionGroupQuery(collectionId));\n    }\n    /**\n     * Creates a [WriteBatch]{@link WriteBatch}, used for performing\n     * multiple writes as a single atomic operation.\n     *\n     * @returns {WriteBatch} A WriteBatch that operates on this Firestore\n     * client.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     *\n     * // Add two documents in an atomic batch.\n     * let data = { foo: 'bar' };\n     * writeBatch.set(firestore.doc('col/doc1'), data);\n     * writeBatch.set(firestore.doc('col/doc2'), data);\n     *\n     * writeBatch.commit().then(res => {\n     *   console.log(`Added document at ${res.writeResults[0].updateTime}`);\n     * });\n     */\n    batch() {\n        return new write_batch_1.WriteBatch(this);\n    }\n    snapshot_(documentOrName, readTime, encoding) {\n        // TODO: Assert that Firestore Project ID is valid.\n        let convertTimestamp;\n        let convertFields;\n        if (encoding === undefined || encoding === 'protobufJS') {\n            convertTimestamp = data => data;\n            convertFields = data => data;\n        }\n        else if (encoding === 'json') {\n            // Google Cloud Functions calls us with Proto3 JSON format data, which we\n            // must convert to Protobuf JS.\n            convertTimestamp = convert_1.timestampFromJson;\n            convertFields = convert_1.fieldsFromJson;\n        }\n        else {\n            throw new Error(`Unsupported encoding format. Expected \"json\" or \"protobufJS\", ` +\n                `but was \"${encoding}\".`);\n        }\n        let ref;\n        let document;\n        if (typeof documentOrName === 'string') {\n            ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName));\n            document = new document_1.DocumentSnapshotBuilder(ref);\n        }\n        else {\n            ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName.name));\n            document = new document_1.DocumentSnapshotBuilder(ref);\n            document.fieldsProto = documentOrName.fields\n                ? convertFields(documentOrName.fields)\n                : {};\n            document.createTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.createTime, 'documentOrName.createTime'));\n            document.updateTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.updateTime, 'documentOrName.updateTime'));\n        }\n        if (readTime) {\n            document.readTime = timestamp_1.Timestamp.fromProto(convertTimestamp(readTime, 'readTime'));\n        }\n        return document.build();\n    }\n    /**\n     * Executes the given updateFunction and commits the changes applied within\n     * the transaction.\n     *\n     * You can use the transaction object passed to 'updateFunction' to read and\n     * modify Firestore documents under lock. Transactions are committed once\n     * 'updateFunction' resolves and attempted up to five times on failure.\n     *\n     * @param {function(Transaction)} updateFunction The function to execute\n     * within the transaction context.\n     * @param {object=} transactionOptions Transaction options.\n     * @param {number=} transactionOptions.maxAttempts - The maximum number of\n     * attempts for this transaction.\n     * @returns {Promise} If the transaction completed successfully or was\n     * explicitly aborted (by the updateFunction returning a failed Promise), the\n     * Promise returned by the updateFunction will be returned here. Else if the\n     * transaction failed, a rejected Promise with the corresponding failure\n     * error will be returned.\n     *\n     * @example\n     * let counterTransaction = firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       let count =  doc.get('count') || 0;\n     *       if (count > 10) {\n     *         return Promise.reject('Reached maximum count');\n     *       }\n     *       transaction.update(documentRef, { count: ++count });\n     *       return Promise.resolve(count);\n     *     }\n     *\n     *     transaction.create(documentRef, { count: 1 });\n     *     return Promise.resolve(1);\n     *   });\n     * });\n     *\n     * counterTransaction.then(res => {\n     *   console.log(`Count updated to ${res}`);\n     * });\n     */\n    runTransaction(updateFunction, transactionOptions) {\n        validate_1.validateFunction('updateFunction', updateFunction);\n        const defaultAttempts = 5;\n        const tag = util_1.requestTag();\n        let maxAttempts;\n        if (transactionOptions) {\n            validate_1.validateObject('transactionOptions', transactionOptions);\n            validate_1.validateInteger('transactionOptions.maxAttempts', transactionOptions.maxAttempts, { optional: true, minValue: 1 });\n            maxAttempts = transactionOptions.maxAttempts || defaultAttempts;\n        }\n        else {\n            maxAttempts = defaultAttempts;\n        }\n        const transaction = new transaction_1.Transaction(this, tag);\n        return this.initializeIfNeeded(tag).then(() => transaction.runTransaction(updateFunction, maxAttempts));\n    }\n    /**\n     * Fetches the root collections that are associated with this Firestore\n     * database.\n     *\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n     * with an array of CollectionReferences.\n     *\n     * @example\n     * firestore.listCollections().then(collections => {\n     *   for (let collection of collections) {\n     *     console.log(`Found collection with id: ${collection.id}`);\n     *   }\n     * });\n     */\n    listCollections() {\n        const rootDocument = new reference_2.DocumentReference(this, path_1.ResourcePath.EMPTY);\n        return rootDocument.listCollections();\n    }\n    /**\n     * Retrieves multiple documents from Firestore.\n     *\n     * The first argument is required and must be of type `DocumentReference`\n     * followed by any additional `DocumentReference` documents. If used, the\n     * optional `ReadOptions` must be the last argument.\n     *\n     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n     * `DocumentReferences` to receive, followed by an optional field mask.\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n     * contains an array with the resulting document snapshots.\n     *\n     * @example\n     * let docRef1 = firestore.doc('col/doc1');\n     * let docRef2 = firestore.doc('col/doc2');\n     *\n     * firestore.getAll(docRef1, docRef2, { fieldMask: ['user'] }).then(docs => {\n     *   console.log(`First document: ${JSON.stringify(docs[0])}`);\n     *   console.log(`Second document: ${JSON.stringify(docs[1])}`);\n     * });\n     */\n    getAll(...documentRefsOrReadOptions) {\n        validate_1.validateMinNumberOfArguments('Firestore.getAll', arguments, 1);\n        const { documents, fieldMask } = transaction_1.parseGetAllArguments(documentRefsOrReadOptions);\n        const tag = util_1.requestTag();\n        return this.initializeIfNeeded(tag).then(() => this.getAll_(documents, fieldMask, tag));\n    }\n    /**\n     * Internal method to retrieve multiple documents from Firestore, optionally\n     * as part of a transaction.\n     *\n     * @private\n     * @param docRefs The documents to receive.\n     * @param fieldMask An optional field mask to apply to this read.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param transactionId The transaction ID to use for this read.\n     * @returns A Promise that contains an array with the resulting documents.\n     */\n    getAll_(docRefs, fieldMask, requestTag, transactionId) {\n        const requestedDocuments = new Set();\n        const retrievedDocuments = new Map();\n        for (const docRef of docRefs) {\n            requestedDocuments.add(docRef.formattedName);\n        }\n        const request = {\n            database: this.formattedName,\n            transaction: transactionId,\n            documents: Array.from(requestedDocuments),\n        };\n        if (fieldMask) {\n            const fieldPaths = fieldMask.map(fieldPath => fieldPath.formattedName);\n            request.mask = { fieldPaths };\n        }\n        return this.requestStream('batchGetDocuments', request, requestTag).then(stream => {\n            return new Promise((resolve, reject) => {\n                stream\n                    .on('error', err => {\n                    logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with error:', err);\n                    reject(err);\n                })\n                    .on('data', (response) => {\n                    try {\n                        let document;\n                        if (response.found) {\n                            logger_1.logger('Firestore.getAll_', requestTag, 'Received document: %s', response.found.name);\n                            document = this.snapshot_(response.found, response.readTime);\n                        }\n                        else {\n                            logger_1.logger('Firestore.getAll_', requestTag, 'Document missing: %s', response.missing);\n                            document = this.snapshot_(response.missing, response.readTime);\n                        }\n                        const path = document.ref.path;\n                        retrievedDocuments.set(path, document);\n                    }\n                    catch (err) {\n                        logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with exception:', err);\n                        reject(err);\n                    }\n                })\n                    .on('end', () => {\n                    logger_1.logger('Firestore.getAll_', requestTag, 'Received %d results', retrievedDocuments.size);\n                    // BatchGetDocuments doesn't preserve document order. We use\n                    // the request order to sort the resulting documents.\n                    const orderedDocuments = [];\n                    for (const docRef of docRefs) {\n                        const document = retrievedDocuments.get(docRef.path);\n                        if (document !== undefined) {\n                            // Recreate the DocumentSnapshot with the DocumentReference\n                            // containing the original converter.\n                            const finalDoc = new document_1.DocumentSnapshotBuilder(docRef);\n                            finalDoc.fieldsProto = document._fieldsProto;\n                            finalDoc.readTime = document.readTime;\n                            finalDoc.createTime = document.createTime;\n                            finalDoc.updateTime = document.updateTime;\n                            orderedDocuments.push(finalDoc.build());\n                        }\n                        else {\n                            reject(new Error(`Did not receive document for \"${docRef.path}\".`));\n                        }\n                    }\n                    resolve(orderedDocuments);\n                });\n                stream.resume();\n            });\n        });\n    }\n    /**\n     * Registers a listener on this client, incrementing the listener count. This\n     * is used to verify that all listeners are unsubscribed when terminate() is\n     * called.\n     *\n     * @private\n     */\n    registerListener() {\n        this.registeredListenersCount += 1;\n    }\n    /**\n     * Unregisters a listener on this client, decrementing the listener count.\n     * This is used to verify that all listeners are unsubscribed when terminate()\n     * is called.\n     *\n     * @private\n     */\n    unregisterListener() {\n        this.registeredListenersCount -= 1;\n    }\n    /**\n     * Terminates the Firestore client and closes all open streams.\n     *\n     * @return A Promise that resolves when the client is terminated.\n     */\n    terminate() {\n        if (this.registeredListenersCount > 0) {\n            return Promise.reject('All onSnapshot() listeners must be unsubscribed before terminating the client.');\n        }\n        return this._clientPool.terminate();\n    }\n    /**\n     * Initializes the client if it is not already initialized. All methods in the\n     * SDK can be used after this method completes.\n     *\n     * @private\n     * @param requestTag A unique client-assigned identifier that caused this\n     * initialization.\n     * @return A Promise that resolves when the client is initialized.\n     */\n    async initializeIfNeeded(requestTag) {\n        this._settingsFrozen = true;\n        if (this._projectId === undefined) {\n            try {\n                this._projectId = await this._clientPool.run(requestTag, gapicClient => gapicClient.getProjectId());\n                logger_1.logger('Firestore.initializeIfNeeded', null, 'Detected project ID: %s', this._projectId);\n            }\n            catch (err) {\n                logger_1.logger('Firestore.initializeIfNeeded', null, 'Failed to detect project ID: %s', err);\n                return Promise.reject(err);\n            }\n        }\n    }\n    /**\n     * Returns GAX call options that set the cloud resource header.\n     * @private\n     */\n    createCallOptions() {\n        return {\n            otherArgs: {\n                headers: Object.assign({ [CLOUD_RESOURCE_HEADER]: this.formattedName }, this._settings.customHeaders),\n            },\n        };\n    }\n    /**\n     * A function returning a Promise that can be retried.\n     *\n     * @private\n     * @callback retryFunction\n     * @returns {Promise} A Promise indicating the function's success.\n     */\n    /**\n     * Helper method that retries failed Promises.\n     *\n     * If 'delayMs' is specified, waits 'delayMs' between invocations. Otherwise,\n     * schedules the first attempt immediately, and then waits 100 milliseconds\n     * for further attempts.\n     *\n     * @private\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param func Method returning a Promise than can be retried.\n     * @returns  - A Promise with the function's result if successful within\n     * `attemptsRemaining`. Otherwise, returns the last rejected Promise.\n     */\n    async _retry(methodName, requestTag, func) {\n        const backoff = new backoff_1.ExponentialBackoff();\n        let lastError = undefined;\n        for (let attempt = 0; attempt < MAX_REQUEST_RETRIES; ++attempt) {\n            if (lastError) {\n                logger_1.logger('Firestore._retry', requestTag, 'Retrying request that failed with error:', lastError);\n            }\n            try {\n                await backoff.backoffAndWait();\n                const result = await func();\n                this._lastSuccessfulRequest = new Date().getTime();\n                return result;\n            }\n            catch (err) {\n                lastError = err;\n                if (util_1.isPermanentRpcError(err, methodName, serviceConfig)) {\n                    break;\n                }\n            }\n        }\n        logger_1.logger('Firestore._retry', requestTag, 'Request failed with error:', lastError);\n        return Promise.reject(lastError);\n    }\n    /**\n     * Waits for the provided stream to become active and returns a paused but\n     * healthy stream. If an error occurs before the first byte is read, the\n     * method rejects the returned Promise.\n     *\n     * @private\n     * @param backendStream The Node stream to monitor.\n     * @param lifetime A Promise that resolves when the stream receives an 'end',\n     * 'close' or 'finish' message.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param request If specified, the request that should be written to the\n     * stream after opening.\n     * @returns A guaranteed healthy stream that should be used instead of\n     * `backendStream`.\n     */\n    _initializeStream(backendStream, lifetime, requestTag, request) {\n        const resultStream = new stream_1.PassThrough({ objectMode: true });\n        resultStream.pause();\n        /**\n         * Whether we have resolved the Promise and returned the stream to the\n         * caller.\n         */\n        let streamInitialized = false;\n        return new Promise((resolve, reject) => {\n            function streamReady() {\n                if (!streamInitialized) {\n                    streamInitialized = true;\n                    logger_1.logger('Firestore._initializeStream', requestTag, 'Releasing stream');\n                    resolve(resultStream);\n                }\n            }\n            function streamEnded() {\n                logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream end');\n                resultStream.unpipe(backendStream);\n                resolve(resultStream);\n                lifetime.resolve();\n            }\n            function streamFailed(err) {\n                if (!streamInitialized) {\n                    // If we receive an error before we were able to receive any data,\n                    // reject this stream.\n                    logger_1.logger('Firestore._initializeStream', requestTag, 'Received initial error:', err);\n                    reject(err);\n                }\n                else {\n                    logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream error:', err);\n                    // We execute the forwarding of the 'error' event via setImmediate() as\n                    // V8 guarantees that the Promise chain returned from this method\n                    // is resolved before any code executed via setImmediate(). This\n                    // allows the caller to attach an error handler.\n                    setImmediate(() => {\n                        resultStream.emit('error', err);\n                    });\n                }\n            }\n            backendStream.on('data', () => streamReady());\n            backendStream.on('error', err => streamFailed(err));\n            backendStream.on('end', () => streamEnded());\n            backendStream.on('close', () => streamEnded());\n            backendStream.on('finish', () => streamEnded());\n            backendStream.pipe(resultStream);\n            if (request) {\n                logger_1.logger('Firestore._initializeStream', requestTag, 'Sending request: %j', request);\n                backendStream.write(request, 'utf-8', err => {\n                    if (err) {\n                        streamFailed(err);\n                    }\n                    else {\n                        logger_1.logger('Firestore._initializeStream', requestTag, 'Marking stream as healthy');\n                        streamReady();\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * A funnel for all non-streaming API requests, assigning a project ID where\n     * necessary within the request options.\n     *\n     * @private\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @returns A Promise with the request result.\n     */\n    request(methodName, request, requestTag) {\n        const callOptions = this.createCallOptions();\n        return this._clientPool.run(requestTag, async (gapicClient) => {\n            try {\n                logger_1.logger('Firestore.request', requestTag, 'Sending request: %j', request);\n                const [result] = await gapicClient[methodName](request, callOptions);\n                logger_1.logger('Firestore.request', requestTag, 'Received response: %j', result);\n                this._lastSuccessfulRequest = new Date().getTime();\n                return result;\n            }\n            catch (err) {\n                logger_1.logger('Firestore.request', requestTag, 'Received error:', err);\n                return Promise.reject(err);\n            }\n        });\n    }\n    /**\n     * A funnel for streaming API requests, assigning a project ID where necessary\n     * within the request options.\n     *\n     * The stream is returned in paused state and needs to be resumed once all\n     * listeners are attached.\n     *\n     * @private\n     * @param methodName Name of the streaming Veneer API endpoint that\n     * takes a request and GAX options.\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @returns A Promise with the resulting read-only stream.\n     */\n    requestStream(methodName, request, requestTag) {\n        const callOptions = this.createCallOptions();\n        const bidirectional = methodName === 'listen';\n        return this._retry(methodName, requestTag, () => {\n            const result = new util_1.Deferred();\n            this._clientPool.run(requestTag, async (gapicClient) => {\n                logger_1.logger('Firestore.requestStream', requestTag, 'Sending request: %j', request);\n                try {\n                    const stream = bidirectional\n                        ? gapicClient[methodName](callOptions)\n                        : gapicClient[methodName](request, callOptions);\n                    const logStream = through2.obj(function (chunk, enc, callback) {\n                        logger_1.logger('Firestore.requestStream', requestTag, 'Received response: %j', chunk);\n                        callback();\n                    });\n                    stream.pipe(logStream);\n                    const lifetime = new util_1.Deferred();\n                    const resultStream = await this._initializeStream(stream, lifetime, requestTag, bidirectional ? request : undefined);\n                    resultStream.on('end', () => stream.end());\n                    result.resolve(resultStream);\n                    // While we return the stream to the callee early, we don't want to\n                    // release the GAPIC client until the callee has finished processing the\n                    // stream.\n                    return lifetime.promise;\n                }\n                catch (e) {\n                    result.reject(e);\n                }\n            });\n            return result.promise;\n        });\n    }\n}\nexports.Firestore = Firestore;\n/**\n * A logging function that takes a single string.\n *\n * @callback Firestore~logFunction\n * @param {string} Log message\n */\n// tslint:disable-next-line:no-default-export\n/**\n * The default export of the `@google-cloud/firestore` package is the\n * {@link Firestore} class.\n *\n * See {@link Firestore} and {@link ClientConfig} for client methods and\n * configuration options.\n *\n * @module {Firestore} @google-cloud/firestore\n * @alias nodejs-firestore\n *\n * @example <caption>Install the client library with <a\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\n * @google-cloud/firestore\n *\n * @example <caption>Import the client library</caption>\n * var Firestore = require('@google-cloud/firestore');\n *\n * @example <caption>Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\n *\n * @example <caption>Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\n// tslint:disable-next-line:no-default-export\nexports.default = Firestore;\n// Horrible hack to ensure backwards compatibility with <= 17.0, which allows\n// users to call the default constructor via\n// `const Fs = require(`@google-cloud/firestore`); new Fs()`;\nconst existingExports = module.exports;\nmodule.exports = Firestore;\nmodule.exports = Object.assign(module.exports, existingExports);\n/**\n * {@link v1beta1} factory function.\n *\n * @private\n * @name Firestore.v1beta1\n * @see v1beta1\n * @type {function}\n */\nObject.defineProperty(module.exports, 'v1beta1', {\n    // The v1beta1 module is very large. To avoid pulling it in from static\n    // scope, we lazy-load and cache the module.\n    get: () => {\n        if (!v1beta1) {\n            v1beta1 = require('./v1beta1');\n        }\n        return v1beta1;\n    },\n});\n/**\n * {@link v1} factory function.\n *\n * @private\n * @name Firestore.v1\n * @see v1\n * @type {function}\n */\nObject.defineProperty(module.exports, 'v1', {\n    // The v1 module is very large. To avoid pulling it in from static\n    // scope, we lazy-load and cache the module.\n    get: () => {\n        if (!v1) {\n            v1 = require('./v1');\n        }\n        return v1;\n    },\n});\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}