{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge, themeDocUtils } from '../../utils';\nexport var doc = function doc(TextInput) {\n  var DocumentedTextInput = describe(TextInput).availableAt(getAvailableAtBadge('TextInput')).description('A control to input a single line of text, with optional suggestions.').usage(\"import { TextInput } from 'grommet';\\n<TextInput id='item' name='item' />\").intrinsicElement('input');\n  DocumentedTextInput.propTypes = {\n    dropAlign: PropTypes.shape({\n      top: PropTypes.oneOf(['top', 'bottom']),\n      bottom: PropTypes.oneOf(['top', 'bottom']),\n      right: PropTypes.oneOf(['left', 'right']),\n      left: PropTypes.oneOf(['left', 'right'])\n    }).description('How to align the drop.').defaultValue({\n      top: 'bottom',\n      left: 'left'\n    }),\n    dropHeight: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The height of the drop container.'),\n    dropTarget: PropTypes.object.description(\"Target where any suggestions drop will be aligned to. This should be\\n      a React reference. Typically, this is not required as the drop will be\\n      aligned to the TextInput itself by default.\"),\n    dropProps: PropTypes.object.description('Any valid Drop prop.'),\n    id: PropTypes.string.description('The id attribute of the input.'),\n    focusIndicator: PropTypes.bool.description('Whether the plain text input should receive a focus outline.'),\n    messages: PropTypes.shape({\n      enterSelect: PropTypes.string,\n      suggestionsCount: PropTypes.string,\n      suggestionsExist: PropTypes.string,\n      suggestionIsOpen: PropTypes.string\n    }).description(\"Custom messages for TextInput. Used for accessibility by screen \\n        readers.\").defaultValue({\n      enterSelect: '(Press Enter to Select)',\n      suggestionsCount: 'suggestions available',\n      suggestionsExist: 'This input has suggestions use arrow keys to navigate',\n      suggestionIsOpen: 'Suggestions drop is open, continue to use arrow keys to navigate'\n    }),\n    name: PropTypes.string.description('The name attribute of the input.'),\n    onChange: PropTypes.func.description('Function that will be called when the user types in the input.'),\n    onSelect: PropTypes.func.description(\"Function that will be called when the user selects a suggestion.\\nThe suggestion contains the object chosen from the supplied suggestions.\"),\n    onSuggestionsOpen: PropTypes.func.description('Function that will be called when the suggestions drop is opened.'),\n    onSuggestionsClose: PropTypes.func.description('Function that will be called when the suggestions drop is closed.'),\n    placeholder: PropTypes.node.description('Placeholder to use when no value is provided.'),\n    plain: PropTypes.bool.description(\"Whether this is a plain input with no border or padding.\\nOnly use this when the containing context provides sufficient affordance\"),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The size of the TextInput.'),\n    suggestions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({\n      label: PropTypes.node,\n      value: PropTypes.any\n    }), PropTypes.string])).description(\"Suggestions to show. It is recommended to avoid showing too many\\nsuggestions and instead rely on the user to type more.\"),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).description('What text to put in the input.')\n  };\n  return DocumentedTextInput;\n};\nexport var themeDoc = _extends({\n  'global.colors.border': {\n    description: 'The color of the border.',\n    type: 'object',\n    defaultValue: {\n      dark: 'rgba(255, 255, 255, 0.33)',\n      light: 'rgba(0, 0, 0, 0.33)'\n    }\n  },\n  'global.control.border.color': {\n    description: 'The border color.',\n    type: 'string',\n    defaultValue: 'border'\n  },\n  'global.control.border.radius': {\n    description: 'The border radius.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'global.control.border.width': {\n    description: 'The border width.',\n    type: 'string',\n    defaultValue: '1px'\n  },\n  'select.step': {\n    description: 'How many suggestions to render at a time.',\n    type: 'number',\n    defaultValue: 20\n  },\n  text: {\n    description: \"The possible sizes of the text in terms of its font-size and \\n    line-height.\",\n    type: 'object',\n    defaultValue: \"{\\n      xsmall: {\\n        size: '12px',\\n        height: '18px',\\n       },\\n      small: {\\n        size: '14px',\\n        height: '20px',\\n       },\\n      medium: {\\n        size: '18px',\\n        height: '24px',\\n      },\\n      large: {\\n        size: '22px',\\n        height: '28px',\\n      },\\n      xlarge: {\\n        size: '26px',\\n        height: '32px',\\n      },\\n      xxlarge: {\\n        size: '34px',\\n        height: '40px',\\n      },\\n    }\"\n  },\n  'textInput.extend': {\n    description: 'Any additional style for TextInput.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.container.extend': {\n    description: 'Any additional style for TextInput container.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.placeholder.extend': {\n    description: 'Any additional style for non-string placeholder inside TextInput.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.suggestions.extend': {\n    description: 'Any additional style for TextInput suggestions.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.disabled.opacity': {\n    description: 'The opacity when the textInput is disabled.',\n    type: 'number',\n    defaultValue: 0.3\n  }\n}, themeDocUtils.focusStyle, {}, themeDocUtils.placeholderStyle, {}, themeDocUtils.disabledStyle, {}, themeDocUtils.inputStyle);","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/TextInput/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","getAvailableAtBadge","themeDocUtils","doc","TextInput","DocumentedTextInput","availableAt","description","usage","intrinsicElement","propTypes","dropAlign","shape","top","oneOf","bottom","right","left","defaultValue","dropHeight","oneOfType","string","dropTarget","object","dropProps","id","focusIndicator","bool","messages","enterSelect","suggestionsCount","suggestionsExist","suggestionIsOpen","name","onChange","func","onSelect","onSuggestionsOpen","onSuggestionsClose","placeholder","node","plain","size","suggestions","arrayOf","label","value","any","number","themeDoc","type","dark","light","text","undefined","focusStyle","placeholderStyle","disabledStyle","inputStyle"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge, themeDocUtils } from '../../utils';\nexport var doc = function doc(TextInput) {\n  var DocumentedTextInput = describe(TextInput).availableAt(getAvailableAtBadge('TextInput')).description('A control to input a single line of text, with optional suggestions.').usage(\"import { TextInput } from 'grommet';\\n<TextInput id='item' name='item' />\").intrinsicElement('input');\n  DocumentedTextInput.propTypes = {\n    dropAlign: PropTypes.shape({\n      top: PropTypes.oneOf(['top', 'bottom']),\n      bottom: PropTypes.oneOf(['top', 'bottom']),\n      right: PropTypes.oneOf(['left', 'right']),\n      left: PropTypes.oneOf(['left', 'right'])\n    }).description('How to align the drop.').defaultValue({\n      top: 'bottom',\n      left: 'left'\n    }),\n    dropHeight: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The height of the drop container.'),\n    dropTarget: PropTypes.object.description(\"Target where any suggestions drop will be aligned to. This should be\\n      a React reference. Typically, this is not required as the drop will be\\n      aligned to the TextInput itself by default.\"),\n    dropProps: PropTypes.object.description('Any valid Drop prop.'),\n    id: PropTypes.string.description('The id attribute of the input.'),\n    focusIndicator: PropTypes.bool.description('Whether the plain text input should receive a focus outline.'),\n    messages: PropTypes.shape({\n      enterSelect: PropTypes.string,\n      suggestionsCount: PropTypes.string,\n      suggestionsExist: PropTypes.string,\n      suggestionIsOpen: PropTypes.string\n    }).description(\"Custom messages for TextInput. Used for accessibility by screen \\n        readers.\").defaultValue({\n      enterSelect: '(Press Enter to Select)',\n      suggestionsCount: 'suggestions available',\n      suggestionsExist: 'This input has suggestions use arrow keys to navigate',\n      suggestionIsOpen: 'Suggestions drop is open, continue to use arrow keys to navigate'\n    }),\n    name: PropTypes.string.description('The name attribute of the input.'),\n    onChange: PropTypes.func.description('Function that will be called when the user types in the input.'),\n    onSelect: PropTypes.func.description(\"Function that will be called when the user selects a suggestion.\\nThe suggestion contains the object chosen from the supplied suggestions.\"),\n    onSuggestionsOpen: PropTypes.func.description('Function that will be called when the suggestions drop is opened.'),\n    onSuggestionsClose: PropTypes.func.description('Function that will be called when the suggestions drop is closed.'),\n    placeholder: PropTypes.node.description('Placeholder to use when no value is provided.'),\n    plain: PropTypes.bool.description(\"Whether this is a plain input with no border or padding.\\nOnly use this when the containing context provides sufficient affordance\"),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The size of the TextInput.'),\n    suggestions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({\n      label: PropTypes.node,\n      value: PropTypes.any\n    }), PropTypes.string])).description(\"Suggestions to show. It is recommended to avoid showing too many\\nsuggestions and instead rely on the user to type more.\"),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).description('What text to put in the input.')\n  };\n  return DocumentedTextInput;\n};\nexport var themeDoc = _extends({\n  'global.colors.border': {\n    description: 'The color of the border.',\n    type: 'object',\n    defaultValue: {\n      dark: 'rgba(255, 255, 255, 0.33)',\n      light: 'rgba(0, 0, 0, 0.33)'\n    }\n  },\n  'global.control.border.color': {\n    description: 'The border color.',\n    type: 'string',\n    defaultValue: 'border'\n  },\n  'global.control.border.radius': {\n    description: 'The border radius.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'global.control.border.width': {\n    description: 'The border width.',\n    type: 'string',\n    defaultValue: '1px'\n  },\n  'select.step': {\n    description: 'How many suggestions to render at a time.',\n    type: 'number',\n    defaultValue: 20\n  },\n  text: {\n    description: \"The possible sizes of the text in terms of its font-size and \\n    line-height.\",\n    type: 'object',\n    defaultValue: \"{\\n      xsmall: {\\n        size: '12px',\\n        height: '18px',\\n       },\\n      small: {\\n        size: '14px',\\n        height: '20px',\\n       },\\n      medium: {\\n        size: '18px',\\n        height: '24px',\\n      },\\n      large: {\\n        size: '22px',\\n        height: '28px',\\n      },\\n      xlarge: {\\n        size: '26px',\\n        height: '32px',\\n      },\\n      xxlarge: {\\n        size: '34px',\\n        height: '40px',\\n      },\\n    }\"\n  },\n  'textInput.extend': {\n    description: 'Any additional style for TextInput.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.container.extend': {\n    description: 'Any additional style for TextInput container.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.placeholder.extend': {\n    description: 'Any additional style for non-string placeholder inside TextInput.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.suggestions.extend': {\n    description: 'Any additional style for TextInput suggestions.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.disabled.opacity': {\n    description: 'The opacity when the textInput is disabled.',\n    type: 'number',\n    defaultValue: 0.3\n  }\n}, themeDocUtils.focusStyle, {}, themeDocUtils.placeholderStyle, {}, themeDocUtils.disabledStyle, {}, themeDocUtils.inputStyle);"]},"metadata":{},"sourceType":"module"}