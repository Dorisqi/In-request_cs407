{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = createChannel;\nexports.PostmsgTransport = exports.KEY = void 0;\n\nvar _global = require(\"global\");\n\nvar _channels = _interopRequireDefault(require(\"@storybook/channels\"));\n\nvar _clientLogger = require(\"@storybook/client-logger\");\n\nvar _telejson = require(\"telejson\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar KEY = 'storybook-channel'; // TODO: we should export a method for opening child windows here and keep track of em.\n// that way we can send postMessage to child windows as well, not just iframe\n// https://stackoverflow.com/questions/6340160/how-to-get-the-references-of-all-already-opened-child-windows\n\nexports.KEY = KEY;\n\nvar PostmsgTransport =\n/*#__PURE__*/\nfunction () {\n  function PostmsgTransport(config) {\n    _classCallCheck(this, PostmsgTransport);\n\n    this.config = config;\n    this.buffer = void 0;\n    this.handler = void 0;\n    this.connected = void 0;\n    this.buffer = [];\n    this.handler = null;\n\n    _global.window.addEventListener('message', this.handleEvent.bind(this), false); // Check whether the config.page parameter has a valid value\n\n\n    if (config.page !== 'manager' && config.page !== 'preview') {\n      throw new Error(\"postmsg-channel: \\\"config.page\\\" cannot be \\\"\".concat(config.page, \"\\\"\"));\n    }\n  }\n\n  _createClass(PostmsgTransport, [{\n    key: \"setHandler\",\n    value: function setHandler(handler) {\n      var _this = this;\n\n      this.handler = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        handler.apply(_this, args);\n\n        if (!_this.connected && _this.getWindow()) {\n          _this.flush();\n\n          _this.connected = true;\n        }\n      };\n    }\n    /**\n     * Sends `event` to the associated window. If the window does not yet exist\n     * the event will be stored in a buffer and sent when the window exists.\n     * @param event\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(event, options) {\n      var _this2 = this;\n\n      var iframeWindow = this.getWindow();\n\n      if (!iframeWindow) {\n        return new Promise(function (resolve, reject) {\n          _this2.buffer.push({\n            event: event,\n            resolve: resolve,\n            reject: reject\n          });\n        });\n      }\n\n      var depth = 15;\n      var allowFunction = true;\n\n      if (options && typeof options.allowFunction === 'boolean') {\n        allowFunction = options.allowFunction;\n      }\n\n      if (options && Number.isInteger(options.depth)) {\n        depth = options.depth;\n      }\n\n      var data = (0, _telejson.stringify)({\n        key: KEY,\n        event: event\n      }, {\n        maxDepth: depth,\n        allowFunction: allowFunction\n      }); // TODO: investigate http://blog.teamtreehouse.com/cross-domain-messaging-with-postmessage\n      // might replace '*' with document.location ?\n\n      iframeWindow.postMessage(data, '*');\n      return Promise.resolve(null);\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var _this3 = this;\n\n      var buffer = this.buffer;\n      this.buffer = [];\n      buffer.forEach(function (item) {\n        _this3.send(item.event).then(item.resolve)[\"catch\"](item.reject);\n      });\n    }\n  }, {\n    key: \"getWindow\",\n    value: function getWindow() {\n      if (this.config.page === 'manager') {\n        // FIXME this is a really bad idea! use a better way to do this.\n        // This finds the storybook preview iframe to send messages to.\n        var iframe = _global.document.getElementById('storybook-preview-iframe');\n\n        if (!iframe) {\n          return null;\n        }\n\n        return iframe.contentWindow;\n      }\n\n      return _global.window.parent;\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(rawEvent) {\n      try {\n        var data = rawEvent.data;\n\n        var _ref = typeof data === 'string' && (0, _telejson.isJSON)(data) ? (0, _telejson.parse)(data) : data,\n            key = _ref.key,\n            event = _ref.event;\n\n        if (key === KEY) {\n          _clientLogger.logger.debug.apply(_clientLogger.logger, [\"message arrived at \".concat(this.config.page), event.type].concat(_toConsumableArray(event.args)));\n\n          this.handler(event);\n        }\n      } catch (error) {\n        _clientLogger.logger.error(error); // debugger;\n\n      }\n    }\n  }]);\n\n  return PostmsgTransport;\n}();\n/**\n * Creates a channel which communicates with an iframe or child window.\n */\n\n\nexports.PostmsgTransport = PostmsgTransport;\n\nfunction createChannel(_ref2) {\n  var page = _ref2.page;\n  var transport = new PostmsgTransport({\n    page: page\n  });\n  return new _channels[\"default\"]({\n    transport: transport\n  });\n}","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/@storybook/channel-postmessage/dist/index.js"],"names":["require","Object","defineProperty","exports","value","createChannel","PostmsgTransport","KEY","_global","_channels","_interopRequireDefault","_clientLogger","_telejson","obj","__esModule","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","prototype","toString","call","Array","from","isArray","i","arr2","length","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","key","_createClass","protoProps","staticProps","config","buffer","handler","connected","window","addEventListener","handleEvent","bind","page","Error","concat","setHandler","_this","_len","arguments","args","_key","apply","getWindow","flush","send","event","options","_this2","iframeWindow","Promise","resolve","reject","push","depth","allowFunction","Number","isInteger","data","stringify","maxDepth","postMessage","_this3","forEach","item","then","iframe","document","getElementById","contentWindow","parent","rawEvent","_ref","isJSON","parse","logger","debug","type","error","_ref2","transport"],"mappings":"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","sourcesContent":["\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.for-each\");\n\nrequire(\"core-js/modules/es.array.from\");\n\nrequire(\"core-js/modules/es.array.is-array\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.date.to-string\");\n\nrequire(\"core-js/modules/es.function.bind\");\n\nrequire(\"core-js/modules/es.number.constructor\");\n\nrequire(\"core-js/modules/es.number.is-integer\");\n\nrequire(\"core-js/modules/es.object.define-property\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.promise\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = createChannel;\nexports.PostmsgTransport = exports.KEY = void 0;\n\nvar _global = require(\"global\");\n\nvar _channels = _interopRequireDefault(require(\"@storybook/channels\"));\n\nvar _clientLogger = require(\"@storybook/client-logger\");\n\nvar _telejson = require(\"telejson\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar KEY = 'storybook-channel'; // TODO: we should export a method for opening child windows here and keep track of em.\n// that way we can send postMessage to child windows as well, not just iframe\n// https://stackoverflow.com/questions/6340160/how-to-get-the-references-of-all-already-opened-child-windows\n\nexports.KEY = KEY;\n\nvar PostmsgTransport =\n/*#__PURE__*/\nfunction () {\n  function PostmsgTransport(config) {\n    _classCallCheck(this, PostmsgTransport);\n\n    this.config = config;\n    this.buffer = void 0;\n    this.handler = void 0;\n    this.connected = void 0;\n    this.buffer = [];\n    this.handler = null;\n\n    _global.window.addEventListener('message', this.handleEvent.bind(this), false); // Check whether the config.page parameter has a valid value\n\n\n    if (config.page !== 'manager' && config.page !== 'preview') {\n      throw new Error(\"postmsg-channel: \\\"config.page\\\" cannot be \\\"\".concat(config.page, \"\\\"\"));\n    }\n  }\n\n  _createClass(PostmsgTransport, [{\n    key: \"setHandler\",\n    value: function setHandler(handler) {\n      var _this = this;\n\n      this.handler = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        handler.apply(_this, args);\n\n        if (!_this.connected && _this.getWindow()) {\n          _this.flush();\n\n          _this.connected = true;\n        }\n      };\n    }\n    /**\n     * Sends `event` to the associated window. If the window does not yet exist\n     * the event will be stored in a buffer and sent when the window exists.\n     * @param event\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(event, options) {\n      var _this2 = this;\n\n      var iframeWindow = this.getWindow();\n\n      if (!iframeWindow) {\n        return new Promise(function (resolve, reject) {\n          _this2.buffer.push({\n            event: event,\n            resolve: resolve,\n            reject: reject\n          });\n        });\n      }\n\n      var depth = 15;\n      var allowFunction = true;\n\n      if (options && typeof options.allowFunction === 'boolean') {\n        allowFunction = options.allowFunction;\n      }\n\n      if (options && Number.isInteger(options.depth)) {\n        depth = options.depth;\n      }\n\n      var data = (0, _telejson.stringify)({\n        key: KEY,\n        event: event\n      }, {\n        maxDepth: depth,\n        allowFunction: allowFunction\n      }); // TODO: investigate http://blog.teamtreehouse.com/cross-domain-messaging-with-postmessage\n      // might replace '*' with document.location ?\n\n      iframeWindow.postMessage(data, '*');\n      return Promise.resolve(null);\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var _this3 = this;\n\n      var buffer = this.buffer;\n      this.buffer = [];\n      buffer.forEach(function (item) {\n        _this3.send(item.event).then(item.resolve)[\"catch\"](item.reject);\n      });\n    }\n  }, {\n    key: \"getWindow\",\n    value: function getWindow() {\n      if (this.config.page === 'manager') {\n        // FIXME this is a really bad idea! use a better way to do this.\n        // This finds the storybook preview iframe to send messages to.\n        var iframe = _global.document.getElementById('storybook-preview-iframe');\n\n        if (!iframe) {\n          return null;\n        }\n\n        return iframe.contentWindow;\n      }\n\n      return _global.window.parent;\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(rawEvent) {\n      try {\n        var data = rawEvent.data;\n\n        var _ref = typeof data === 'string' && (0, _telejson.isJSON)(data) ? (0, _telejson.parse)(data) : data,\n            key = _ref.key,\n            event = _ref.event;\n\n        if (key === KEY) {\n          _clientLogger.logger.debug.apply(_clientLogger.logger, [\"message arrived at \".concat(this.config.page), event.type].concat(_toConsumableArray(event.args)));\n\n          this.handler(event);\n        }\n      } catch (error) {\n        _clientLogger.logger.error(error); // debugger;\n\n      }\n    }\n  }]);\n\n  return PostmsgTransport;\n}();\n/**\n * Creates a channel which communicates with an iframe or child window.\n */\n\n\nexports.PostmsgTransport = PostmsgTransport;\n\nfunction createChannel(_ref2) {\n  var page = _ref2.page;\n  var transport = new PostmsgTransport({\n    page: page\n  });\n  return new _channels[\"default\"]({\n    transport: transport\n  });\n}"]},"metadata":{},"sourceType":"script"}