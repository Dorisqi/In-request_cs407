{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @property {Function=} promise - A constructor for a promise that implements the ES6\n * specification of promise which will be used to create promises. If not\n * provided, native promises will be used.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\n\nclass RetryOptions {\n  constructor(retryCodes, backoffSettings) {\n    this.retryCodes = retryCodes;\n    this.backoffSettings = backoffSettings;\n  }\n\n}\n\nexports.RetryOptions = RetryOptions;\n\nclass CallSettings {\n  /**\n   * @param {Object} settings - An object containing parameters of this settings.\n   * @param {number} settings.timeout - The client-side timeout for API calls.\n   *   This parameter is ignored for retrying calls.\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\n   *   transient error. If set to null, this call will not retry.\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n   *   this attrbute has no meaning. Otherwise, determines whether a page\n   * streamed response should make the page structure transparent to the user by\n   *   flattening the repeated field in the returned generator.\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n   *   this attribute has no meaning. Otherwise, determines the page token used\n   * in the page streaming request.\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\n   *   the API calls.\n   * @param {Function=} settings.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   *\n   * @constructor\n   */\n  constructor(settings) {\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate = 'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.pageToken = settings.pageToken;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling : true;\n    this.longrunning = 'longrunning' in settings ? settings.longrunning : undefined;\n    this.promise = 'promise' in settings ? settings.promise : Promise;\n  }\n  /**\n   * Returns a new CallSettings merged from this and a CallOptions object.\n   *\n   * @param {CallOptions} options - an instance whose values override\n   *   those in this object. If null, ``merge`` returns a copy of this\n   *   object\n   * @return {CallSettings} The merged CallSettings instance.\n   */\n\n\n  merge(options) {\n    if (!options) {\n      return new CallSettings(this);\n    }\n\n    let timeout = this.timeout;\n    let retry = this.retry;\n    let autoPaginate = this.autoPaginate;\n    let pageToken = this.pageToken;\n    let pageSize = this.pageSize;\n    let maxResults = this.maxResults;\n    let otherArgs = this.otherArgs;\n    let isBundling = this.isBundling;\n    let longrunning = this.longrunning;\n    let promise = this.promise;\n\n    if ('timeout' in options) {\n      timeout = options.timeout;\n    }\n\n    if ('retry' in options) {\n      retry = options.retry;\n    }\n\n    if ('autoPaginate' in options && !options.autoPaginate) {\n      autoPaginate = false;\n    }\n\n    if ('pageToken' in options) {\n      autoPaginate = false;\n      pageToken = options.pageToken;\n    }\n\n    if ('pageSize' in options) {\n      pageSize = options.pageSize;\n    }\n\n    if ('maxResults' in options) {\n      maxResults = options.maxResults;\n    }\n\n    if ('otherArgs' in options) {\n      otherArgs = {}; // tslint:disable-next-line forin\n\n      for (const key in this.otherArgs) {\n        otherArgs[key] = this.otherArgs[key];\n      } // tslint:disable-next-line forin\n\n\n      for (const optionsKey in options.otherArgs) {\n        otherArgs[optionsKey] = options.otherArgs[optionsKey];\n      }\n    }\n\n    if ('isBundling' in options) {\n      isBundling = options.isBundling;\n    }\n\n    if ('maxRetries' in options) {\n      retry.backoffSettings.maxRetries = options.maxRetries;\n      delete retry.backoffSettings.totalTimeoutMillis;\n    }\n\n    if ('longrunning' in options) {\n      longrunning = options.longrunning;\n    }\n\n    if ('promise' in options) {\n      promise = options.promise;\n    }\n\n    return new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: this.bundleOptions,\n      longrunning,\n      autoPaginate,\n      pageToken,\n      pageSize,\n      maxResults,\n      otherArgs,\n      isBundling,\n      promise\n    });\n  }\n\n}\n\nexports.CallSettings = CallSettings;\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {number[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\n\nfunction createRetryOptions(retryCodes, backoffSettings) {\n  return {\n    retryCodes,\n    backoffSettings\n  };\n}\n\nexports.createRetryOptions = createRetryOptions;\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\n\nfunction createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    totalTimeoutMillis\n  };\n}\n\nexports.createBackoffSettings = createBackoffSettings;\n\nfunction createDefaultBackoffSettings() {\n  return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n\nexports.createDefaultBackoffSettings = createDefaultBackoffSettings;\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\n\nfunction createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    maxRetries\n  };\n}\n\nexports.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\n\nfunction createBundleOptions(options) {\n  const params = ['element_count_threshold', 'element_count_limit', 'request_byte_threshold', 'request_byte_limit', 'delay_threshold_millis'];\n  params.forEach(param => {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(`${param} should be a number`);\n    }\n  });\n  const elementCountThreshold = options.element_count_threshold || 0;\n  const elementCountLimit = options.element_count_limit || 0;\n  const requestByteThreshold = options.request_byte_threshold || 0;\n  const requestByteLimit = options.request_byte_limit || 0;\n  const delayThreshold = options.delay_threshold_millis || 0;\n\n  if (elementCountThreshold === 0 && requestByteThreshold === 0 && delayThreshold === 0) {\n    throw new Error('one threshold should be > 0');\n  }\n\n  return {\n    elementCountThreshold,\n    elementCountLimit,\n    requestByteThreshold,\n    requestByteLimit,\n    delayThreshold\n  };\n}\n\nexports.createBundleOptions = createBundleOptions;\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\n\nfunction constructRetry(methodConfig, retryCodes, retryParams, retryNames) {\n  if (!methodConfig) {\n    return null;\n  }\n\n  let codes = null;\n\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    const retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(name => {\n      return Number(retryNames[name]);\n    });\n  }\n\n  let backoffSettings = null;\n\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    const params = retryParams[methodConfig.retry_params_name];\n    backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);\n  }\n\n  return createRetryOptions(codes, backoffSettings);\n}\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\n\n\nfunction mergeRetryOptions(retry, overrides) {\n  if (!overrides) {\n    return null;\n  }\n\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n\n  let codes = retry.retryCodes;\n\n  if (overrides.retryCodes) {\n    codes = overrides.retryCodes;\n  }\n\n  let backoffSettings = retry.backoffSettings;\n\n  if (overrides.backoffSettings) {\n    backoffSettings = overrides.backoffSettings;\n  }\n\n  return createRetryOptions(codes, backoffSettings);\n}\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.<string, string[]>} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @param {Function=} promise - A constructor for a promise that implements the\n * ES6 specification of promise. If not provided, native promises will be used.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\n\n\nfunction constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs, promise) {\n  otherArgs = otherArgs || {}; // tslint:disable-next-line no-any\n\n  const defaults = {};\n  const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n\n  if (!serviceConfig) {\n    return null;\n  }\n\n  const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  const methods = serviceConfig.methods;\n  const overridingMethods = overrides.methods || {}; // tslint:disable-next-line forin\n\n  for (const methodName in methods) {\n    const methodConfig = methods[methodName];\n    const jsName = methodName[0].toLowerCase() + methodName.slice(1);\n    let retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);\n    let bundlingConfig = methodConfig.bundling;\n    let timeout = methodConfig.timeout_millis;\n\n    if (methodName in overridingMethods) {\n      const overridingMethod = overridingMethods[methodName];\n\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n\n      retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));\n    }\n\n    defaults[jsName] = new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: bundlingConfig ? createBundleOptions(bundlingConfig) : null,\n      otherArgs,\n      promise: promise || Promise\n    });\n  }\n\n  return defaults;\n}\n\nexports.constructSettings = constructSettings;","map":{"version":3,"sources":["../../src/gax.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @property {Function=} promise - A constructor for a promise that implements the ES6\n * specification of promise which will be used to create promises. If not\n * provided, native promises will be used.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\nclass RetryOptions {\n    constructor(retryCodes, backoffSettings) {\n        this.retryCodes = retryCodes;\n        this.backoffSettings = backoffSettings;\n    }\n}\nexports.RetryOptions = RetryOptions;\nclass CallSettings {\n    /**\n     * @param {Object} settings - An object containing parameters of this settings.\n     * @param {number} settings.timeout - The client-side timeout for API calls.\n     *   This parameter is ignored for retrying calls.\n     * @param {RetryOptions} settings.retry - The configuration for retrying upon\n     *   transient error. If set to null, this call will not retry.\n     * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n     *   this attrbute has no meaning. Otherwise, determines whether a page\n     * streamed response should make the page structure transparent to the user by\n     *   flattening the repeated field in the returned generator.\n     * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n     *   this attribute has no meaning. Otherwise, determines the page token used\n     * in the page streaming request.\n     * @param {Object} settings.otherArgs - Additional arguments to be passed to\n     *   the API calls.\n     * @param {Function=} settings.promise - A constructor for a promise that\n     * implements the ES6 specification of promise. If not provided, native\n     * promises will be used.\n     *\n     * @constructor\n     */\n    constructor(settings) {\n        settings = settings || {};\n        this.timeout = settings.timeout || 30 * 1000;\n        this.retry = settings.retry;\n        this.autoPaginate =\n            'autoPaginate' in settings ? settings.autoPaginate : true;\n        this.pageToken = settings.pageToken;\n        this.maxResults = settings.maxResults;\n        this.otherArgs = settings.otherArgs || {};\n        this.bundleOptions = settings.bundleOptions;\n        this.isBundling = 'isBundling' in settings ? settings.isBundling : true;\n        this.longrunning =\n            'longrunning' in settings ? settings.longrunning : undefined;\n        this.promise = 'promise' in settings ? settings.promise : Promise;\n    }\n    /**\n     * Returns a new CallSettings merged from this and a CallOptions object.\n     *\n     * @param {CallOptions} options - an instance whose values override\n     *   those in this object. If null, ``merge`` returns a copy of this\n     *   object\n     * @return {CallSettings} The merged CallSettings instance.\n     */\n    merge(options) {\n        if (!options) {\n            return new CallSettings(this);\n        }\n        let timeout = this.timeout;\n        let retry = this.retry;\n        let autoPaginate = this.autoPaginate;\n        let pageToken = this.pageToken;\n        let pageSize = this.pageSize;\n        let maxResults = this.maxResults;\n        let otherArgs = this.otherArgs;\n        let isBundling = this.isBundling;\n        let longrunning = this.longrunning;\n        let promise = this.promise;\n        if ('timeout' in options) {\n            timeout = options.timeout;\n        }\n        if ('retry' in options) {\n            retry = options.retry;\n        }\n        if ('autoPaginate' in options && !options.autoPaginate) {\n            autoPaginate = false;\n        }\n        if ('pageToken' in options) {\n            autoPaginate = false;\n            pageToken = options.pageToken;\n        }\n        if ('pageSize' in options) {\n            pageSize = options.pageSize;\n        }\n        if ('maxResults' in options) {\n            maxResults = options.maxResults;\n        }\n        if ('otherArgs' in options) {\n            otherArgs = {};\n            // tslint:disable-next-line forin\n            for (const key in this.otherArgs) {\n                otherArgs[key] = this.otherArgs[key];\n            }\n            // tslint:disable-next-line forin\n            for (const optionsKey in options.otherArgs) {\n                otherArgs[optionsKey] = options.otherArgs[optionsKey];\n            }\n        }\n        if ('isBundling' in options) {\n            isBundling = options.isBundling;\n        }\n        if ('maxRetries' in options) {\n            retry.backoffSettings.maxRetries = options.maxRetries;\n            delete retry.backoffSettings.totalTimeoutMillis;\n        }\n        if ('longrunning' in options) {\n            longrunning = options.longrunning;\n        }\n        if ('promise' in options) {\n            promise = options.promise;\n        }\n        return new CallSettings({\n            timeout,\n            retry,\n            bundleOptions: this.bundleOptions,\n            longrunning,\n            autoPaginate,\n            pageToken,\n            pageSize,\n            maxResults,\n            otherArgs,\n            isBundling,\n            promise,\n        });\n    }\n}\nexports.CallSettings = CallSettings;\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {number[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\nfunction createRetryOptions(retryCodes, backoffSettings) {\n    return {\n        retryCodes,\n        backoffSettings,\n    };\n}\nexports.createRetryOptions = createRetryOptions;\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\nfunction createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {\n    return {\n        initialRetryDelayMillis,\n        retryDelayMultiplier,\n        maxRetryDelayMillis,\n        initialRpcTimeoutMillis,\n        rpcTimeoutMultiplier,\n        maxRpcTimeoutMillis,\n        totalTimeoutMillis,\n    };\n}\nexports.createBackoffSettings = createBackoffSettings;\nfunction createDefaultBackoffSettings() {\n    return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\nexports.createDefaultBackoffSettings = createDefaultBackoffSettings;\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\nfunction createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {\n    return {\n        initialRetryDelayMillis,\n        retryDelayMultiplier,\n        maxRetryDelayMillis,\n        initialRpcTimeoutMillis,\n        rpcTimeoutMultiplier,\n        maxRpcTimeoutMillis,\n        maxRetries,\n    };\n}\nexports.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\nfunction createBundleOptions(options) {\n    const params = [\n        'element_count_threshold',\n        'element_count_limit',\n        'request_byte_threshold',\n        'request_byte_limit',\n        'delay_threshold_millis',\n    ];\n    params.forEach(param => {\n        if (param in options && typeof options[param] !== 'number') {\n            throw new Error(`${param} should be a number`);\n        }\n    });\n    const elementCountThreshold = options.element_count_threshold || 0;\n    const elementCountLimit = options.element_count_limit || 0;\n    const requestByteThreshold = options.request_byte_threshold || 0;\n    const requestByteLimit = options.request_byte_limit || 0;\n    const delayThreshold = options.delay_threshold_millis || 0;\n    if (elementCountThreshold === 0 &&\n        requestByteThreshold === 0 &&\n        delayThreshold === 0) {\n        throw new Error('one threshold should be > 0');\n    }\n    return {\n        elementCountThreshold,\n        elementCountLimit,\n        requestByteThreshold,\n        requestByteLimit,\n        delayThreshold,\n    };\n}\nexports.createBundleOptions = createBundleOptions;\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\nfunction constructRetry(methodConfig, retryCodes, retryParams, retryNames) {\n    if (!methodConfig) {\n        return null;\n    }\n    let codes = null;\n    if (retryCodes && 'retry_codes_name' in methodConfig) {\n        const retryCodesName = methodConfig['retry_codes_name'];\n        codes = (retryCodes[retryCodesName] || []).map(name => {\n            return Number(retryNames[name]);\n        });\n    }\n    let backoffSettings = null;\n    if (retryParams && 'retry_params_name' in methodConfig) {\n        const params = retryParams[methodConfig.retry_params_name];\n        backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);\n    }\n    return createRetryOptions(codes, backoffSettings);\n}\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\nfunction mergeRetryOptions(retry, overrides) {\n    if (!overrides) {\n        return null;\n    }\n    if (!overrides.retryCodes && !overrides.backoffSettings) {\n        return retry;\n    }\n    let codes = retry.retryCodes;\n    if (overrides.retryCodes) {\n        codes = overrides.retryCodes;\n    }\n    let backoffSettings = retry.backoffSettings;\n    if (overrides.backoffSettings) {\n        backoffSettings = overrides.backoffSettings;\n    }\n    return createRetryOptions(codes, backoffSettings);\n}\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.<string, string[]>} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @param {Function=} promise - A constructor for a promise that implements the\n * ES6 specification of promise. If not provided, native promises will be used.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\nfunction constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs, promise) {\n    otherArgs = otherArgs || {};\n    // tslint:disable-next-line no-any\n    const defaults = {};\n    const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n    if (!serviceConfig) {\n        return null;\n    }\n    const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n    const methods = serviceConfig.methods;\n    const overridingMethods = overrides.methods || {};\n    // tslint:disable-next-line forin\n    for (const methodName in methods) {\n        const methodConfig = methods[methodName];\n        const jsName = methodName[0].toLowerCase() + methodName.slice(1);\n        let retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);\n        let bundlingConfig = methodConfig.bundling;\n        let timeout = methodConfig.timeout_millis;\n        if (methodName in overridingMethods) {\n            const overridingMethod = overridingMethods[methodName];\n            if (overridingMethod) {\n                if ('bundling' in overridingMethod) {\n                    bundlingConfig = overridingMethod.bundling;\n                }\n                if ('timeout_millis' in overridingMethod) {\n                    timeout = overridingMethod.timeout_millis;\n                }\n            }\n            retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));\n        }\n        defaults[jsName] = new CallSettings({\n            timeout,\n            retry,\n            bundleOptions: bundlingConfig\n                ? createBundleOptions(bundlingConfig)\n                : null,\n            otherArgs,\n            promise: promise || Promise,\n        });\n    }\n    return defaults;\n}\nexports.constructSettings = constructSettings;\n//# sourceMappingURL=gax.js.map"]},"metadata":{},"sourceType":"script"}