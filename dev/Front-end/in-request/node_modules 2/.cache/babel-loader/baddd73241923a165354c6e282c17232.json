{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst filter_1 = require(\"./filter\");\n\nconst constants_1 = require(\"./constants\");\n\nclass CallCredentialsFilter extends filter_1.BaseFilter {\n  constructor(channel, stream) {\n    super();\n    this.channel = channel;\n    this.stream = stream;\n    this.channel = channel;\n    this.stream = stream;\n    const splitPath = stream.getMethod().split('/');\n    let serviceName = '';\n    /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\n     * by '/', the first item should be empty and the second should be the\n     * service name */\n\n    if (splitPath.length >= 2) {\n      serviceName = splitPath[1];\n    }\n    /* Currently, call credentials are only allowed on HTTPS connections, so we\n     * can assume that the scheme is \"https\" */\n\n\n    this.serviceUrl = `https://${stream.getHost()}/${serviceName}`;\n  }\n\n  async sendMetadata(metadata) {\n    const credentials = this.stream.getCredentials();\n    const credsMetadata = credentials.generateMetadata({\n      service_url: this.serviceUrl\n    });\n    const resultMetadata = await metadata;\n    resultMetadata.merge((await credsMetadata));\n\n    if (resultMetadata.get('authorization').length > 1) {\n      this.stream.cancelWithStatus(constants_1.Status.INTERNAL, '\"authorization\" metadata cannot have multiple values');\n    }\n\n    return resultMetadata;\n  }\n\n}\n\nexports.CallCredentialsFilter = CallCredentialsFilter;\n\nclass CallCredentialsFilterFactory {\n  constructor(channel) {\n    this.channel = channel;\n    this.channel = channel;\n  }\n\n  createFilter(callStream) {\n    return new CallCredentialsFilter(this.channel, callStream);\n  }\n\n}\n\nexports.CallCredentialsFilterFactory = CallCredentialsFilterFactory;","map":{"version":3,"sources":["../../src/call-credentials-filter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,MAAa,qBAAb,SAA2C,QAAA,CAAA,UAA3C,CAAqD;AAEnD,EAAA,WAAA,CACmB,OADnB,EAEmB,MAFnB,EAE+B;AAE7B;AAHiB,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,MAAA,GAAA,MAAA;AAGjB,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,MAAL,GAAc,MAAd;AACA,UAAM,SAAS,GAAa,MAAM,CAAC,SAAP,GAAmB,KAAnB,CAAyB,GAAzB,CAA5B;AACA,QAAI,WAAW,GAAG,EAAlB;AACA;;;;AAGA,QAAI,SAAS,CAAC,MAAV,IAAoB,CAAxB,EAA2B;AACzB,MAAA,WAAW,GAAG,SAAS,CAAC,CAAD,CAAvB;AACD;AACD;;;;AAEA,SAAK,UAAL,GAAkB,WAAW,MAAM,CAAC,OAAP,EAAgB,IAAI,WAAW,EAA5D;AACD;;AAED,QAAM,YAAN,CAAmB,QAAnB,EAA8C;AAC5C,UAAM,WAAW,GAAG,KAAK,MAAL,CAAY,cAAZ,EAApB;AACA,UAAM,aAAa,GAAG,WAAW,CAAC,gBAAZ,CAA6B;AACjD,MAAA,WAAW,EAAE,KAAK;AAD+B,KAA7B,CAAtB;AAGA,UAAM,cAAc,GAAG,MAAM,QAA7B;AACA,IAAA,cAAc,CAAC,KAAf,EAAqB,MAAM,aAA3B;;AACA,QAAI,cAAc,CAAC,GAAf,CAAmB,eAAnB,EAAoC,MAApC,GAA6C,CAAjD,EAAoD;AAClD,WAAK,MAAL,CAAY,gBAAZ,CACE,WAAA,CAAA,MAAA,CAAO,QADT,EAEE,sDAFF;AAID;;AACD,WAAO,cAAP;AACD;;AApCkD;;AAArD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAuCA,MAAa,4BAAb,CAAyC;AAEvC,EAAA,WAAA,CAA6B,OAA7B,EAA6C;AAAhB,SAAA,OAAA,GAAA,OAAA;AAC3B,SAAK,OAAL,GAAe,OAAf;AACD;;AAED,EAAA,YAAY,CAAC,UAAD,EAAiB;AAC3B,WAAO,IAAI,qBAAJ,CAA0B,KAAK,OAA/B,EAAwC,UAAxC,CAAP;AACD;;AARsC;;AAAzC,OAAA,CAAA,4BAAA,GAAA,4BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst filter_1 = require(\"./filter\");\nconst constants_1 = require(\"./constants\");\nclass CallCredentialsFilter extends filter_1.BaseFilter {\n    constructor(channel, stream) {\n        super();\n        this.channel = channel;\n        this.stream = stream;\n        this.channel = channel;\n        this.stream = stream;\n        const splitPath = stream.getMethod().split('/');\n        let serviceName = '';\n        /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\n         * by '/', the first item should be empty and the second should be the\n         * service name */\n        if (splitPath.length >= 2) {\n            serviceName = splitPath[1];\n        }\n        /* Currently, call credentials are only allowed on HTTPS connections, so we\n         * can assume that the scheme is \"https\" */\n        this.serviceUrl = `https://${stream.getHost()}/${serviceName}`;\n    }\n    async sendMetadata(metadata) {\n        const credentials = this.stream.getCredentials();\n        const credsMetadata = credentials.generateMetadata({\n            service_url: this.serviceUrl,\n        });\n        const resultMetadata = await metadata;\n        resultMetadata.merge(await credsMetadata);\n        if (resultMetadata.get('authorization').length > 1) {\n            this.stream.cancelWithStatus(constants_1.Status.INTERNAL, '\"authorization\" metadata cannot have multiple values');\n        }\n        return resultMetadata;\n    }\n}\nexports.CallCredentialsFilter = CallCredentialsFilter;\nclass CallCredentialsFilterFactory {\n    constructor(channel) {\n        this.channel = channel;\n        this.channel = channel;\n    }\n    createFilter(callStream) {\n        return new CallCredentialsFilter(this.channel, callStream);\n    }\n}\nexports.CallCredentialsFilterFactory = CallCredentialsFilterFactory;\n//# sourceMappingURL=call-credentials-filter.js.map"]},"metadata":{},"sourceType":"script"}