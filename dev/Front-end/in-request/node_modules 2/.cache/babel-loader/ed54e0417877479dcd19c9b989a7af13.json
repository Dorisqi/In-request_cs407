{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { colorPropType, getAvailableAtBadge, genericProps, themeDocUtils } from '../../utils';\nexport var doc = function doc(Paragraph) {\n  var DocumentedParagraph = describe(Paragraph).availableAt(getAvailableAtBadge('Paragraph')).description('A paragraph of text.').usage(\"import { Paragraph } from 'grommet';\\n<Paragraph />\").intrinsicElement('p');\n  DocumentedParagraph.propTypes = _extends({}, genericProps, {\n    color: colorPropType.description('A color identifier to use for the text color.'),\n    fill: PropTypes.bool.description('Whether the width should fill the container.').defaultValue(false),\n    responsive: PropTypes.bool.description(\"Whether margin should be scaled for mobile environments.\").defaultValue(true),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge', 'xxlarge']), PropTypes.string]).description('The size of the Paragraph text.').defaultValue('medium'),\n    textAlign: PropTypes.oneOf(['start', 'center', 'end']).description('How to align the text inside the paragraph.').defaultValue('start')\n  });\n  return DocumentedParagraph;\n};\nexport var themeDoc = _extends({\n  paragraph: {\n    description: \"The possible sizes of the paragraph in terms of its max-width,\\n     font-size and line-height.\",\n    type: 'object',\n    defaultValue: \"{\\n      small: {\\n        size: '14px',\\n        height: '20px',\\n        maxWidth: '336px',\\n       },\\n      medium: {\\n        size: '18px',\\n        height: '24px',\\n        maxWidth: '432px',\\n      },\\n      large: {\\n        size: '22px',\\n        height: '28px',\\n        maxWidth: '528px',\\n      },\\n      xlarge: {\\n        size: '26px',\\n        height: '32px',\\n        maxWidth: '624px',\\n      },\\n      xxlarge: {\\n        size: '34px',\\n        height: '40px',\\n        maxWidth: '816px',\\n      },\\n    }\"\n  },\n  'paragraph.textAlign': {\n    description: \"How to align the text inside the Paragraph.\",\n    type: 'string',\n    defaultValue: 'start'\n  },\n  'paragraph.extend': {\n    description: 'Any additional style for the Paragraph.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n}, themeDocUtils.edgeStyle('The possible sizes for margin.'));","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/Paragraph/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","colorPropType","getAvailableAtBadge","genericProps","themeDocUtils","doc","Paragraph","DocumentedParagraph","availableAt","description","usage","intrinsicElement","propTypes","color","fill","bool","defaultValue","responsive","size","oneOfType","oneOf","string","textAlign","themeDoc","paragraph","type","undefined","edgeStyle"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { colorPropType, getAvailableAtBadge, genericProps, themeDocUtils } from '../../utils';\nexport var doc = function doc(Paragraph) {\n  var DocumentedParagraph = describe(Paragraph).availableAt(getAvailableAtBadge('Paragraph')).description('A paragraph of text.').usage(\"import { Paragraph } from 'grommet';\\n<Paragraph />\").intrinsicElement('p');\n  DocumentedParagraph.propTypes = _extends({}, genericProps, {\n    color: colorPropType.description('A color identifier to use for the text color.'),\n    fill: PropTypes.bool.description('Whether the width should fill the container.').defaultValue(false),\n    responsive: PropTypes.bool.description(\"Whether margin should be scaled for mobile environments.\").defaultValue(true),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge', 'xxlarge']), PropTypes.string]).description('The size of the Paragraph text.').defaultValue('medium'),\n    textAlign: PropTypes.oneOf(['start', 'center', 'end']).description('How to align the text inside the paragraph.').defaultValue('start')\n  });\n  return DocumentedParagraph;\n};\nexport var themeDoc = _extends({\n  paragraph: {\n    description: \"The possible sizes of the paragraph in terms of its max-width,\\n     font-size and line-height.\",\n    type: 'object',\n    defaultValue: \"{\\n      small: {\\n        size: '14px',\\n        height: '20px',\\n        maxWidth: '336px',\\n       },\\n      medium: {\\n        size: '18px',\\n        height: '24px',\\n        maxWidth: '432px',\\n      },\\n      large: {\\n        size: '22px',\\n        height: '28px',\\n        maxWidth: '528px',\\n      },\\n      xlarge: {\\n        size: '26px',\\n        height: '32px',\\n        maxWidth: '624px',\\n      },\\n      xxlarge: {\\n        size: '34px',\\n        height: '40px',\\n        maxWidth: '816px',\\n      },\\n    }\"\n  },\n  'paragraph.textAlign': {\n    description: \"How to align the text inside the Paragraph.\",\n    type: 'string',\n    defaultValue: 'start'\n  },\n  'paragraph.extend': {\n    description: 'Any additional style for the Paragraph.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n}, themeDocUtils.edgeStyle('The possible sizes for margin.'));"]},"metadata":{},"sourceType":"module"}