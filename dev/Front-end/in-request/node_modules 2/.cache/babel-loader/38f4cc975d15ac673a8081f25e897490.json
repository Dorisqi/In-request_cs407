{"ast":null,"code":"// This file contains helper functions for DataTable, to keep the component\n// files simpler.\n// get the value for the property in the datum object\nexport var datumValue = function datumValue(datum, property) {\n  var parts = property.split('.');\n\n  if (parts.length === 1) {\n    return datum[property];\n  }\n\n  if (!datum[parts[0]]) {\n    return undefined;\n  }\n\n  return datumValue(datum[parts[0]], parts.slice(1).join('.'));\n}; // get the primary property name\n\nexport var normalizePrimaryProperty = function normalizePrimaryProperty(columns, primaryKey) {\n  var result;\n  columns.forEach(function (column) {\n    // remember the first key property\n    if (column.primary && !result) {\n      result = column.property;\n    }\n  });\n\n  if (!result && columns.length > 0) {\n    result = primaryKey || columns[0].property;\n  }\n\n  return result;\n}; // initialize filters with empty strings\n\nexport var initializeFilters = function initializeFilters(columns) {\n  var result = {};\n  columns.forEach(function (column) {\n    if (column.search) {\n      result[column.property] = '';\n    }\n  });\n  return result;\n}; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n\nvar escapeRegExp = function escapeRegExp(input) {\n  return input.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}; // filter data based on filters then sort\n\n\nexport var filterAndSortData = function filterAndSortData(data, filters, onSearch, sort) {\n  var result = data;\n\n  if (!onSearch) {\n    var regexps = {};\n    Object.keys(filters).filter(function (n) {\n      return filters[n];\n    }).forEach(function (n) {\n      regexps[n] = new RegExp(escapeRegExp(filters[n]), 'i');\n    });\n\n    if (Object.keys(regexps).length > 0) {\n      result = data.filter(function (datum) {\n        return !Object.keys(regexps).some(function (property) {\n          return !regexps[property].test(datumValue(datum, property));\n        });\n      });\n    }\n  }\n\n  if (sort) {\n    var property = sort.property,\n        ascending = sort.ascending;\n    result = result === data ? [].concat(data) : result; // don't sort caller's data\n\n    var before = ascending ? 1 : -1;\n    var after = ascending ? -1 : 1;\n    result.sort(function (d1, d2) {\n      if (d1[property] > d2[property]) return before;\n      if (d1[property] < d2[property]) return after;\n      return 0;\n    });\n  }\n\n  return result;\n}; // aggregate reducers\n\nvar sumReducer = function sumReducer(accumulated, next) {\n  return accumulated + next;\n};\n\nvar minReducer = function minReducer(accumulated, next) {\n  return accumulated === undefined ? next : Math.min(accumulated, next);\n};\n\nvar maxReducer = function maxReducer(accumulated, next) {\n  return accumulated === undefined ? next : Math.max(accumulated, next);\n};\n\nvar reducers = {\n  max: maxReducer,\n  min: minReducer,\n  sum: sumReducer\n}; // aggregate a single column\n\nvar aggregateColumn = function aggregateColumn(column, data) {\n  var value;\n\n  if (column.aggregate === 'avg') {\n    value = data.map(function (d) {\n      return datumValue(d, column.property);\n    }).reduce(sumReducer);\n    value /= data.length;\n  } else {\n    value = data.map(function (d) {\n      return datumValue(d, column.property);\n    }).reduce(reducers[column.aggregate], 0);\n  }\n\n  return value;\n}; // aggregate all columns that can\n\n\nvar aggregate = function aggregate(columns, data) {\n  var result = {};\n  columns.forEach(function (column) {\n    if (column.aggregate) {\n      result[column.property] = aggregateColumn(column, data);\n    }\n  });\n  return result;\n}; // build the values for the footer cells\n\n\nexport var buildFooterValues = function buildFooterValues(columns, data) {\n  var aggregateValues = aggregate(columns, data);\n  var result = {};\n  columns.forEach(function (column) {\n    if (column.footer) {\n      if (typeof column.footer === 'string') {\n        result[column.property] = column.footer;\n      } else if (column.footer.aggregate) {\n        result[column.property] = aggregateValues[column.property];\n      }\n    }\n  });\n  return result;\n}; // looks at the groupBy property of each data object and returns an\n// array with one item for each unique value of that property.\n\nexport var buildGroups = function buildGroups(columns, data, groupBy) {\n  var result;\n\n  if (groupBy) {\n    result = [];\n    var groupMap = {};\n    data.forEach(function (datum) {\n      var groupByProperty = groupBy.property ? groupBy.property : groupBy;\n      var groupValue = datumValue(datum, groupByProperty);\n\n      if (!groupMap[groupValue]) {\n        var group = {\n          data: [],\n          datum: {},\n          key: groupValue\n        };\n        group.datum[groupByProperty] = groupValue;\n        result.push(group);\n        groupMap[groupValue] = group;\n      }\n\n      groupMap[groupValue].data.push(datum);\n    }); // include any aggregate column values across the data for each group\n\n    columns.forEach(function (column) {\n      if (column.aggregate) {\n        result.forEach(function (group) {\n          var datum = group.datum;\n          datum[column.property] = aggregateColumn(column, group.data);\n        });\n      }\n    });\n  }\n\n  return result;\n}; // build group expanded state, expanding any in groupBy.expand\n\nexport var buildGroupState = function buildGroupState(groups, groupBy) {\n  var result = {};\n\n  if (groups) {\n    groups.forEach(function (_ref) {\n      var key = _ref.key;\n      result[key] = {\n        expanded: false\n      };\n    });\n  }\n\n  if (groupBy && groupBy.expand) {\n    groupBy.expand.forEach(function (value) {\n      result[value] = {\n        expanded: true\n      };\n    });\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/DataTable/buildState.js"],"names":["datumValue","datum","property","parts","split","length","undefined","slice","join","normalizePrimaryProperty","columns","primaryKey","result","forEach","column","primary","initializeFilters","search","escapeRegExp","input","replace","filterAndSortData","data","filters","onSearch","sort","regexps","Object","keys","filter","n","RegExp","some","test","ascending","concat","before","after","d1","d2","sumReducer","accumulated","next","minReducer","Math","min","maxReducer","max","reducers","sum","aggregateColumn","value","aggregate","map","d","reduce","buildFooterValues","aggregateValues","footer","buildGroups","groupBy","groupMap","groupByProperty","groupValue","group","key","push","buildGroupState","groups","_ref","expanded","expand"],"mappings":"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","sourcesContent":["// This file contains helper functions for DataTable, to keep the component\n// files simpler.\n// get the value for the property in the datum object\nexport var datumValue = function datumValue(datum, property) {\n  var parts = property.split('.');\n\n  if (parts.length === 1) {\n    return datum[property];\n  }\n\n  if (!datum[parts[0]]) {\n    return undefined;\n  }\n\n  return datumValue(datum[parts[0]], parts.slice(1).join('.'));\n}; // get the primary property name\n\nexport var normalizePrimaryProperty = function normalizePrimaryProperty(columns, primaryKey) {\n  var result;\n  columns.forEach(function (column) {\n    // remember the first key property\n    if (column.primary && !result) {\n      result = column.property;\n    }\n  });\n\n  if (!result && columns.length > 0) {\n    result = primaryKey || columns[0].property;\n  }\n\n  return result;\n}; // initialize filters with empty strings\n\nexport var initializeFilters = function initializeFilters(columns) {\n  var result = {};\n  columns.forEach(function (column) {\n    if (column.search) {\n      result[column.property] = '';\n    }\n  });\n  return result;\n}; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n\nvar escapeRegExp = function escapeRegExp(input) {\n  return input.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}; // filter data based on filters then sort\n\n\nexport var filterAndSortData = function filterAndSortData(data, filters, onSearch, sort) {\n  var result = data;\n\n  if (!onSearch) {\n    var regexps = {};\n    Object.keys(filters).filter(function (n) {\n      return filters[n];\n    }).forEach(function (n) {\n      regexps[n] = new RegExp(escapeRegExp(filters[n]), 'i');\n    });\n\n    if (Object.keys(regexps).length > 0) {\n      result = data.filter(function (datum) {\n        return !Object.keys(regexps).some(function (property) {\n          return !regexps[property].test(datumValue(datum, property));\n        });\n      });\n    }\n  }\n\n  if (sort) {\n    var property = sort.property,\n        ascending = sort.ascending;\n    result = result === data ? [].concat(data) : result; // don't sort caller's data\n\n    var before = ascending ? 1 : -1;\n    var after = ascending ? -1 : 1;\n    result.sort(function (d1, d2) {\n      if (d1[property] > d2[property]) return before;\n      if (d1[property] < d2[property]) return after;\n      return 0;\n    });\n  }\n\n  return result;\n}; // aggregate reducers\n\nvar sumReducer = function sumReducer(accumulated, next) {\n  return accumulated + next;\n};\n\nvar minReducer = function minReducer(accumulated, next) {\n  return accumulated === undefined ? next : Math.min(accumulated, next);\n};\n\nvar maxReducer = function maxReducer(accumulated, next) {\n  return accumulated === undefined ? next : Math.max(accumulated, next);\n};\n\nvar reducers = {\n  max: maxReducer,\n  min: minReducer,\n  sum: sumReducer\n}; // aggregate a single column\n\nvar aggregateColumn = function aggregateColumn(column, data) {\n  var value;\n\n  if (column.aggregate === 'avg') {\n    value = data.map(function (d) {\n      return datumValue(d, column.property);\n    }).reduce(sumReducer);\n    value /= data.length;\n  } else {\n    value = data.map(function (d) {\n      return datumValue(d, column.property);\n    }).reduce(reducers[column.aggregate], 0);\n  }\n\n  return value;\n}; // aggregate all columns that can\n\n\nvar aggregate = function aggregate(columns, data) {\n  var result = {};\n  columns.forEach(function (column) {\n    if (column.aggregate) {\n      result[column.property] = aggregateColumn(column, data);\n    }\n  });\n  return result;\n}; // build the values for the footer cells\n\n\nexport var buildFooterValues = function buildFooterValues(columns, data) {\n  var aggregateValues = aggregate(columns, data);\n  var result = {};\n  columns.forEach(function (column) {\n    if (column.footer) {\n      if (typeof column.footer === 'string') {\n        result[column.property] = column.footer;\n      } else if (column.footer.aggregate) {\n        result[column.property] = aggregateValues[column.property];\n      }\n    }\n  });\n  return result;\n}; // looks at the groupBy property of each data object and returns an\n// array with one item for each unique value of that property.\n\nexport var buildGroups = function buildGroups(columns, data, groupBy) {\n  var result;\n\n  if (groupBy) {\n    result = [];\n    var groupMap = {};\n    data.forEach(function (datum) {\n      var groupByProperty = groupBy.property ? groupBy.property : groupBy;\n      var groupValue = datumValue(datum, groupByProperty);\n\n      if (!groupMap[groupValue]) {\n        var group = {\n          data: [],\n          datum: {},\n          key: groupValue\n        };\n        group.datum[groupByProperty] = groupValue;\n        result.push(group);\n        groupMap[groupValue] = group;\n      }\n\n      groupMap[groupValue].data.push(datum);\n    }); // include any aggregate column values across the data for each group\n\n    columns.forEach(function (column) {\n      if (column.aggregate) {\n        result.forEach(function (group) {\n          var datum = group.datum;\n          datum[column.property] = aggregateColumn(column, group.data);\n        });\n      }\n    });\n  }\n\n  return result;\n}; // build group expanded state, expanding any in groupBy.expand\n\nexport var buildGroupState = function buildGroupState(groups, groupBy) {\n  var result = {};\n\n  if (groups) {\n    groups.forEach(function (_ref) {\n      var key = _ref.key;\n      result[key] = {\n        expanded: false\n      };\n    });\n  }\n\n  if (groupBy && groupBy.expand) {\n    groupBy.expand.forEach(function (value) {\n      result[value] = {\n        expanded: true\n      };\n    });\n  }\n\n  return result;\n};"]},"metadata":{},"sourceType":"module"}