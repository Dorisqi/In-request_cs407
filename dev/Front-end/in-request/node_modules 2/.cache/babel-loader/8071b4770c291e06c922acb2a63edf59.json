{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * @module common/paginator\n */\n\nconst arrify = require(\"arrify\");\n\nconst extend = require(\"extend\");\n\nconst resource_stream_1 = require(\"./resource-stream\");\n\nexports.ResourceStream = resource_stream_1.ResourceStream;\n/*! Developer Documentation\n *\n * paginator is used to auto-paginate `nextQuery` methods as well as\n * streamifying them.\n *\n * Before:\n *\n *   search.query('done=true', function(err, results, nextQuery) {\n *     search.query(nextQuery, function(err, results, nextQuery) {});\n *   });\n *\n * After:\n *\n *   search.query('done=true', function(err, results) {});\n *\n * Methods to extend should be written to accept callbacks and return a\n * `nextQuery`.\n */\n\nclass Paginator {\n  /**\n   * Cache the original method, then overwrite it on the Class's prototype.\n   *\n   * @param {function} Class - The parent class of the methods to extend.\n   * @param {string|string[]} methodNames - Name(s) of the methods to extend.\n   */\n  // tslint:disable-next-line:variable-name\n  extend(Class, methodNames) {\n    methodNames = arrify(methodNames);\n    methodNames.forEach(methodName => {\n      const originalMethod = Class.prototype[methodName]; // map the original method to a private member\n\n      Class.prototype[methodName + '_'] = originalMethod; // overwrite the original to auto-paginate\n      // tslint:disable-next-line:no-any\n\n      Class.prototype[methodName] = function (...args) {\n        const parsedArguments = paginator.parseArguments_(args);\n        return paginator.run_(parsedArguments, originalMethod.bind(this));\n      };\n    });\n  }\n  /**\n   * Wraps paginated API calls in a readable object stream.\n   *\n   * This method simply calls the nextQuery recursively, emitting results to a\n   * stream. The stream ends when `nextQuery` is null.\n   *\n   * `maxResults` will act as a cap for how many results are fetched and emitted\n   * to the stream.\n   *\n   * @param {string} methodName - Name of the method to streamify.\n   * @return {function} - Wrapped function.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  streamify(methodName) {\n    return function ( // tslint:disable-next-line:no-any\n    ...args) {\n      const parsedArguments = paginator.parseArguments_(args);\n      const originalMethod = this[methodName + '_'] || this[methodName];\n      return paginator.runAsStream_(parsedArguments, originalMethod.bind(this));\n    };\n  }\n  /**\n   * Parse a pseudo-array `arguments` for a query and callback.\n   *\n   * @param {array} args - The original `arguments` pseduo-array that the original\n   *     method received.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  parseArguments_(args) {\n    let query;\n    let autoPaginate = true;\n    let maxApiCalls = -1;\n    let maxResults = -1;\n    let callback;\n    const firstArgument = args[0];\n    const lastArgument = args[args.length - 1];\n\n    if (typeof firstArgument === 'function') {\n      callback = firstArgument;\n    } else {\n      query = firstArgument;\n    }\n\n    if (typeof lastArgument === 'function') {\n      callback = lastArgument;\n    }\n\n    if (typeof query === 'object') {\n      query = extend(true, {}, query); // Check if the user only asked for a certain amount of results.\n\n      if (query.maxResults && typeof query.maxResults === 'number') {\n        // `maxResults` is used API-wide.\n        maxResults = query.maxResults;\n      } else if (typeof query.pageSize === 'number') {\n        // `pageSize` is Pub/Sub's `maxResults`.\n        maxResults = query.pageSize;\n      }\n\n      if (query.maxApiCalls && typeof query.maxApiCalls === 'number') {\n        maxApiCalls = query.maxApiCalls;\n        delete query.maxApiCalls;\n      } // maxResults is the user specified limit.\n\n\n      if (maxResults !== -1 || query.autoPaginate === false) {\n        autoPaginate = false;\n      }\n    }\n\n    const parsedArguments = {\n      query: query || {},\n      autoPaginate,\n      maxApiCalls,\n      maxResults,\n      callback\n    };\n    parsedArguments.streamOptions = extend(true, {}, parsedArguments.query);\n    delete parsedArguments.streamOptions.autoPaginate;\n    delete parsedArguments.streamOptions.maxResults;\n    delete parsedArguments.streamOptions.pageSize;\n    return parsedArguments;\n  }\n  /**\n   * This simply checks to see if `autoPaginate` is set or not, if it's true\n   * then we buffer all results, otherwise simply call the original method.\n   *\n   * @param {array} parsedArguments - Parsed arguments from the original method\n   *     call.\n   * @param {object=|string=} parsedArguments.query - Query object. This is most\n   *     commonly an object, but to make the API more simple, it can also be a\n   *     string in some places.\n   * @param {function=} parsedArguments.callback - Callback function.\n   * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n   * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n   * @param {number} parsedArguments.maxResults - Maximum results to return.\n   * @param {function} originalMethod - The cached method that accepts a callback\n   *     and returns `nextQuery` to receive more results.\n   */\n\n\n  run_(parsedArguments, originalMethod) {\n    const query = parsedArguments.query;\n    const callback = parsedArguments.callback;\n\n    if (!parsedArguments.autoPaginate) {\n      return originalMethod(query, callback);\n    }\n\n    const results = new Array();\n    const promise = new Promise((resolve, reject) => {\n      paginator.runAsStream_(parsedArguments, originalMethod).on('error', reject).on('data', data => results.push(data)).on('end', () => resolve(results));\n    });\n\n    if (!callback) {\n      return promise.then(results => [results]);\n    }\n\n    promise.then(results => callback(null, results), err => callback(err));\n  }\n  /**\n   * This method simply calls the nextQuery recursively, emitting results to a\n   * stream. The stream ends when `nextQuery` is null.\n   *\n   * `maxResults` will act as a cap for how many results are fetched and emitted\n   * to the stream.\n   *\n   * @param {object=|string=} parsedArguments.query - Query object. This is most\n   *     commonly an object, but to make the API more simple, it can also be a\n   *     string in some places.\n   * @param {function=} parsedArguments.callback - Callback function.\n   * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n   * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n   * @param {number} parsedArguments.maxResults - Maximum results to return.\n   * @param {function} originalMethod - The cached method that accepts a callback\n   *     and returns `nextQuery` to receive more results.\n   * @return {stream} - Readable object stream.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  runAsStream_(parsedArguments, originalMethod) {\n    return new resource_stream_1.ResourceStream(parsedArguments, originalMethod);\n  }\n\n}\n\nexports.Paginator = Paginator;\nconst paginator = new Paginator();\nexports.paginator = paginator;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/@google-cloud/paginator/build/src/index.js"],"names":["Object","defineProperty","exports","value","arrify","require","extend","resource_stream_1","ResourceStream","Paginator","Class","methodNames","forEach","methodName","originalMethod","prototype","args","parsedArguments","paginator","parseArguments_","run_","bind","streamify","runAsStream_","query","autoPaginate","maxApiCalls","maxResults","callback","firstArgument","lastArgument","length","pageSize","streamOptions","results","Array","promise","Promise","resolve","reject","on","data","push","then","err"],"mappings":"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","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*!\n * @module common/paginator\n */\nconst arrify = require(\"arrify\");\nconst extend = require(\"extend\");\nconst resource_stream_1 = require(\"./resource-stream\");\nexports.ResourceStream = resource_stream_1.ResourceStream;\n/*! Developer Documentation\n *\n * paginator is used to auto-paginate `nextQuery` methods as well as\n * streamifying them.\n *\n * Before:\n *\n *   search.query('done=true', function(err, results, nextQuery) {\n *     search.query(nextQuery, function(err, results, nextQuery) {});\n *   });\n *\n * After:\n *\n *   search.query('done=true', function(err, results) {});\n *\n * Methods to extend should be written to accept callbacks and return a\n * `nextQuery`.\n */\nclass Paginator {\n    /**\n     * Cache the original method, then overwrite it on the Class's prototype.\n     *\n     * @param {function} Class - The parent class of the methods to extend.\n     * @param {string|string[]} methodNames - Name(s) of the methods to extend.\n     */\n    // tslint:disable-next-line:variable-name\n    extend(Class, methodNames) {\n        methodNames = arrify(methodNames);\n        methodNames.forEach(methodName => {\n            const originalMethod = Class.prototype[methodName];\n            // map the original method to a private member\n            Class.prototype[methodName + '_'] = originalMethod;\n            // overwrite the original to auto-paginate\n            // tslint:disable-next-line:no-any\n            Class.prototype[methodName] = function (...args) {\n                const parsedArguments = paginator.parseArguments_(args);\n                return paginator.run_(parsedArguments, originalMethod.bind(this));\n            };\n        });\n    }\n    /**\n     * Wraps paginated API calls in a readable object stream.\n     *\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {string} methodName - Name of the method to streamify.\n     * @return {function} - Wrapped function.\n     */\n    // tslint:disable-next-line:no-any\n    streamify(methodName) {\n        return function (\n        // tslint:disable-next-line:no-any\n        ...args) {\n            const parsedArguments = paginator.parseArguments_(args);\n            const originalMethod = this[methodName + '_'] || this[methodName];\n            return paginator.runAsStream_(parsedArguments, originalMethod.bind(this));\n        };\n    }\n    /**\n     * Parse a pseudo-array `arguments` for a query and callback.\n     *\n     * @param {array} args - The original `arguments` pseduo-array that the original\n     *     method received.\n     */\n    // tslint:disable-next-line:no-any\n    parseArguments_(args) {\n        let query;\n        let autoPaginate = true;\n        let maxApiCalls = -1;\n        let maxResults = -1;\n        let callback;\n        const firstArgument = args[0];\n        const lastArgument = args[args.length - 1];\n        if (typeof firstArgument === 'function') {\n            callback = firstArgument;\n        }\n        else {\n            query = firstArgument;\n        }\n        if (typeof lastArgument === 'function') {\n            callback = lastArgument;\n        }\n        if (typeof query === 'object') {\n            query = extend(true, {}, query);\n            // Check if the user only asked for a certain amount of results.\n            if (query.maxResults && typeof query.maxResults === 'number') {\n                // `maxResults` is used API-wide.\n                maxResults = query.maxResults;\n            }\n            else if (typeof query.pageSize === 'number') {\n                // `pageSize` is Pub/Sub's `maxResults`.\n                maxResults = query.pageSize;\n            }\n            if (query.maxApiCalls && typeof query.maxApiCalls === 'number') {\n                maxApiCalls = query.maxApiCalls;\n                delete query.maxApiCalls;\n            }\n            // maxResults is the user specified limit.\n            if (maxResults !== -1 || query.autoPaginate === false) {\n                autoPaginate = false;\n            }\n        }\n        const parsedArguments = {\n            query: query || {},\n            autoPaginate,\n            maxApiCalls,\n            maxResults,\n            callback,\n        };\n        parsedArguments.streamOptions = extend(true, {}, parsedArguments.query);\n        delete parsedArguments.streamOptions.autoPaginate;\n        delete parsedArguments.streamOptions.maxResults;\n        delete parsedArguments.streamOptions.pageSize;\n        return parsedArguments;\n    }\n    /**\n     * This simply checks to see if `autoPaginate` is set or not, if it's true\n     * then we buffer all results, otherwise simply call the original method.\n     *\n     * @param {array} parsedArguments - Parsed arguments from the original method\n     *     call.\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     */\n    run_(parsedArguments, originalMethod) {\n        const query = parsedArguments.query;\n        const callback = parsedArguments.callback;\n        if (!parsedArguments.autoPaginate) {\n            return originalMethod(query, callback);\n        }\n        const results = new Array();\n        const promise = new Promise((resolve, reject) => {\n            paginator\n                .runAsStream_(parsedArguments, originalMethod)\n                .on('error', reject)\n                .on('data', (data) => results.push(data))\n                .on('end', () => resolve(results));\n        });\n        if (!callback) {\n            return promise.then(results => [results]);\n        }\n        promise.then(results => callback(null, results), (err) => callback(err));\n    }\n    /**\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     * @return {stream} - Readable object stream.\n     */\n    // tslint:disable-next-line:no-any\n    runAsStream_(parsedArguments, originalMethod) {\n        return new resource_stream_1.ResourceStream(parsedArguments, originalMethod);\n    }\n}\nexports.Paginator = Paginator;\nconst paginator = new Paginator();\nexports.paginator = paginator;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}