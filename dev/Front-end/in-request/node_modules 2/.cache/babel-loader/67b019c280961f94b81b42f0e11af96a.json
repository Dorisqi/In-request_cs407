{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { colorPropType, genericProps, getAvailableAtBadge, themeDocUtils } from '../../utils';\nexport var doc = function doc(Anchor) {\n  var DocumentedAnchor = describe(Anchor).availableAt(getAvailableAtBadge('Anchor')).description('A text link.').details(\"We have a separate component from the browser\\nbase so we can style it. You can either set the icon and/or label properties\\nor just use children.\").usage(\"import { Anchor } from 'grommet';\\n\" + \"<Anchor href={location} label='Label' />\").intrinsicElement('a');\n  DocumentedAnchor.propTypes = _extends({}, genericProps, {\n    a11yTitle: PropTypes.string.description('Custom title to be used by screen readers.'),\n    color: colorPropType.description('Label color and icon color, if not specified on the icon.'),\n    disabled: PropTypes.bool.description('Whether the anchor is disabled.').defaultValue(false),\n    href: PropTypes.string.description('Hyperlink reference to place in the anchor.'),\n    icon: PropTypes.element.description('Icon element to place in the anchor.'),\n    label: PropTypes.node.description('Label text to place in the anchor.'),\n    onClick: PropTypes.func.description(\"Click handler. It can be used, for example,\\n        to add analytics and track who clicked in the anchor.\"),\n    reverse: PropTypes.bool.description(\"Whether an icon and label should be reversed so that the\\n        icon is at the end of the anchor.\").defaultValue(false),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge']), PropTypes.string]).description(\"The font size is typically driven by the components containing\\nthis component. But, it can be adjusted directly via this size property,\\ntypically when it is not contained in a 'Heading', 'Paragraph', or 'Text'.\"),\n    as: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).description(\"The DOM tag or react component to use for the element.\")\n  });\n  return DocumentedAnchor;\n};\nexport var themeDoc = _extends({\n  'anchor.color': {\n    description: 'The color of the label text and icon strokes.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{ light: '#1D67E3', dark: '#6194EB' }\"\n  },\n  'anchor.fontWeight': {\n    description: 'The font weight of the label.',\n    type: 'number',\n    defaultValue: 600\n  },\n  'anchor.textDecoration': {\n    description: \"The text decoration of the label. \\nRefer to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\\nfor possible values.\",\n    type: 'string',\n    defaultValue: 'none'\n  },\n  'anchor.hover.fontWeight': {\n    description: 'The font weight of the label when hovering.',\n    type: 'number',\n    defaultValue: undefined\n  },\n  'anchor.hover.textDecoration': {\n    description: \"The text decoration of the label when hovering. \\nRefer to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\\nfor possible values.\",\n    type: 'string',\n    defaultValue: 'underline'\n  },\n  'anchor.hover.extend': {\n    description: 'Any additional style for the Anchor when hovering.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'anchor.extend': {\n    description: 'Any additional style for the Anchor.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'text.medium.size': {\n    description: 'The font size of the text label.',\n    type: 'string',\n    defaultValue: '18px'\n  },\n  'text.medium.height': {\n    description: 'The line height of the text label.',\n    type: 'string',\n    defaultValue: '24px'\n  }\n}, themeDocUtils.focusStyle, {}, themeDocUtils.edgeStyle('The possible sizes for margin.'));","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/Anchor/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","colorPropType","genericProps","getAvailableAtBadge","themeDocUtils","doc","Anchor","DocumentedAnchor","availableAt","description","details","usage","intrinsicElement","propTypes","a11yTitle","string","color","disabled","bool","defaultValue","href","icon","element","label","node","onClick","func","reverse","size","oneOfType","oneOf","as","themeDoc","type","undefined","focusStyle","edgeStyle"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { colorPropType, genericProps, getAvailableAtBadge, themeDocUtils } from '../../utils';\nexport var doc = function doc(Anchor) {\n  var DocumentedAnchor = describe(Anchor).availableAt(getAvailableAtBadge('Anchor')).description('A text link.').details(\"We have a separate component from the browser\\nbase so we can style it. You can either set the icon and/or label properties\\nor just use children.\").usage(\"import { Anchor } from 'grommet';\\n\" + \"<Anchor href={location} label='Label' />\").intrinsicElement('a');\n  DocumentedAnchor.propTypes = _extends({}, genericProps, {\n    a11yTitle: PropTypes.string.description('Custom title to be used by screen readers.'),\n    color: colorPropType.description('Label color and icon color, if not specified on the icon.'),\n    disabled: PropTypes.bool.description('Whether the anchor is disabled.').defaultValue(false),\n    href: PropTypes.string.description('Hyperlink reference to place in the anchor.'),\n    icon: PropTypes.element.description('Icon element to place in the anchor.'),\n    label: PropTypes.node.description('Label text to place in the anchor.'),\n    onClick: PropTypes.func.description(\"Click handler. It can be used, for example,\\n        to add analytics and track who clicked in the anchor.\"),\n    reverse: PropTypes.bool.description(\"Whether an icon and label should be reversed so that the\\n        icon is at the end of the anchor.\").defaultValue(false),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge']), PropTypes.string]).description(\"The font size is typically driven by the components containing\\nthis component. But, it can be adjusted directly via this size property,\\ntypically when it is not contained in a 'Heading', 'Paragraph', or 'Text'.\"),\n    as: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).description(\"The DOM tag or react component to use for the element.\")\n  });\n  return DocumentedAnchor;\n};\nexport var themeDoc = _extends({\n  'anchor.color': {\n    description: 'The color of the label text and icon strokes.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{ light: '#1D67E3', dark: '#6194EB' }\"\n  },\n  'anchor.fontWeight': {\n    description: 'The font weight of the label.',\n    type: 'number',\n    defaultValue: 600\n  },\n  'anchor.textDecoration': {\n    description: \"The text decoration of the label. \\nRefer to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\\nfor possible values.\",\n    type: 'string',\n    defaultValue: 'none'\n  },\n  'anchor.hover.fontWeight': {\n    description: 'The font weight of the label when hovering.',\n    type: 'number',\n    defaultValue: undefined\n  },\n  'anchor.hover.textDecoration': {\n    description: \"The text decoration of the label when hovering. \\nRefer to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\\nfor possible values.\",\n    type: 'string',\n    defaultValue: 'underline'\n  },\n  'anchor.hover.extend': {\n    description: 'Any additional style for the Anchor when hovering.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'anchor.extend': {\n    description: 'Any additional style for the Anchor.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'text.medium.size': {\n    description: 'The font size of the text label.',\n    type: 'string',\n    defaultValue: '18px'\n  },\n  'text.medium.height': {\n    description: 'The line height of the text label.',\n    type: 'string',\n    defaultValue: '24px'\n  }\n}, themeDocUtils.focusStyle, {}, themeDocUtils.edgeStyle('The possible sizes for margin.'));"]},"metadata":{},"sourceType":"module"}