{"ast":null,"code":"/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar validator = require(\"../utils/validator\");\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n\nvar error_1 = require(\"../utils/error\");\n/**\n * Defines the email sign-in config class used to convert client side EmailSignInConfig\n * to a format that is understood by the Auth server.\n */\n\n\nvar EmailSignInConfig =\n/** @class */\nfunction () {\n  /**\n   * The EmailSignInConfig constructor.\n   *\n   * @param {any} response The server side response used to initialize the\n   *     EmailSignInConfig object.\n   * @constructor\n   */\n  function EmailSignInConfig(response) {\n    if (typeof response.allowPasswordSignup === 'undefined') {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid email sign-in configuration response');\n    }\n\n    this.enabled = response.allowPasswordSignup;\n    this.passwordRequired = !response.enableEmailLinkSignin;\n  }\n  /**\n   * Static method to convert a client side request to a EmailSignInConfigServerRequest.\n   * Throws an error if validation fails.\n   *\n   * @param {any} options The options object to convert to a server request.\n   * @return {EmailSignInConfigServerRequest} The resulting server request.\n   */\n\n\n  EmailSignInConfig.buildServerRequest = function (options) {\n    var request = {};\n    EmailSignInConfig.validate(options);\n\n    if (options.hasOwnProperty('enabled')) {\n      request.allowPasswordSignup = options.enabled;\n    }\n\n    if (options.hasOwnProperty('passwordRequired')) {\n      request.enableEmailLinkSignin = !options.passwordRequired;\n    }\n\n    return request;\n  };\n  /**\n   * Validates the EmailSignInConfig options object. Throws an error on failure.\n   *\n   * @param {any} options The options object to validate.\n   */\n\n\n  EmailSignInConfig.validate = function (options) {\n    // TODO: Validate the request.\n    var validKeys = {\n      enabled: true,\n      passwordRequired: true\n    };\n\n    if (!validator.isNonNullObject(options)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"EmailSignInConfig\" must be a non-null object.');\n    } // Check for unsupported top level attributes.\n\n\n    for (var key in options) {\n      if (!(key in validKeys)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + key + \"\\\" is not a valid EmailSignInConfig parameter.\");\n      }\n    } // Validate content.\n\n\n    if (typeof options.enabled !== 'undefined' && !validator.isBoolean(options.enabled)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"EmailSignInConfig.enabled\" must be a boolean.');\n    }\n\n    if (typeof options.passwordRequired !== 'undefined' && !validator.isBoolean(options.passwordRequired)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"EmailSignInConfig.passwordRequired\" must be a boolean.');\n    }\n  };\n  /** @return {object} The plain object representation of the email sign-in config. */\n\n\n  EmailSignInConfig.prototype.toJSON = function () {\n    return {\n      enabled: this.enabled,\n      passwordRequired: this.passwordRequired\n    };\n  };\n\n  return EmailSignInConfig;\n}();\n\nexports.EmailSignInConfig = EmailSignInConfig;\n/**\n * Defines the SAMLConfig class used to convert a client side configuration to its\n * server side representation.\n */\n\nvar SAMLConfig =\n/** @class */\nfunction () {\n  /**\n   * The SAMLConfig constructor.\n   *\n   * @param {any} response The server side response used to initialize the SAMLConfig object.\n   * @constructor\n   */\n  function SAMLConfig(response) {\n    if (!response || !response.idpConfig || !response.idpConfig.idpEntityId || !response.idpConfig.ssoUrl || !response.spConfig || !response.spConfig.spEntityId || !response.name || !(validator.isString(response.name) && SAMLConfig.getProviderIdFromResourceName(response.name))) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid SAML configuration response');\n    }\n\n    var providerId = SAMLConfig.getProviderIdFromResourceName(response.name);\n\n    if (!providerId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid SAML configuration response');\n    }\n\n    this.providerId = providerId; // RP config.\n\n    this.rpEntityId = response.spConfig.spEntityId;\n    this.callbackURL = response.spConfig.callbackUri; // IdP config.\n\n    this.idpEntityId = response.idpConfig.idpEntityId;\n    this.ssoURL = response.idpConfig.ssoUrl;\n    this.enableRequestSigning = !!response.idpConfig.signRequest;\n    var x509Certificates = [];\n\n    for (var _i = 0, _a = response.idpConfig.idpCertificates || []; _i < _a.length; _i++) {\n      var cert = _a[_i];\n\n      if (cert.x509Certificate) {\n        x509Certificates.push(cert.x509Certificate);\n      }\n    }\n\n    this.x509Certificates = x509Certificates; // When enabled is undefined, it takes its default value of false.\n\n    this.enabled = !!response.enabled;\n    this.displayName = response.displayName;\n  }\n  /**\n   * Converts a client side request to a SAMLConfigServerRequest which is the format\n   * accepted by the backend server.\n   * Throws an error if validation fails. If the request is not a SAMLConfig request,\n   * returns null.\n   *\n   * @param {SAMLAuthProviderRequest} options The options object to convert to a server request.\n   * @param {boolean=} ignoreMissingFields Whether to ignore missing fields.\n   * @return {?SAMLConfigServerRequest} The resulting server request or null if not valid.\n   */\n\n\n  SAMLConfig.buildServerRequest = function (options, ignoreMissingFields) {\n    if (ignoreMissingFields === void 0) {\n      ignoreMissingFields = false;\n    }\n\n    var makeRequest = validator.isNonNullObject(options) && (options.providerId || ignoreMissingFields);\n\n    if (!makeRequest) {\n      return null;\n    }\n\n    var request = {}; // Validate options.\n\n    SAMLConfig.validate(options, ignoreMissingFields);\n    request.enabled = options.enabled;\n    request.displayName = options.displayName; // IdP config.\n\n    if (options.idpEntityId || options.ssoURL || options.x509Certificates) {\n      request.idpConfig = {\n        idpEntityId: options.idpEntityId,\n        ssoUrl: options.ssoURL,\n        signRequest: options.enableRequestSigning,\n        idpCertificates: typeof options.x509Certificates === 'undefined' ? undefined : []\n      };\n\n      if (options.x509Certificates) {\n        for (var _i = 0, _a = options.x509Certificates || []; _i < _a.length; _i++) {\n          var cert = _a[_i];\n          request.idpConfig.idpCertificates.push({\n            x509Certificate: cert\n          });\n        }\n      }\n    } // RP config.\n\n\n    if (options.callbackURL || options.rpEntityId) {\n      request.spConfig = {\n        spEntityId: options.rpEntityId,\n        callbackUri: options.callbackURL\n      };\n    }\n\n    return request;\n  };\n  /**\n   * Returns the provider ID corresponding to the resource name if available.\n   *\n   * @param {string} resourceName The server side resource name.\n   * @return {?string} The provider ID corresponding to the resource, null otherwise.\n   */\n\n\n  SAMLConfig.getProviderIdFromResourceName = function (resourceName) {\n    // name is of form projects/project1/inboundSamlConfigs/providerId1\n    var matchProviderRes = resourceName.match(/\\/inboundSamlConfigs\\/(saml\\..*)$/);\n\n    if (!matchProviderRes || matchProviderRes.length < 2) {\n      return null;\n    }\n\n    return matchProviderRes[1];\n  };\n  /**\n   * @param {any} providerId The provider ID to check.\n   * @return {boolean} Whether the provider ID corresponds to a SAML provider.\n   */\n\n\n  SAMLConfig.isProviderId = function (providerId) {\n    return validator.isNonEmptyString(providerId) && providerId.indexOf('saml.') === 0;\n  };\n  /**\n   * Validates the SAMLConfig options object. Throws an error on failure.\n   *\n   * @param {SAMLAuthProviderRequest} options The options object to validate.\n   * @param {boolean=} ignoreMissingFields Whether to ignore missing fields.\n   */\n\n\n  SAMLConfig.validate = function (options, ignoreMissingFields) {\n    if (ignoreMissingFields === void 0) {\n      ignoreMissingFields = false;\n    }\n\n    var validKeys = {\n      enabled: true,\n      displayName: true,\n      providerId: true,\n      idpEntityId: true,\n      ssoURL: true,\n      x509Certificates: true,\n      rpEntityId: true,\n      callbackURL: true,\n      enableRequestSigning: true\n    };\n\n    if (!validator.isNonNullObject(options)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig\" must be a valid non-null object.');\n    } // Check for unsupported top level attributes.\n\n\n    for (var key in options) {\n      if (!(key in validKeys)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, \"\\\"\" + key + \"\\\" is not a valid SAML config parameter.\");\n      }\n    } // Required fields.\n\n\n    if (validator.isNonEmptyString(options.providerId)) {\n      if (options.providerId.indexOf('saml.') !== 0) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID, '\"SAMLAuthProviderConfig.providerId\" must be a valid non-empty string prefixed with \"saml.\".');\n      }\n    } else if (!ignoreMissingFields) {\n      // providerId is required and not provided correctly.\n      throw new error_1.FirebaseAuthError(!options.providerId ? error_1.AuthClientErrorCode.MISSING_PROVIDER_ID : error_1.AuthClientErrorCode.INVALID_PROVIDER_ID, '\"SAMLAuthProviderConfig.providerId\" must be a valid non-empty string prefixed with \"saml.\".');\n    }\n\n    if (!(ignoreMissingFields && typeof options.idpEntityId === 'undefined') && !validator.isNonEmptyString(options.idpEntityId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.idpEntityId\" must be a valid non-empty string.');\n    }\n\n    if (!(ignoreMissingFields && typeof options.ssoURL === 'undefined') && !validator.isURL(options.ssoURL)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.ssoURL\" must be a valid URL string.');\n    }\n\n    if (!(ignoreMissingFields && typeof options.rpEntityId === 'undefined') && !validator.isNonEmptyString(options.rpEntityId)) {\n      throw new error_1.FirebaseAuthError(!options.rpEntityId ? error_1.AuthClientErrorCode.MISSING_SAML_RELYING_PARTY_CONFIG : error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.rpEntityId\" must be a valid non-empty string.');\n    }\n\n    if (!(ignoreMissingFields && typeof options.callbackURL === 'undefined') && !validator.isURL(options.callbackURL)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.callbackURL\" must be a valid URL string.');\n    }\n\n    if (!(ignoreMissingFields && typeof options.x509Certificates === 'undefined') && !validator.isArray(options.x509Certificates)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.x509Certificates\" must be a valid array of X509 certificate strings.');\n    }\n\n    (options.x509Certificates || []).forEach(function (cert) {\n      if (!validator.isNonEmptyString(cert)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.x509Certificates\" must be a valid array of X509 certificate strings.');\n      }\n    });\n\n    if (typeof options.enableRequestSigning !== 'undefined' && !validator.isBoolean(options.enableRequestSigning)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.enableRequestSigning\" must be a boolean.');\n    }\n\n    if (typeof options.enabled !== 'undefined' && !validator.isBoolean(options.enabled)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.enabled\" must be a boolean.');\n    }\n\n    if (typeof options.displayName !== 'undefined' && !validator.isString(options.displayName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.displayName\" must be a valid string.');\n    }\n  };\n  /** @return {SAMLAuthProviderConfig} The plain object representation of the SAMLConfig. */\n\n\n  SAMLConfig.prototype.toJSON = function () {\n    return {\n      enabled: this.enabled,\n      displayName: this.displayName,\n      providerId: this.providerId,\n      idpEntityId: this.idpEntityId,\n      ssoURL: this.ssoURL,\n      x509Certificates: deep_copy_1.deepCopy(this.x509Certificates),\n      rpEntityId: this.rpEntityId,\n      callbackURL: this.callbackURL,\n      enableRequestSigning: this.enableRequestSigning\n    };\n  };\n\n  return SAMLConfig;\n}();\n\nexports.SAMLConfig = SAMLConfig;\n/**\n * Defines the OIDCConfig class used to convert a client side configuration to its\n * server side representation.\n */\n\nvar OIDCConfig =\n/** @class */\nfunction () {\n  /**\n   * The OIDCConfig constructor.\n   *\n   * @param {any} response The server side response used to initialize the OIDCConfig object.\n   * @constructor\n   */\n  function OIDCConfig(response) {\n    if (!response || !response.issuer || !response.clientId || !response.name || !(validator.isString(response.name) && OIDCConfig.getProviderIdFromResourceName(response.name))) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid OIDC configuration response');\n    }\n\n    var providerId = OIDCConfig.getProviderIdFromResourceName(response.name);\n\n    if (!providerId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid SAML configuration response');\n    }\n\n    this.providerId = providerId;\n    this.clientId = response.clientId;\n    this.issuer = response.issuer; // When enabled is undefined, it takes its default value of false.\n\n    this.enabled = !!response.enabled;\n    this.displayName = response.displayName;\n  }\n  /**\n   * Converts a client side request to a OIDCConfigServerRequest which is the format\n   * accepted by the backend server.\n   * Throws an error if validation fails. If the request is not a OIDCConfig request,\n   * returns null.\n   *\n   * @param {OIDCAuthProviderRequest} options The options object to convert to a server request.\n   * @param {boolean=} ignoreMissingFields Whether to ignore missing fields.\n   * @return {?OIDCConfigServerRequest} The resulting server request or null if not valid.\n   */\n\n\n  OIDCConfig.buildServerRequest = function (options, ignoreMissingFields) {\n    if (ignoreMissingFields === void 0) {\n      ignoreMissingFields = false;\n    }\n\n    var makeRequest = validator.isNonNullObject(options) && (options.providerId || ignoreMissingFields);\n\n    if (!makeRequest) {\n      return null;\n    }\n\n    var request = {}; // Validate options.\n\n    OIDCConfig.validate(options, ignoreMissingFields);\n    request.enabled = options.enabled;\n    request.displayName = options.displayName;\n    request.issuer = options.issuer;\n    request.clientId = options.clientId;\n    return request;\n  };\n  /**\n   * Returns the provider ID corresponding to the resource name if available.\n   *\n   * @param {string} resourceName The server side resource name\n   * @return {?string} The provider ID corresponding to the resource, null otherwise.\n   */\n\n\n  OIDCConfig.getProviderIdFromResourceName = function (resourceName) {\n    // name is of form projects/project1/oauthIdpConfigs/providerId1\n    var matchProviderRes = resourceName.match(/\\/oauthIdpConfigs\\/(oidc\\..*)$/);\n\n    if (!matchProviderRes || matchProviderRes.length < 2) {\n      return null;\n    }\n\n    return matchProviderRes[1];\n  };\n  /**\n   * @param {any} providerId The provider ID to check.\n   * @return {boolean} Whether the provider ID corresponds to an OIDC provider.\n   */\n\n\n  OIDCConfig.isProviderId = function (providerId) {\n    return validator.isNonEmptyString(providerId) && providerId.indexOf('oidc.') === 0;\n  };\n  /**\n   * Validates the OIDCConfig options object. Throws an error on failure.\n   *\n   * @param {OIDCAuthProviderRequest} options The options object to validate.\n   * @param {boolean=} ignoreMissingFields Whether to ignore missing fields.\n   */\n\n\n  OIDCConfig.validate = function (options, ignoreMissingFields) {\n    if (ignoreMissingFields === void 0) {\n      ignoreMissingFields = false;\n    }\n\n    var validKeys = {\n      enabled: true,\n      displayName: true,\n      providerId: true,\n      clientId: true,\n      issuer: true\n    };\n\n    if (!validator.isNonNullObject(options)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"OIDCAuthProviderConfig\" must be a valid non-null object.');\n    } // Check for unsupported top level attributes.\n\n\n    for (var key in options) {\n      if (!(key in validKeys)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, \"\\\"\" + key + \"\\\" is not a valid OIDC config parameter.\");\n      }\n    } // Required fields.\n\n\n    if (validator.isNonEmptyString(options.providerId)) {\n      if (options.providerId.indexOf('oidc.') !== 0) {\n        throw new error_1.FirebaseAuthError(!options.providerId ? error_1.AuthClientErrorCode.MISSING_PROVIDER_ID : error_1.AuthClientErrorCode.INVALID_PROVIDER_ID, '\"OIDCAuthProviderConfig.providerId\" must be a valid non-empty string prefixed with \"oidc.\".');\n      }\n    } else if (!ignoreMissingFields) {\n      throw new error_1.FirebaseAuthError(!options.providerId ? error_1.AuthClientErrorCode.MISSING_PROVIDER_ID : error_1.AuthClientErrorCode.INVALID_PROVIDER_ID, '\"OIDCAuthProviderConfig.providerId\" must be a valid non-empty string prefixed with \"oidc.\".');\n    }\n\n    if (!(ignoreMissingFields && typeof options.clientId === 'undefined') && !validator.isNonEmptyString(options.clientId)) {\n      throw new error_1.FirebaseAuthError(!options.clientId ? error_1.AuthClientErrorCode.MISSING_OAUTH_CLIENT_ID : error_1.AuthClientErrorCode.INVALID_OAUTH_CLIENT_ID, '\"OIDCAuthProviderConfig.clientId\" must be a valid non-empty string.');\n    }\n\n    if (!(ignoreMissingFields && typeof options.issuer === 'undefined') && !validator.isURL(options.issuer)) {\n      throw new error_1.FirebaseAuthError(!options.issuer ? error_1.AuthClientErrorCode.MISSING_ISSUER : error_1.AuthClientErrorCode.INVALID_CONFIG, '\"OIDCAuthProviderConfig.issuer\" must be a valid URL string.');\n    }\n\n    if (typeof options.enabled !== 'undefined' && !validator.isBoolean(options.enabled)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"OIDCAuthProviderConfig.enabled\" must be a boolean.');\n    }\n\n    if (typeof options.displayName !== 'undefined' && !validator.isString(options.displayName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"OIDCAuthProviderConfig.displayName\" must be a valid string.');\n    }\n  };\n  /** @return {OIDCAuthProviderConfig} The plain object representation of the OIDCConfig. */\n\n\n  OIDCConfig.prototype.toJSON = function () {\n    return {\n      enabled: this.enabled,\n      displayName: this.displayName,\n      providerId: this.providerId,\n      issuer: this.issuer,\n      clientId: this.clientId\n    };\n  };\n\n  return OIDCConfig;\n}();\n\nexports.OIDCConfig = OIDCConfig;","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/firebase-admin/lib/auth/auth-config.js"],"names":["Object","defineProperty","exports","value","validator","require","deep_copy_1","error_1","EmailSignInConfig","response","allowPasswordSignup","FirebaseAuthError","AuthClientErrorCode","INTERNAL_ERROR","enabled","passwordRequired","enableEmailLinkSignin","buildServerRequest","options","request","validate","hasOwnProperty","validKeys","isNonNullObject","INVALID_ARGUMENT","key","isBoolean","prototype","toJSON","SAMLConfig","idpConfig","idpEntityId","ssoUrl","spConfig","spEntityId","name","isString","getProviderIdFromResourceName","providerId","rpEntityId","callbackURL","callbackUri","ssoURL","enableRequestSigning","signRequest","x509Certificates","_i","_a","idpCertificates","length","cert","x509Certificate","push","displayName","ignoreMissingFields","makeRequest","undefined","resourceName","matchProviderRes","match","isProviderId","isNonEmptyString","indexOf","INVALID_CONFIG","INVALID_PROVIDER_ID","MISSING_PROVIDER_ID","isURL","MISSING_SAML_RELYING_PARTY_CONFIG","isArray","forEach","deepCopy","OIDCConfig","issuer","clientId","MISSING_OAUTH_CLIENT_ID","INVALID_OAUTH_CLIENT_ID","MISSING_ISSUER"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.9.2 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar validator = require(\"../utils/validator\");\nvar deep_copy_1 = require(\"../utils/deep-copy\");\nvar error_1 = require(\"../utils/error\");\n/**\n * Defines the email sign-in config class used to convert client side EmailSignInConfig\n * to a format that is understood by the Auth server.\n */\nvar EmailSignInConfig = /** @class */ (function () {\n    /**\n     * The EmailSignInConfig constructor.\n     *\n     * @param {any} response The server side response used to initialize the\n     *     EmailSignInConfig object.\n     * @constructor\n     */\n    function EmailSignInConfig(response) {\n        if (typeof response.allowPasswordSignup === 'undefined') {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid email sign-in configuration response');\n        }\n        this.enabled = response.allowPasswordSignup;\n        this.passwordRequired = !response.enableEmailLinkSignin;\n    }\n    /**\n     * Static method to convert a client side request to a EmailSignInConfigServerRequest.\n     * Throws an error if validation fails.\n     *\n     * @param {any} options The options object to convert to a server request.\n     * @return {EmailSignInConfigServerRequest} The resulting server request.\n     */\n    EmailSignInConfig.buildServerRequest = function (options) {\n        var request = {};\n        EmailSignInConfig.validate(options);\n        if (options.hasOwnProperty('enabled')) {\n            request.allowPasswordSignup = options.enabled;\n        }\n        if (options.hasOwnProperty('passwordRequired')) {\n            request.enableEmailLinkSignin = !options.passwordRequired;\n        }\n        return request;\n    };\n    /**\n     * Validates the EmailSignInConfig options object. Throws an error on failure.\n     *\n     * @param {any} options The options object to validate.\n     */\n    EmailSignInConfig.validate = function (options) {\n        // TODO: Validate the request.\n        var validKeys = {\n            enabled: true,\n            passwordRequired: true,\n        };\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"EmailSignInConfig\" must be a non-null object.');\n        }\n        // Check for unsupported top level attributes.\n        for (var key in options) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + key + \"\\\" is not a valid EmailSignInConfig parameter.\");\n            }\n        }\n        // Validate content.\n        if (typeof options.enabled !== 'undefined' &&\n            !validator.isBoolean(options.enabled)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"EmailSignInConfig.enabled\" must be a boolean.');\n        }\n        if (typeof options.passwordRequired !== 'undefined' &&\n            !validator.isBoolean(options.passwordRequired)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"EmailSignInConfig.passwordRequired\" must be a boolean.');\n        }\n    };\n    /** @return {object} The plain object representation of the email sign-in config. */\n    EmailSignInConfig.prototype.toJSON = function () {\n        return {\n            enabled: this.enabled,\n            passwordRequired: this.passwordRequired,\n        };\n    };\n    return EmailSignInConfig;\n}());\nexports.EmailSignInConfig = EmailSignInConfig;\n/**\n * Defines the SAMLConfig class used to convert a client side configuration to its\n * server side representation.\n */\nvar SAMLConfig = /** @class */ (function () {\n    /**\n     * The SAMLConfig constructor.\n     *\n     * @param {any} response The server side response used to initialize the SAMLConfig object.\n     * @constructor\n     */\n    function SAMLConfig(response) {\n        if (!response ||\n            !response.idpConfig ||\n            !response.idpConfig.idpEntityId ||\n            !response.idpConfig.ssoUrl ||\n            !response.spConfig ||\n            !response.spConfig.spEntityId ||\n            !response.name ||\n            !(validator.isString(response.name) &&\n                SAMLConfig.getProviderIdFromResourceName(response.name))) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid SAML configuration response');\n        }\n        var providerId = SAMLConfig.getProviderIdFromResourceName(response.name);\n        if (!providerId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid SAML configuration response');\n        }\n        this.providerId = providerId;\n        // RP config.\n        this.rpEntityId = response.spConfig.spEntityId;\n        this.callbackURL = response.spConfig.callbackUri;\n        // IdP config.\n        this.idpEntityId = response.idpConfig.idpEntityId;\n        this.ssoURL = response.idpConfig.ssoUrl;\n        this.enableRequestSigning = !!response.idpConfig.signRequest;\n        var x509Certificates = [];\n        for (var _i = 0, _a = (response.idpConfig.idpCertificates || []); _i < _a.length; _i++) {\n            var cert = _a[_i];\n            if (cert.x509Certificate) {\n                x509Certificates.push(cert.x509Certificate);\n            }\n        }\n        this.x509Certificates = x509Certificates;\n        // When enabled is undefined, it takes its default value of false.\n        this.enabled = !!response.enabled;\n        this.displayName = response.displayName;\n    }\n    /**\n     * Converts a client side request to a SAMLConfigServerRequest which is the format\n     * accepted by the backend server.\n     * Throws an error if validation fails. If the request is not a SAMLConfig request,\n     * returns null.\n     *\n     * @param {SAMLAuthProviderRequest} options The options object to convert to a server request.\n     * @param {boolean=} ignoreMissingFields Whether to ignore missing fields.\n     * @return {?SAMLConfigServerRequest} The resulting server request or null if not valid.\n     */\n    SAMLConfig.buildServerRequest = function (options, ignoreMissingFields) {\n        if (ignoreMissingFields === void 0) { ignoreMissingFields = false; }\n        var makeRequest = validator.isNonNullObject(options) &&\n            (options.providerId || ignoreMissingFields);\n        if (!makeRequest) {\n            return null;\n        }\n        var request = {};\n        // Validate options.\n        SAMLConfig.validate(options, ignoreMissingFields);\n        request.enabled = options.enabled;\n        request.displayName = options.displayName;\n        // IdP config.\n        if (options.idpEntityId || options.ssoURL || options.x509Certificates) {\n            request.idpConfig = {\n                idpEntityId: options.idpEntityId,\n                ssoUrl: options.ssoURL,\n                signRequest: options.enableRequestSigning,\n                idpCertificates: typeof options.x509Certificates === 'undefined' ? undefined : [],\n            };\n            if (options.x509Certificates) {\n                for (var _i = 0, _a = (options.x509Certificates || []); _i < _a.length; _i++) {\n                    var cert = _a[_i];\n                    request.idpConfig.idpCertificates.push({ x509Certificate: cert });\n                }\n            }\n        }\n        // RP config.\n        if (options.callbackURL || options.rpEntityId) {\n            request.spConfig = {\n                spEntityId: options.rpEntityId,\n                callbackUri: options.callbackURL,\n            };\n        }\n        return request;\n    };\n    /**\n     * Returns the provider ID corresponding to the resource name if available.\n     *\n     * @param {string} resourceName The server side resource name.\n     * @return {?string} The provider ID corresponding to the resource, null otherwise.\n     */\n    SAMLConfig.getProviderIdFromResourceName = function (resourceName) {\n        // name is of form projects/project1/inboundSamlConfigs/providerId1\n        var matchProviderRes = resourceName.match(/\\/inboundSamlConfigs\\/(saml\\..*)$/);\n        if (!matchProviderRes || matchProviderRes.length < 2) {\n            return null;\n        }\n        return matchProviderRes[1];\n    };\n    /**\n     * @param {any} providerId The provider ID to check.\n     * @return {boolean} Whether the provider ID corresponds to a SAML provider.\n     */\n    SAMLConfig.isProviderId = function (providerId) {\n        return validator.isNonEmptyString(providerId) && providerId.indexOf('saml.') === 0;\n    };\n    /**\n     * Validates the SAMLConfig options object. Throws an error on failure.\n     *\n     * @param {SAMLAuthProviderRequest} options The options object to validate.\n     * @param {boolean=} ignoreMissingFields Whether to ignore missing fields.\n     */\n    SAMLConfig.validate = function (options, ignoreMissingFields) {\n        if (ignoreMissingFields === void 0) { ignoreMissingFields = false; }\n        var validKeys = {\n            enabled: true,\n            displayName: true,\n            providerId: true,\n            idpEntityId: true,\n            ssoURL: true,\n            x509Certificates: true,\n            rpEntityId: true,\n            callbackURL: true,\n            enableRequestSigning: true,\n        };\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig\" must be a valid non-null object.');\n        }\n        // Check for unsupported top level attributes.\n        for (var key in options) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, \"\\\"\" + key + \"\\\" is not a valid SAML config parameter.\");\n            }\n        }\n        // Required fields.\n        if (validator.isNonEmptyString(options.providerId)) {\n            if (options.providerId.indexOf('saml.') !== 0) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID, '\"SAMLAuthProviderConfig.providerId\" must be a valid non-empty string prefixed with \"saml.\".');\n            }\n        }\n        else if (!ignoreMissingFields) {\n            // providerId is required and not provided correctly.\n            throw new error_1.FirebaseAuthError(!options.providerId ? error_1.AuthClientErrorCode.MISSING_PROVIDER_ID : error_1.AuthClientErrorCode.INVALID_PROVIDER_ID, '\"SAMLAuthProviderConfig.providerId\" must be a valid non-empty string prefixed with \"saml.\".');\n        }\n        if (!(ignoreMissingFields && typeof options.idpEntityId === 'undefined') &&\n            !validator.isNonEmptyString(options.idpEntityId)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.idpEntityId\" must be a valid non-empty string.');\n        }\n        if (!(ignoreMissingFields && typeof options.ssoURL === 'undefined') &&\n            !validator.isURL(options.ssoURL)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.ssoURL\" must be a valid URL string.');\n        }\n        if (!(ignoreMissingFields && typeof options.rpEntityId === 'undefined') &&\n            !validator.isNonEmptyString(options.rpEntityId)) {\n            throw new error_1.FirebaseAuthError(!options.rpEntityId ? error_1.AuthClientErrorCode.MISSING_SAML_RELYING_PARTY_CONFIG :\n                error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.rpEntityId\" must be a valid non-empty string.');\n        }\n        if (!(ignoreMissingFields && typeof options.callbackURL === 'undefined') &&\n            !validator.isURL(options.callbackURL)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.callbackURL\" must be a valid URL string.');\n        }\n        if (!(ignoreMissingFields && typeof options.x509Certificates === 'undefined') &&\n            !validator.isArray(options.x509Certificates)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.x509Certificates\" must be a valid array of X509 certificate strings.');\n        }\n        (options.x509Certificates || []).forEach(function (cert) {\n            if (!validator.isNonEmptyString(cert)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.x509Certificates\" must be a valid array of X509 certificate strings.');\n            }\n        });\n        if (typeof options.enableRequestSigning !== 'undefined' &&\n            !validator.isBoolean(options.enableRequestSigning)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.enableRequestSigning\" must be a boolean.');\n        }\n        if (typeof options.enabled !== 'undefined' &&\n            !validator.isBoolean(options.enabled)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.enabled\" must be a boolean.');\n        }\n        if (typeof options.displayName !== 'undefined' &&\n            !validator.isString(options.displayName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.displayName\" must be a valid string.');\n        }\n    };\n    /** @return {SAMLAuthProviderConfig} The plain object representation of the SAMLConfig. */\n    SAMLConfig.prototype.toJSON = function () {\n        return {\n            enabled: this.enabled,\n            displayName: this.displayName,\n            providerId: this.providerId,\n            idpEntityId: this.idpEntityId,\n            ssoURL: this.ssoURL,\n            x509Certificates: deep_copy_1.deepCopy(this.x509Certificates),\n            rpEntityId: this.rpEntityId,\n            callbackURL: this.callbackURL,\n            enableRequestSigning: this.enableRequestSigning,\n        };\n    };\n    return SAMLConfig;\n}());\nexports.SAMLConfig = SAMLConfig;\n/**\n * Defines the OIDCConfig class used to convert a client side configuration to its\n * server side representation.\n */\nvar OIDCConfig = /** @class */ (function () {\n    /**\n     * The OIDCConfig constructor.\n     *\n     * @param {any} response The server side response used to initialize the OIDCConfig object.\n     * @constructor\n     */\n    function OIDCConfig(response) {\n        if (!response ||\n            !response.issuer ||\n            !response.clientId ||\n            !response.name ||\n            !(validator.isString(response.name) &&\n                OIDCConfig.getProviderIdFromResourceName(response.name))) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid OIDC configuration response');\n        }\n        var providerId = OIDCConfig.getProviderIdFromResourceName(response.name);\n        if (!providerId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid SAML configuration response');\n        }\n        this.providerId = providerId;\n        this.clientId = response.clientId;\n        this.issuer = response.issuer;\n        // When enabled is undefined, it takes its default value of false.\n        this.enabled = !!response.enabled;\n        this.displayName = response.displayName;\n    }\n    /**\n     * Converts a client side request to a OIDCConfigServerRequest which is the format\n     * accepted by the backend server.\n     * Throws an error if validation fails. If the request is not a OIDCConfig request,\n     * returns null.\n     *\n     * @param {OIDCAuthProviderRequest} options The options object to convert to a server request.\n     * @param {boolean=} ignoreMissingFields Whether to ignore missing fields.\n     * @return {?OIDCConfigServerRequest} The resulting server request or null if not valid.\n     */\n    OIDCConfig.buildServerRequest = function (options, ignoreMissingFields) {\n        if (ignoreMissingFields === void 0) { ignoreMissingFields = false; }\n        var makeRequest = validator.isNonNullObject(options) &&\n            (options.providerId || ignoreMissingFields);\n        if (!makeRequest) {\n            return null;\n        }\n        var request = {};\n        // Validate options.\n        OIDCConfig.validate(options, ignoreMissingFields);\n        request.enabled = options.enabled;\n        request.displayName = options.displayName;\n        request.issuer = options.issuer;\n        request.clientId = options.clientId;\n        return request;\n    };\n    /**\n     * Returns the provider ID corresponding to the resource name if available.\n     *\n     * @param {string} resourceName The server side resource name\n     * @return {?string} The provider ID corresponding to the resource, null otherwise.\n     */\n    OIDCConfig.getProviderIdFromResourceName = function (resourceName) {\n        // name is of form projects/project1/oauthIdpConfigs/providerId1\n        var matchProviderRes = resourceName.match(/\\/oauthIdpConfigs\\/(oidc\\..*)$/);\n        if (!matchProviderRes || matchProviderRes.length < 2) {\n            return null;\n        }\n        return matchProviderRes[1];\n    };\n    /**\n     * @param {any} providerId The provider ID to check.\n     * @return {boolean} Whether the provider ID corresponds to an OIDC provider.\n     */\n    OIDCConfig.isProviderId = function (providerId) {\n        return validator.isNonEmptyString(providerId) && providerId.indexOf('oidc.') === 0;\n    };\n    /**\n     * Validates the OIDCConfig options object. Throws an error on failure.\n     *\n     * @param {OIDCAuthProviderRequest} options The options object to validate.\n     * @param {boolean=} ignoreMissingFields Whether to ignore missing fields.\n     */\n    OIDCConfig.validate = function (options, ignoreMissingFields) {\n        if (ignoreMissingFields === void 0) { ignoreMissingFields = false; }\n        var validKeys = {\n            enabled: true,\n            displayName: true,\n            providerId: true,\n            clientId: true,\n            issuer: true,\n        };\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"OIDCAuthProviderConfig\" must be a valid non-null object.');\n        }\n        // Check for unsupported top level attributes.\n        for (var key in options) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, \"\\\"\" + key + \"\\\" is not a valid OIDC config parameter.\");\n            }\n        }\n        // Required fields.\n        if (validator.isNonEmptyString(options.providerId)) {\n            if (options.providerId.indexOf('oidc.') !== 0) {\n                throw new error_1.FirebaseAuthError(!options.providerId ? error_1.AuthClientErrorCode.MISSING_PROVIDER_ID : error_1.AuthClientErrorCode.INVALID_PROVIDER_ID, '\"OIDCAuthProviderConfig.providerId\" must be a valid non-empty string prefixed with \"oidc.\".');\n            }\n        }\n        else if (!ignoreMissingFields) {\n            throw new error_1.FirebaseAuthError(!options.providerId ? error_1.AuthClientErrorCode.MISSING_PROVIDER_ID : error_1.AuthClientErrorCode.INVALID_PROVIDER_ID, '\"OIDCAuthProviderConfig.providerId\" must be a valid non-empty string prefixed with \"oidc.\".');\n        }\n        if (!(ignoreMissingFields && typeof options.clientId === 'undefined') &&\n            !validator.isNonEmptyString(options.clientId)) {\n            throw new error_1.FirebaseAuthError(!options.clientId ? error_1.AuthClientErrorCode.MISSING_OAUTH_CLIENT_ID : error_1.AuthClientErrorCode.INVALID_OAUTH_CLIENT_ID, '\"OIDCAuthProviderConfig.clientId\" must be a valid non-empty string.');\n        }\n        if (!(ignoreMissingFields && typeof options.issuer === 'undefined') &&\n            !validator.isURL(options.issuer)) {\n            throw new error_1.FirebaseAuthError(!options.issuer ? error_1.AuthClientErrorCode.MISSING_ISSUER : error_1.AuthClientErrorCode.INVALID_CONFIG, '\"OIDCAuthProviderConfig.issuer\" must be a valid URL string.');\n        }\n        if (typeof options.enabled !== 'undefined' &&\n            !validator.isBoolean(options.enabled)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"OIDCAuthProviderConfig.enabled\" must be a boolean.');\n        }\n        if (typeof options.displayName !== 'undefined' &&\n            !validator.isString(options.displayName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"OIDCAuthProviderConfig.displayName\" must be a valid string.');\n        }\n    };\n    /** @return {OIDCAuthProviderConfig} The plain object representation of the OIDCConfig. */\n    OIDCConfig.prototype.toJSON = function () {\n        return {\n            enabled: this.enabled,\n            displayName: this.displayName,\n            providerId: this.providerId,\n            issuer: this.issuer,\n            clientId: this.clientId,\n        };\n    };\n    return OIDCConfig;\n}());\nexports.OIDCConfig = OIDCConfig;\n"]},"metadata":{},"sourceType":"script"}