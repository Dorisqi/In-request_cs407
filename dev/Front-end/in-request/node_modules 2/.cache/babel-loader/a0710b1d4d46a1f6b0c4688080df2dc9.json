{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Meter) {\n  var DocumentedMeter = describe(Meter).availableAt(getAvailableAtBadge('Meter')).description('A graphical meter.').usage(\"import { Meter } from 'grommet';\\n<Meter />\"); // We don't include svg due to a collision on the values property\n  // .intrinsicElement('svg');\n\n  DocumentedMeter.propTypes = _extends({}, genericProps, {\n    background: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n      color: PropTypes.string,\n      opacity: PropTypes.oneOfType([PropTypes.oneOf(['weak', 'medium', 'strong']), PropTypes.bool])\n    })]).description('Background color').defaultValue({\n      color: 'light-2',\n      opacity: 'medium'\n    }),\n    max: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).description('The maximum value for the Meter.'),\n    round: PropTypes.bool.description('Whether to round the line ends').defaultValue(false),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'full']), PropTypes.string]).description('The size of the Meter.').defaultValue('medium'),\n    thickness: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The size of the Meter.').defaultValue('medium'),\n    type: PropTypes.oneOf(['bar', 'circle']).description('The visual type of meter.').defaultValue('bar'),\n    values: PropTypes.arrayOf(PropTypes.shape({\n      color: PropTypes.string,\n      highlight: PropTypes.bool,\n      label: PropTypes.string.isRequired,\n      // for accessibility\n      onClick: PropTypes.func,\n      onHover: PropTypes.func,\n      value: PropTypes.number.isRequired\n    })).description(\"Array of value objects describing the data.\\n      'value' is the actual numeric value.\\n      'label' is a text string describing it.\\n      'color' indicates the color name to use. If not specified a default one\\n      will be chosen.\\n      'onClick' will be called when the user clicks on it.\\n      Set 'highlight' to call attention to it.\\n      'onHover' will be called with a boolean argument indicating when the\\n      user hovers onto or away from it.\")\n  });\n  return DocumentedMeter;\n};\nexport var themeDoc = {\n  'global.colors': {\n    description: 'Color options.',\n    type: 'object',\n    defaultValue: \"{\\n      \\\"accent-1\\\": \\\"#6FFFB0\\\",\\n      \\\"graph-0\\\": \\\"accent-1\\\",\\n      ...\\n    }\"\n  },\n  'global.edgeSize': {\n    description: \"The border-radius of the styled Meter. thickness, height and \\n    width of the Bar Meter, height of the Circle Meter.\",\n    type: 'object',\n    defaultValue: \"{\\n        none: '0px',\\n        hair: '1px',\\n        xxsmall: '3px',\\n        xsmall: '6px',\\n        small: '12px',\\n        medium: '24px',\\n        large: '48px',\\n        xlarge: '96px',\\n        responsiveBreakpoint: 'small',\\n    }\"\n  },\n  'global.opacity.medium': {\n    description: 'The opacity value used on the Meter color.',\n    type: 'number',\n    defaultValue: '0.4'\n  },\n  'global.size': {\n    description: 'The possible sizes for Circle Meter width.',\n    type: 'object',\n    defaultValue: \"{\\n      xxsmall: '48px',\\n      xsmall: '96px',\\n      small: '192px',\\n      medium: '384px',\\n      large: '768px',\\n      xlarge: '1152px',\\n      xxlarge: '1536px',\\n      full: '100%',\\n    }\"\n  },\n  'meter.color': {\n    description: 'The color used for the Meter.',\n    type: 'string',\n    defaultValue: 'accent-1'\n  },\n  'meter.extend': {\n    description: 'Any additional style for Meter.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n};","map":{"version":3,"sources":["/Users/qier/Documents/cs407/In-request_cs407/dev/Front-end/in-request/node_modules/grommet/es6/components/Meter/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","genericProps","getAvailableAtBadge","doc","Meter","DocumentedMeter","availableAt","description","usage","propTypes","background","oneOfType","string","shape","color","opacity","oneOf","bool","defaultValue","max","number","round","size","thickness","type","values","arrayOf","highlight","label","isRequired","onClick","func","onHover","value","themeDoc","undefined"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Meter) {\n  var DocumentedMeter = describe(Meter).availableAt(getAvailableAtBadge('Meter')).description('A graphical meter.').usage(\"import { Meter } from 'grommet';\\n<Meter />\"); // We don't include svg due to a collision on the values property\n  // .intrinsicElement('svg');\n\n  DocumentedMeter.propTypes = _extends({}, genericProps, {\n    background: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n      color: PropTypes.string,\n      opacity: PropTypes.oneOfType([PropTypes.oneOf(['weak', 'medium', 'strong']), PropTypes.bool])\n    })]).description('Background color').defaultValue({\n      color: 'light-2',\n      opacity: 'medium'\n    }),\n    max: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).description('The maximum value for the Meter.'),\n    round: PropTypes.bool.description('Whether to round the line ends').defaultValue(false),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'full']), PropTypes.string]).description('The size of the Meter.').defaultValue('medium'),\n    thickness: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The size of the Meter.').defaultValue('medium'),\n    type: PropTypes.oneOf(['bar', 'circle']).description('The visual type of meter.').defaultValue('bar'),\n    values: PropTypes.arrayOf(PropTypes.shape({\n      color: PropTypes.string,\n      highlight: PropTypes.bool,\n      label: PropTypes.string.isRequired,\n      // for accessibility\n      onClick: PropTypes.func,\n      onHover: PropTypes.func,\n      value: PropTypes.number.isRequired\n    })).description(\"Array of value objects describing the data.\\n      'value' is the actual numeric value.\\n      'label' is a text string describing it.\\n      'color' indicates the color name to use. If not specified a default one\\n      will be chosen.\\n      'onClick' will be called when the user clicks on it.\\n      Set 'highlight' to call attention to it.\\n      'onHover' will be called with a boolean argument indicating when the\\n      user hovers onto or away from it.\")\n  });\n  return DocumentedMeter;\n};\nexport var themeDoc = {\n  'global.colors': {\n    description: 'Color options.',\n    type: 'object',\n    defaultValue: \"{\\n      \\\"accent-1\\\": \\\"#6FFFB0\\\",\\n      \\\"graph-0\\\": \\\"accent-1\\\",\\n      ...\\n    }\"\n  },\n  'global.edgeSize': {\n    description: \"The border-radius of the styled Meter. thickness, height and \\n    width of the Bar Meter, height of the Circle Meter.\",\n    type: 'object',\n    defaultValue: \"{\\n        none: '0px',\\n        hair: '1px',\\n        xxsmall: '3px',\\n        xsmall: '6px',\\n        small: '12px',\\n        medium: '24px',\\n        large: '48px',\\n        xlarge: '96px',\\n        responsiveBreakpoint: 'small',\\n    }\"\n  },\n  'global.opacity.medium': {\n    description: 'The opacity value used on the Meter color.',\n    type: 'number',\n    defaultValue: '0.4'\n  },\n  'global.size': {\n    description: 'The possible sizes for Circle Meter width.',\n    type: 'object',\n    defaultValue: \"{\\n      xxsmall: '48px',\\n      xsmall: '96px',\\n      small: '192px',\\n      medium: '384px',\\n      large: '768px',\\n      xlarge: '1152px',\\n      xxlarge: '1536px',\\n      full: '100%',\\n    }\"\n  },\n  'meter.color': {\n    description: 'The color used for the Meter.',\n    type: 'string',\n    defaultValue: 'accent-1'\n  },\n  'meter.extend': {\n    description: 'Any additional style for Meter.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n};"]},"metadata":{},"sourceType":"module"}